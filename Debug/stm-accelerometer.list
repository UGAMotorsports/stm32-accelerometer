
stm-accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b40  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006cd4  08006cd4  00007cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d40  08006d40  000080fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006d40  08006d40  00007d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d48  08006d48  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d48  08006d48  00007d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08006d50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001404  200000fc  08006e4c  000080fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001500  08006e4c  00008500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d456  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c8  00000000  00000000  00015582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00017f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000855  00000000  00000000  00018aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a96  00000000  00000000  000192f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f49a  00000000  00000000  00030d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008634c  00000000  00000000  00040225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6571  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  000c65b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c9284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006cbc 	.word	0x08006cbc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08006cbc 	.word	0x08006cbc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 f9bf 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f85b 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f8c5 	bl	8000660 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d6:	f005 feb5 	bl	8006244 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[] = "      \r\n";
 80004da:	4a27      	ldr	r2, [pc, #156]	@ (8000578 <main+0xb4>)
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e2:	c303      	stmia	r3!, {r0, r1}
 80004e4:	701a      	strb	r2, [r3, #0]
  uint8_t hello[] = "hello\r\n";
 80004e6:	4a25      	ldr	r2, [pc, #148]	@ (800057c <main+0xb8>)
 80004e8:	463b      	mov	r3, r7
 80004ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint32_t delaytime = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80004f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fa:	4821      	ldr	r0, [pc, #132]	@ (8000580 <main+0xbc>)
 80004fc:	f000 fceb 	bl	8000ed6 <HAL_GPIO_TogglePin>
	  HAL_Delay (100 + delaytime);
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	3364      	adds	r3, #100	@ 0x64
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fa13 	bl	8000930 <HAL_Delay>
	  delaytime += 10;
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	330a      	adds	r3, #10
 800050e:	61fb      	str	r3, [r7, #28]

	  uint32_t placevaluehold = delaytime;
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	61bb      	str	r3, [r7, #24]
	  for (int i = 0; i < 6; i++) {
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e01c      	b.n	8000554 <main+0x90>
		  buffer[5 - i] = (uint8_t)((placevaluehold % 10) + 48);
 800051a:	69b9      	ldr	r1, [r7, #24]
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <main+0xc0>)
 800051e:	fba3 2301 	umull	r2, r3, r3, r1
 8000522:	08da      	lsrs	r2, r3, #3
 8000524:	4613      	mov	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	1aca      	subs	r2, r1, r3
 800052e:	b2d2      	uxtb	r2, r2
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	f1c3 0305 	rsb	r3, r3, #5
 8000536:	3230      	adds	r2, #48	@ 0x30
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	3320      	adds	r3, #32
 800053c:	443b      	add	r3, r7
 800053e:	f803 2c18 	strb.w	r2, [r3, #-24]
		  placevaluehold /= 10;
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	4a0f      	ldr	r2, [pc, #60]	@ (8000584 <main+0xc0>)
 8000546:	fba2 2303 	umull	r2, r3, r2, r3
 800054a:	08db      	lsrs	r3, r3, #3
 800054c:	61bb      	str	r3, [r7, #24]
	  for (int i = 0; i < 6; i++) {
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	2b05      	cmp	r3, #5
 8000558:	dddf      	ble.n	800051a <main+0x56>
	  }
	  CDC_Transmit_FS(hello, sizeof(hello));
 800055a:	463b      	mov	r3, r7
 800055c:	2108      	movs	r1, #8
 800055e:	4618      	mov	r0, r3
 8000560:	f005 ff2e 	bl	80063c0 <CDC_Transmit_FS>
	  HAL_Delay (1);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 f9e3 	bl	8000930 <HAL_Delay>
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	2109      	movs	r1, #9
 8000570:	4618      	mov	r0, r3
 8000572:	f005 ff25 	bl	80063c0 <CDC_Transmit_FS>
  {
 8000576:	e7be      	b.n	80004f6 <main+0x32>
 8000578:	08006cd4 	.word	0x08006cd4
 800057c:	08006ce0 	.word	0x08006ce0
 8000580:	40020800 	.word	0x40020800
 8000584:	cccccccd 	.word	0xcccccccd

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	@ 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fb64 	bl	8006c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	4a28      	ldr	r2, [pc, #160]	@ (8000658 <SystemClock_Config+0xd0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80005bc:	4b26      	ldr	r3, [pc, #152]	@ (8000658 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d4:	4a21      	ldr	r2, [pc, #132]	@ (800065c <SystemClock_Config+0xd4>)
 80005d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005fc:	2319      	movs	r3, #25
 80005fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fecc 	bl	80023b0 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f871 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 f92e 	bl	80028a0 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064a:	f000 f85b 	bl	8000704 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	@ 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_GPIO_Init+0x9c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <MX_GPIO_Init+0x9c>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_GPIO_Init+0x9c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <MX_GPIO_Init+0x9c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a18      	ldr	r2, [pc, #96]	@ (80006fc <MX_GPIO_Init+0x9c>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_GPIO_Init+0x9c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_GPIO_Init+0x9c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a11      	ldr	r2, [pc, #68]	@ (80006fc <MX_GPIO_Init+0x9c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_GPIO_Init+0x9c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDLight_GPIO_Port, LEDLight_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d0:	480b      	ldr	r0, [pc, #44]	@ (8000700 <MX_GPIO_Init+0xa0>)
 80006d2:	f000 fbe7 	bl	8000ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDLight_Pin */
  GPIO_InitStruct.Pin = LEDLight_Pin;
 80006d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEDLight_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_GPIO_Init+0xa0>)
 80006f0:	f000 fa54 	bl	8000b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	@ (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000724:	6453      	str	r3, [r2, #68]	@ 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	@ 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <MemManage_Handler+0x4>

08000778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <UsageFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b6:	f000 f89b 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c4:	4802      	ldr	r0, [pc, #8]	@ (80007d0 <OTG_FS_IRQHandler+0x10>)
 80007c6:	f000 fce4 	bl	8001192 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000dfc 	.word	0x20000dfc

080007d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000830 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007fc:	f7ff ffea 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	@ (8000838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	@ (8000844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f006 fa25 	bl	8006c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082a:	f7ff fe4b 	bl	80004c4 <main>
  bx  lr    
 800082e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000830:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800083c:	08006d50 	.word	0x08006d50
  ldr r2, =_sbss
 8000840:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000844:	20001500 	.word	0x20001500

08000848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <HAL_Init+0x40>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800085a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <HAL_Init+0x40>)
 8000862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <HAL_Init+0x40>)
 800086e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f94f 	bl	8000b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff ff46 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f967 	bl	8000b82 <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f92f 	bl	8000b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	@ (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_IncTick+0x20>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_IncTick+0x24>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <HAL_IncTick+0x24>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008
 8000914:	20000118 	.word	0x20000118

08000918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <HAL_GetTick+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000118 	.word	0x20000118

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff ffee 	bl	8000918 <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffde 	bl	8000918 <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4907      	ldr	r1, [pc, #28]	@ (8000a14 <__NVIC_EnableIRQ+0x38>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	@ (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	@ (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	@ 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ae4:	d301      	bcc.n	8000aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00f      	b.n	8000b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <SysTick_Config+0x40>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af2:	210f      	movs	r1, #15
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f7ff ff8e 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SysTick_Config+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <SysTick_Config+0x40>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ff29 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b40:	f7ff ff3e 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f7ff ff8e 	bl	8000a6c <NVIC_EncodePriority>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5d 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff31 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa2 	bl	8000ad4 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	e159      	b.n	8000e6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 8148 	bne.w	8000e66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d005      	beq.n	8000bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d130      	bne.n	8000c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c24:	2201      	movs	r2, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	091b      	lsrs	r3, r3, #4
 8000c3a:	f003 0201 	and.w	r2, r3, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d017      	beq.n	8000c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d123      	bne.n	8000ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	69b9      	ldr	r1, [r7, #24]
 8000cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0203 	and.w	r2, r3, #3
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 80a2 	beq.w	8000e66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b57      	ldr	r3, [pc, #348]	@ (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	4a56      	ldr	r2, [pc, #344]	@ (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d32:	4b54      	ldr	r3, [pc, #336]	@ (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3e:	4a52      	ldr	r2, [pc, #328]	@ (8000e88 <HAL_GPIO_Init+0x2ec>)
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a49      	ldr	r2, [pc, #292]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d019      	beq.n	8000d9e <HAL_GPIO_Init+0x202>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <HAL_GPIO_Init+0x2f4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d013      	beq.n	8000d9a <HAL_GPIO_Init+0x1fe>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a47      	ldr	r2, [pc, #284]	@ (8000e94 <HAL_GPIO_Init+0x2f8>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d00d      	beq.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a46      	ldr	r2, [pc, #280]	@ (8000e98 <HAL_GPIO_Init+0x2fc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x1f6>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a45      	ldr	r2, [pc, #276]	@ (8000e9c <HAL_GPIO_Init+0x300>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d101      	bne.n	8000d8e <HAL_GPIO_Init+0x1f2>
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e008      	b.n	8000da0 <HAL_GPIO_Init+0x204>
 8000d8e:	2307      	movs	r3, #7
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x204>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_Init+0x204>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x204>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x204>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	69fa      	ldr	r2, [r7, #28]
 8000da2:	f002 0203 	and.w	r2, r2, #3
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4093      	lsls	r3, r2
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db0:	4935      	ldr	r1, [pc, #212]	@ (8000e88 <HAL_GPIO_Init+0x2ec>)
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbe:	4b38      	ldr	r3, [pc, #224]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de2:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e0c:	4a24      	ldr	r2, [pc, #144]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e12:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e36:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	f67f aea2 	bls.w	8000bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020c00 	.word	0x40020c00
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40013c00 	.word	0x40013c00

08000ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ec0:	e003      	b.n	8000eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	041a      	lsls	r2, r3, #16
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	619a      	str	r2, [r3, #24]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ee8:	887a      	ldrh	r2, [r7, #2]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4013      	ands	r3, r2
 8000eee:	041a      	lsls	r2, r3, #16
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af02      	add	r7, sp, #8
 8000f10:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e101      	b.n	8001120 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d106      	bne.n	8000f3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f005 fb8a 	bl	8006650 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2203      	movs	r2, #3
 8000f40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f4a:	d102      	bne.n	8000f52 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 ff71 	bl	8002e3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7c1a      	ldrb	r2, [r3, #16]
 8000f64:	f88d 2000 	strb.w	r2, [sp]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f6c:	f001 fe50 	bl	8002c10 <USB_CoreInit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e0ce      	b.n	8001120 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 ff69 	bl	8002e60 <USB_SetCurrentMode>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e0bf      	b.n	8001120 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e04a      	b.n	800103c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3315      	adds	r3, #21
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3314      	adds	r3, #20
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	b298      	uxth	r0, r3
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	332e      	adds	r3, #46	@ 0x2e
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	331c      	adds	r3, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3320      	adds	r3, #32
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3324      	adds	r3, #36	@ 0x24
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	3301      	adds	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3af      	bcc.n	8000fa6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e044      	b.n	80010d6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	3301      	adds	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	791b      	ldrb	r3, [r3, #4]
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3b5      	bcc.n	800104c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7c1a      	ldrb	r2, [r3, #16]
 80010e8:	f88d 2000 	strb.w	r2, [sp]
 80010ec:	3304      	adds	r3, #4
 80010ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f0:	f001 ff02 	bl	8002ef8 <USB_DevInit>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2202      	movs	r2, #2
 80010fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00c      	b.n	8001120 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f002 ff4c 	bl	8003fb6 <USB_DevDisconnect>

  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800113c:	2b01      	cmp	r3, #1
 800113e:	d101      	bne.n	8001144 <HAL_PCD_Start+0x1c>
 8001140:	2302      	movs	r3, #2
 8001142:	e022      	b.n	800118a <HAL_PCD_Start+0x62>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001154:	2b00      	cmp	r3, #0
 8001156:	d009      	beq.n	800116c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001164:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fe53 	bl	8002e1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fefa 	bl	8003f74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001192:	b590      	push	{r4, r7, lr}
 8001194:	b08d      	sub	sp, #52	@ 0x34
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 ffb8 	bl	800411e <USB_GetMode>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f040 848c 	bne.w	8001ace <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 ff1c 	bl	8003ff8 <USB_ReadInterrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 8482 	beq.w	8001acc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 ff09 	bl	8003ff8 <USB_ReadInterrupts>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d107      	bne.n	8001200 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f002 0202 	and.w	r2, r2, #2
 80011fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fef7 	bl	8003ff8 <USB_ReadInterrupts>
 800120a:	4603      	mov	r3, r0
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	2b10      	cmp	r3, #16
 8001212:	d161      	bne.n	80012d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699a      	ldr	r2, [r3, #24]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0210 	bic.w	r2, r2, #16
 8001222:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	f003 020f 	and.w	r2, r3, #15
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	3304      	adds	r3, #4
 8001242:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	0c5b      	lsrs	r3, r3, #17
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	2b02      	cmp	r3, #2
 800124e:	d124      	bne.n	800129a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d035      	beq.n	80012c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126a:	b29b      	uxth	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	6a38      	ldr	r0, [r7, #32]
 8001270:	f002 fd2e 	bl	8003cd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001280:	441a      	add	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001292:	441a      	add	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	e016      	b.n	80012c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	0c5b      	lsrs	r3, r3, #17
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d110      	bne.n	80012c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80012ac:	2208      	movs	r2, #8
 80012ae:	4619      	mov	r1, r3
 80012b0:	6a38      	ldr	r0, [r7, #32]
 80012b2:	f002 fd0d 	bl	8003cd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c2:	441a      	add	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	699a      	ldr	r2, [r3, #24]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0210 	orr.w	r2, r2, #16
 80012d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fe8b 	bl	8003ff8 <USB_ReadInterrupts>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80012ec:	f040 80a7 	bne.w	800143e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fe90 	bl	800401e <USB_ReadDevAllOutEpInterrupt>
 80012fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001300:	e099      	b.n	8001436 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 808e 	beq.w	800142a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f002 feb4 	bl	8004086 <USB_ReadDevOutEPInterrupt>
 800131e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	015a      	lsls	r2, r3, #5
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	4413      	add	r3, r2
 8001332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001336:	461a      	mov	r2, r3
 8001338:	2301      	movs	r3, #1
 800133a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800133c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fea4 	bl	800208c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	015a      	lsls	r2, r3, #5
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800135a:	461a      	mov	r2, r3
 800135c:	2308      	movs	r3, #8
 800135e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 ff7a 	bl	800225c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d008      	beq.n	8001384 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	015a      	lsls	r2, r3, #5
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	4413      	add	r3, r2
 800137a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800137e:	461a      	mov	r2, r3
 8001380:	2310      	movs	r3, #16
 8001382:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d030      	beq.n	80013f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001396:	2b80      	cmp	r3, #128	@ 0x80
 8001398:	d109      	bne.n	80013ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80013a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	78db      	ldrb	r3, [r3, #3]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2200      	movs	r2, #0
 80013d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f005 fa35 	bl	8006848 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	015a      	lsls	r2, r3, #5
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013ea:	461a      	mov	r2, r3
 80013ec:	2302      	movs	r3, #2
 80013ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d008      	beq.n	800140c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	015a      	lsls	r2, r3, #5
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	4413      	add	r3, r2
 8001402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001406:	461a      	mov	r2, r3
 8001408:	2320      	movs	r3, #32
 800140a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d009      	beq.n	800142a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001422:	461a      	mov	r2, r3
 8001424:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001428:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	3301      	adds	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	f47f af62 	bne.w	8001302 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fdd8 	bl	8003ff8 <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800144e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001452:	f040 80db 	bne.w	800160c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fdf9 	bl	8004052 <USB_ReadDevAllInEpInterrupt>
 8001460:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001466:	e0cd      	b.n	8001604 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80c2 	beq.w	80015f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fe1f 	bl	80040c2 <USB_ReadDevInEPInterrupt>
 8001484:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d057      	beq.n	8001540 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	2201      	movs	r2, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69f9      	ldr	r1, [r7, #28]
 80014ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80014b0:	4013      	ands	r3, r2
 80014b2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014c0:	461a      	mov	r2, r3
 80014c2:	2301      	movs	r3, #1
 80014c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	799b      	ldrb	r3, [r3, #6]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d132      	bne.n	8001534 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3320      	adds	r3, #32
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4403      	add	r3, r0
 80014ee:	331c      	adds	r3, #28
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4419      	add	r1, r3
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4403      	add	r3, r0
 8001502:	3320      	adds	r3, #32
 8001504:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	2b00      	cmp	r3, #0
 800150a:	d113      	bne.n	8001534 <HAL_PCD_IRQHandler+0x3a2>
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3324      	adds	r3, #36	@ 0x24
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d108      	bne.n	8001534 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800152c:	461a      	mov	r2, r3
 800152e:	2101      	movs	r1, #1
 8001530:	f002 fe26 	bl	8004180 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4619      	mov	r1, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f005 f909 	bl	8006752 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	015a      	lsls	r2, r3, #5
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001556:	461a      	mov	r2, r3
 8001558:	2308      	movs	r3, #8
 800155a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001572:	461a      	mov	r2, r3
 8001574:	2310      	movs	r3, #16
 8001576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800158e:	461a      	mov	r2, r3
 8001590:	2340      	movs	r3, #64	@ 0x40
 8001592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d023      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800159e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015a0:	6a38      	ldr	r0, [r7, #32]
 80015a2:	f001 fe0d 	bl	80031c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	3310      	adds	r3, #16
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	3304      	adds	r3, #4
 80015b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	78db      	ldrb	r3, [r3, #3]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2200      	movs	r2, #0
 80015c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f005 f94c 	bl	800686c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e0:	461a      	mov	r2, r3
 80015e2:	2302      	movs	r3, #2
 80015e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fcbd 	bl	8001f72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	3301      	adds	r3, #1
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f af2e 	bne.w	8001468 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fcf1 	bl	8003ff8 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800161c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001620:	d122      	bne.n	8001668 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001648:	2100      	movs	r1, #0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fea4 	bl	8002398 <HAL_PCDEx_LPM_Callback>
 8001650:	e002      	b.n	8001658 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f005 f8ea 	bl	800682c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f002 fcc3 	bl	8003ff8 <USB_ReadInterrupts>
 8001672:	4603      	mov	r3, r0
 8001674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800167c:	d112      	bne.n	80016a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f005 f8a6 	bl	80067e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80016a2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fca5 	bl	8003ff8 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016b8:	f040 80b7 	bne.w	800182a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2110      	movs	r1, #16
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fd72 	bl	80031c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016e0:	e046      	b.n	8001770 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ee:	461a      	mov	r2, r3
 80016f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001706:	0151      	lsls	r1, r2, #5
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	440a      	add	r2, r1
 800170c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001710:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001722:	461a      	mov	r2, r3
 8001724:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001728:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800172a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172c:	015a      	lsls	r2, r3, #5
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	4413      	add	r3, r2
 8001732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800173a:	0151      	lsls	r1, r2, #5
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	440a      	add	r2, r1
 8001740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001744:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001748:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800174a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800175a:	0151      	lsls	r1, r2, #5
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	440a      	add	r2, r1
 8001760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001764:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001768:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176c:	3301      	adds	r3, #1
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	791b      	ldrb	r3, [r3, #4]
 8001774:	461a      	mov	r2, r3
 8001776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001778:	4293      	cmp	r3, r2
 800177a:	d3b2      	bcc.n	80016e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800178a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800178e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7bdb      	ldrb	r3, [r3, #15]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d016      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800179e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017a8:	f043 030b 	orr.w	r3, r3, #11
 80017ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017be:	f043 030b 	orr.w	r3, r3, #11
 80017c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c4:	e015      	b.n	80017f2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017d8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80017dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ec:	f043 030b 	orr.w	r3, r3, #11
 80017f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001800:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001804:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001814:	461a      	mov	r2, r3
 8001816:	f002 fcb3 	bl	8004180 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fbe2 	bl	8003ff8 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800183a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800183e:	d123      	bne.n	8001888 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fc78 	bl	800413a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fd2f 	bl	80032b2 <USB_GetDevSpeed>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681c      	ldr	r4, [r3, #0]
 8001860:	f001 f9ca 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8001864:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800186a:	461a      	mov	r2, r3
 800186c:	4620      	mov	r0, r4
 800186e:	f001 fa33 	bl	8002cd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f004 ff95 	bl	80067a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001886:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fbb3 	bl	8003ff8 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b08      	cmp	r3, #8
 800189a:	d10a      	bne.n	80018b2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f004 ff72 	bl	8006786 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f002 0208 	and.w	r2, r2, #8
 80018b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fb9e 	bl	8003ff8 <USB_ReadInterrupts>
 80018bc:	4603      	mov	r3, r0
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	2b80      	cmp	r3, #128	@ 0x80
 80018c4:	d123      	bne.n	800190e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018d2:	2301      	movs	r3, #1
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d6:	e014      	b.n	8001902 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4619      	mov	r1, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fb0a 	bl	8001f10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	3301      	adds	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	791b      	ldrb	r3, [r3, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	4293      	cmp	r3, r2
 800190c:	d3e4      	bcc.n	80018d8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fb70 	bl	8003ff8 <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001922:	d13c      	bne.n	800199e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001924:	2301      	movs	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
 8001928:	e02b      	b.n	8001982 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3318      	adds	r3, #24
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d115      	bne.n	800197c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001950:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	da12      	bge.n	800197c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3317      	adds	r3, #23
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 faca 	bl	8001f10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	3301      	adds	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	791b      	ldrb	r3, [r3, #4]
 8001986:	461a      	mov	r2, r3
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	4293      	cmp	r3, r2
 800198c:	d3cd      	bcc.n	800192a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800199c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fb28 	bl	8003ff8 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019b2:	d156      	bne.n	8001a62 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b4:	2301      	movs	r3, #1
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b8:	e045      	b.n	8001a46 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d12e      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da2b      	bge.n	8001a40 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80019f4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d121      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10a      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a3c:	6053      	str	r3, [r2, #4]
            break;
 8001a3e:	e008      	b.n	8001a52 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	3301      	adds	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	791b      	ldrb	r3, [r3, #4]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d3b3      	bcc.n	80019ba <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fac6 	bl	8003ff8 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a76:	d10a      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f004 ff09 	bl	8006890 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fab0 	bl	8003ff8 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d115      	bne.n	8001ace <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f004 fef9 	bl	80068ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	e000      	b.n	8001ace <HAL_PCD_IRQHandler+0x93c>
      return;
 8001acc:	bf00      	nop
    }
  }
}
 8001ace:	3734      	adds	r7, #52	@ 0x34
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_PCD_SetAddress+0x1a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e012      	b.n	8001b14 <HAL_PCD_SetAddress+0x40>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fa0f 	bl	8003f28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	70fb      	strb	r3, [r7, #3]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	803b      	strh	r3, [r7, #0]
 8001b32:	4613      	mov	r3, r2
 8001b34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da0f      	bge.n	8001b62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 020f 	and.w	r2, r3, #15
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	3310      	adds	r3, #16
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	3304      	adds	r3, #4
 8001b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	705a      	strb	r2, [r3, #1]
 8001b60:	e00f      	b.n	8001b82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 020f 	and.w	r2, r3, #15
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b8e:	883b      	ldrh	r3, [r7, #0]
 8001b90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	78ba      	ldrb	r2, [r7, #2]
 8001b9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bb0:	78bb      	ldrb	r3, [r7, #2]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d102      	bne.n	8001bbc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_PCD_EP_Open+0xae>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e00e      	b.n	8001be8 <HAL_PCD_EP_Open+0xcc>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68f9      	ldr	r1, [r7, #12]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fb8f 	bl	80032fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001be6:	7afb      	ldrb	r3, [r7, #11]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da0f      	bge.n	8001c24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 020f 	and.w	r2, r3, #15
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	3310      	adds	r3, #16
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	3304      	adds	r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	705a      	strb	r2, [r3, #1]
 8001c22:	e00f      	b.n	8001c44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	f003 020f 	and.w	r2, r3, #15
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_PCD_EP_Close+0x6e>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e00e      	b.n	8001c7c <HAL_PCD_EP_Close+0x8c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68f9      	ldr	r1, [r7, #12]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 fbcd 	bl	800340c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	460b      	mov	r3, r1
 8001c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	f003 020f 	and.w	r2, r3, #15
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	3304      	adds	r3, #4
 8001cac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	799b      	ldrb	r3, [r3, #6]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	799b      	ldrb	r3, [r3, #6]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6979      	ldr	r1, [r7, #20]
 8001cec:	f001 fc6a 	bl	80035c4 <USB_EPStartXfer>

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f003 020f 	and.w	r2, r3, #15
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001d1c:	681b      	ldr	r3, [r3, #0]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	460b      	mov	r3, r1
 8001d38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3310      	adds	r3, #16
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2201      	movs	r2, #1
 8001d68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	799b      	ldrb	r3, [r3, #6]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	799b      	ldrb	r3, [r3, #6]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6979      	ldr	r1, [r7, #20]
 8001d90:	f001 fc18 	bl	80035c4 <USB_EPStartXfer>

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	7912      	ldrb	r2, [r2, #4]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e04f      	b.n	8001e5c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da0f      	bge.n	8001de4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	f003 020f 	and.w	r2, r3, #15
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	3310      	adds	r3, #16
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	705a      	strb	r2, [r3, #1]
 8001de2:	e00d      	b.n	8001e00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	3304      	adds	r3, #4
 8001df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_EP_SetStall+0x82>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e01d      	b.n	8001e5c <HAL_PCD_EP_SetStall+0xbe>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 ffa6 	bl	8003d80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7999      	ldrb	r1, [r3, #6]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f002 f997 	bl	8004180 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	7912      	ldrb	r2, [r2, #4]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e042      	b.n	8001f08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	da0f      	bge.n	8001eaa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 020f 	and.w	r2, r3, #15
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	3310      	adds	r3, #16
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	705a      	strb	r2, [r3, #1]
 8001ea8:	e00f      	b.n	8001eca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f003 020f 	and.w	r2, r3, #15
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_PCD_EP_ClrStall+0x86>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e00e      	b.n	8001f08 <HAL_PCD_EP_ClrStall+0xa4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68f9      	ldr	r1, [r7, #12]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 ffaf 	bl	8003e5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da0c      	bge.n	8001f3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 020f 	and.w	r2, r3, #15
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	3310      	adds	r3, #16
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e00c      	b.n	8001f58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 020f 	and.w	r2, r3, #15
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68f9      	ldr	r1, [r7, #12]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 fdce 	bl	8003b00 <USB_EPStopXfer>
 8001f64:	4603      	mov	r3, r0
 8001f66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f68:	7afb      	ldrb	r3, [r7, #11]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b08a      	sub	sp, #40	@ 0x28
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	3310      	adds	r3, #16
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d901      	bls.n	8001faa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06b      	b.n	8002082 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d902      	bls.n	8001fc6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3303      	adds	r3, #3
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fce:	e02a      	b.n	8002026 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d902      	bls.n	8001fec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68d9      	ldr	r1, [r3, #12]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4603      	mov	r3, r0
 8002008:	6978      	ldr	r0, [r7, #20]
 800200a:	f001 fe23 	bl	8003c54 <USB_WritePacket>

    ep->xfer_buff  += len;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	441a      	add	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	441a      	add	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	429a      	cmp	r2, r3
 800203a:	d809      	bhi.n	8002050 <PCD_WriteEmptyTxFifo+0xde>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002044:	429a      	cmp	r2, r3
 8002046:	d203      	bcs.n	8002050 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1bf      	bne.n	8001fd0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d811      	bhi.n	8002080 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	2201      	movs	r2, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	43db      	mvns	r3, r3
 8002076:	6939      	ldr	r1, [r7, #16]
 8002078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800207c:	4013      	ands	r3, r2
 800207e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	333c      	adds	r3, #60	@ 0x3c
 80020a4:	3304      	adds	r3, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	799b      	ldrb	r3, [r3, #6]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d17b      	bne.n	80021ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	4a61      	ldr	r2, [pc, #388]	@ (8002254 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	f240 80b9 	bls.w	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80b3 	beq.w	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ee:	461a      	mov	r2, r3
 80020f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020f4:	6093      	str	r3, [r2, #8]
 80020f6:	e0a7      	b.n	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800210e:	461a      	mov	r2, r3
 8002110:	2320      	movs	r3, #32
 8002112:	6093      	str	r3, [r2, #8]
 8002114:	e098      	b.n	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 8093 	bne.w	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d90f      	bls.n	800214a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002140:	461a      	mov	r2, r3
 8002142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002146:	6093      	str	r3, [r2, #8]
 8002148:	e07e      	b.n	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	0159      	lsls	r1, r3, #5
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	440b      	add	r3, r1
 800216c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002176:	1ad2      	subs	r2, r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d114      	bne.n	80021ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002194:	461a      	mov	r2, r3
 8002196:	2101      	movs	r1, #1
 8002198:	f001 fff2 	bl	8004180 <USB_EP0_OutStart>
 800219c:	e006      	b.n	80021ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	441a      	add	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f004 fab2 	bl	800671c <HAL_PCD_DataOutStageCallback>
 80021b8:	e046      	b.n	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d124      	bne.n	800220c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d8:	461a      	mov	r2, r3
 80021da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021de:	6093      	str	r3, [r2, #8]
 80021e0:	e032      	b.n	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f8:	461a      	mov	r2, r3
 80021fa:	2320      	movs	r3, #32
 80021fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f004 fa89 	bl	800671c <HAL_PCD_DataOutStageCallback>
 800220a:	e01d      	b.n	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d114      	bne.n	800223c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002234:	461a      	mov	r2, r3
 8002236:	2100      	movs	r1, #0
 8002238:	f001 ffa2 	bl	8004180 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f004 fa6a 	bl	800671c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	4f54300a 	.word	0x4f54300a
 8002258:	4f54310a 	.word	0x4f54310a

0800225c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	333c      	adds	r3, #60	@ 0x3c
 8002274:	3304      	adds	r3, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a15      	ldr	r2, [pc, #84]	@ (80022e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d90e      	bls.n	80022b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a8:	461a      	mov	r2, r3
 80022aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f004 fa21 	bl	80066f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d90c      	bls.n	80022d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	799b      	ldrb	r3, [r3, #6]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d108      	bne.n	80022d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022d0:	461a      	mov	r2, r3
 80022d2:	2101      	movs	r1, #1
 80022d4:	f001 ff54 	bl	8004180 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	4f54300a 	.word	0x4f54300a

080022e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
 80022f4:	4613      	mov	r3, r2
 80022f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d107      	bne.n	8002316 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002306:	883b      	ldrh	r3, [r7, #0]
 8002308:	0419      	lsls	r1, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	430a      	orrs	r2, r1
 8002312:	629a      	str	r2, [r3, #40]	@ 0x28
 8002314:	e028      	b.n	8002368 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4413      	add	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e00d      	b.n	8002346 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	3340      	adds	r3, #64	@ 0x40
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	4413      	add	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	3301      	adds	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	3b01      	subs	r3, #1
 800234c:	429a      	cmp	r2, r3
 800234e:	d3ec      	bcc.n	800232a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002350:	883b      	ldrh	r3, [r7, #0]
 8002352:	0418      	lsls	r0, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	3b01      	subs	r3, #1
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	4302      	orrs	r2, r0
 8002360:	3340      	adds	r3, #64	@ 0x40
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e267      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d075      	beq.n	80024ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023ce:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d00c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023da:	4b85      	ldr	r3, [pc, #532]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d112      	bne.n	800240c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e6:	4b82      	ldr	r3, [pc, #520]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f2:	d10b      	bne.n	800240c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	4b7e      	ldr	r3, [pc, #504]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d05b      	beq.n	80024b8 <HAL_RCC_OscConfig+0x108>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d157      	bne.n	80024b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e242      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002414:	d106      	bne.n	8002424 <HAL_RCC_OscConfig+0x74>
 8002416:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a75      	ldr	r2, [pc, #468]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xb0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x98>
 800242e:	4b70      	ldr	r3, [pc, #448]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6f      	ldr	r2, [pc, #444]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6d      	ldr	r3, [pc, #436]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6c      	ldr	r2, [pc, #432]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xb0>
 8002448:	4b69      	ldr	r3, [pc, #420]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a68      	ldr	r2, [pc, #416]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b66      	ldr	r3, [pc, #408]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a65      	ldr	r2, [pc, #404]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fa56 	bl	8000918 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fa52 	bl	8000918 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	@ 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e207      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xc0>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fa42 	bl	8000918 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fa3e 	bl	8000918 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1f3      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0xe8>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d063      	beq.n	800258e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024c6:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b44      	ldr	r3, [pc, #272]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x152>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1c7      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4937      	ldr	r1, [pc, #220]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e03a      	b.n	800258e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b34      	ldr	r3, [pc, #208]	@ (80025f4 <HAL_RCC_OscConfig+0x244>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe f9f7 	bl	8000918 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7fe f9f3 	bl	8000918 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1a8      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4925      	ldr	r1, [pc, #148]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_RCC_OscConfig+0x244>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe f9d6 	bl	8000918 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe f9d2 	bl	8000918 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e187      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d036      	beq.n	8002608 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_RCC_OscConfig+0x248>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7fe f9b6 	bl	8000918 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7fe f9b2 	bl	8000918 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e167      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80025c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x200>
 80025ce:	e01b      	b.n	8002608 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d0:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_RCC_OscConfig+0x248>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7fe f99f 	bl	8000918 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	e00e      	b.n	80025fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe f99b 	bl	8000918 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d907      	bls.n	80025fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e150      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	42470000 	.word	0x42470000
 80025f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	4b88      	ldr	r3, [pc, #544]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ea      	bne.n	80025de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8097 	beq.w	8002744 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261a:	4b81      	ldr	r3, [pc, #516]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10f      	bne.n	8002646 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b7d      	ldr	r3, [pc, #500]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	4a7c      	ldr	r2, [pc, #496]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	@ 0x40
 8002636:	4b7a      	ldr	r3, [pc, #488]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002646:	4b77      	ldr	r3, [pc, #476]	@ (8002824 <HAL_RCC_OscConfig+0x474>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d118      	bne.n	8002684 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002652:	4b74      	ldr	r3, [pc, #464]	@ (8002824 <HAL_RCC_OscConfig+0x474>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a73      	ldr	r2, [pc, #460]	@ (8002824 <HAL_RCC_OscConfig+0x474>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265e:	f7fe f95b 	bl	8000918 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002666:	f7fe f957 	bl	8000918 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e10c      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b6a      	ldr	r3, [pc, #424]	@ (8002824 <HAL_RCC_OscConfig+0x474>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x2ea>
 800268c:	4b64      	ldr	r3, [pc, #400]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002690:	4a63      	ldr	r2, [pc, #396]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6713      	str	r3, [r2, #112]	@ 0x70
 8002698:	e01c      	b.n	80026d4 <HAL_RCC_OscConfig+0x324>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x30c>
 80026a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0x324>
 80026bc:	4b58      	ldr	r3, [pc, #352]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c0:	4a57      	ldr	r2, [pc, #348]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c8:	4b55      	ldr	r3, [pc, #340]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a54      	ldr	r2, [pc, #336]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026ce:	f023 0304 	bic.w	r3, r3, #4
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d015      	beq.n	8002708 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe f91c 	bl	8000918 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7fe f918 	bl	8000918 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0cb      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	4b49      	ldr	r3, [pc, #292]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0ee      	beq.n	80026e4 <HAL_RCC_OscConfig+0x334>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7fe f906 	bl	8000918 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7fe f902 	bl	8000918 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0b5      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002726:	4b3e      	ldr	r3, [pc, #248]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ee      	bne.n	8002710 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b39      	ldr	r3, [pc, #228]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	4a38      	ldr	r2, [pc, #224]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800273e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002742:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a1 	beq.w	8002890 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800274e:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b08      	cmp	r3, #8
 8002758:	d05c      	beq.n	8002814 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d141      	bne.n	80027e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b31      	ldr	r3, [pc, #196]	@ (8002828 <HAL_RCC_OscConfig+0x478>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe f8d6 	bl	8000918 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe f8d2 	bl	8000918 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e087      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	019b      	lsls	r3, r3, #6
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	491b      	ldr	r1, [pc, #108]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <HAL_RCC_OscConfig+0x478>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe f8ab 	bl	8000918 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe f8a7 	bl	8000918 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e05c      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x416>
 80027e4:	e054      	b.n	8002890 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_RCC_OscConfig+0x478>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe f894 	bl	8000918 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe f890 	bl	8000918 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e045      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x444>
 8002812:	e03d      	b.n	8002890 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e038      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
 8002820:	40023800 	.word	0x40023800
 8002824:	40007000 	.word	0x40007000
 8002828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_RCC_OscConfig+0x4ec>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d028      	beq.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d121      	bne.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d11a      	bne.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002864:	4293      	cmp	r3, r2
 8002866:	d111      	bne.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	3b01      	subs	r3, #1
 8002876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0cc      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b68      	ldr	r3, [pc, #416]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d90c      	bls.n	80028dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b65      	ldr	r3, [pc, #404]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b63      	ldr	r3, [pc, #396]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0b8      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f4:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a58      	ldr	r2, [pc, #352]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800290c:	4b53      	ldr	r3, [pc, #332]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4a52      	ldr	r2, [pc, #328]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b50      	ldr	r3, [pc, #320]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	494d      	ldr	r1, [pc, #308]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d044      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b47      	ldr	r3, [pc, #284]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d119      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e07f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e067      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b37      	ldr	r3, [pc, #220]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4934      	ldr	r1, [pc, #208]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fd ffc2 	bl	8000918 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fd ffbe 	bl	8000918 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e04f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20c      	bcs.n	80029e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e032      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4916      	ldr	r1, [pc, #88]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	490e      	ldr	r1, [pc, #56]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a26:	f000 f821 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	490a      	ldr	r1, [pc, #40]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	5ccb      	ldrb	r3, [r1, r3]
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd ff22 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	08006d30 	.word	0x08006d30
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000004 	.word	0x20000004

08002a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a70:	b090      	sub	sp, #64	@ 0x40
 8002a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a84:	4b59      	ldr	r3, [pc, #356]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d00d      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x40>
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	f200 80a1 	bhi.w	8002bd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a9e:	e09b      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4b53      	ldr	r3, [pc, #332]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aa4:	e09b      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aa6:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aaa:	e098      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aac:	4b4f      	ldr	r3, [pc, #316]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ab4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	2200      	movs	r2, #0
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ad8:	fb03 f201 	mul.w	r2, r3, r1
 8002adc:	2300      	movs	r3, #0
 8002ade:	fb00 f303 	mul.w	r3, r0, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4a43      	ldr	r2, [pc, #268]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae6:	fba0 1202 	umull	r1, r2, r0, r2
 8002aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aec:	460a      	mov	r2, r1
 8002aee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002af2:	4413      	add	r3, r2
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af8:	2200      	movs	r2, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	61fa      	str	r2, [r7, #28]
 8002afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b06:	f7fd fb65 	bl	80001d4 <__aeabi_uldivmod>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4613      	mov	r3, r2
 8002b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b12:	e053      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b14:	4b35      	ldr	r3, [pc, #212]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	617a      	str	r2, [r7, #20]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b26:	f04f 0b00 	mov.w	fp, #0
 8002b2a:	4652      	mov	r2, sl
 8002b2c:	465b      	mov	r3, fp
 8002b2e:	f04f 0000 	mov.w	r0, #0
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	0159      	lsls	r1, r3, #5
 8002b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3c:	0150      	lsls	r0, r2, #5
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	ebb2 080a 	subs.w	r8, r2, sl
 8002b46:	eb63 090b 	sbc.w	r9, r3, fp
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b5e:	ebb2 0408 	subs.w	r4, r2, r8
 8002b62:	eb63 0509 	sbc.w	r5, r3, r9
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	00eb      	lsls	r3, r5, #3
 8002b70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b74:	00e2      	lsls	r2, r4, #3
 8002b76:	4614      	mov	r4, r2
 8002b78:	461d      	mov	r5, r3
 8002b7a:	eb14 030a 	adds.w	r3, r4, sl
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	eb45 030b 	adc.w	r3, r5, fp
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b92:	4629      	mov	r1, r5
 8002b94:	028b      	lsls	r3, r1, #10
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	028a      	lsls	r2, r1, #10
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	60fa      	str	r2, [r7, #12]
 8002bac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bb0:	f7fd fb10 	bl	80001d4 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002bcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3740      	adds	r7, #64	@ 0x40
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	017d7840 	.word	0x017d7840

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c10:	b084      	sub	sp, #16
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	f107 001c 	add.w	r0, r7, #28
 8002c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d123      	bne.n	8002c72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002c3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d105      	bne.n	8002c66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f001 fae8 	bl	800423c <USB_CoreReset>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e01b      	b.n	8002caa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f001 fadc 	bl	800423c <USB_CoreReset>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c9c:	e005      	b.n	8002caa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002caa:	7fbb      	ldrb	r3, [r7, #30]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10b      	bne.n	8002cc8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f043 0206 	orr.w	r2, r3, #6
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cd4:	b004      	add	sp, #16
 8002cd6:	4770      	bx	lr

08002cd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d165      	bne.n	8002db8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4a41      	ldr	r2, [pc, #260]	@ (8002df4 <USB_SetTurnaroundTime+0x11c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d906      	bls.n	8002d02 <USB_SetTurnaroundTime+0x2a>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4a40      	ldr	r2, [pc, #256]	@ (8002df8 <USB_SetTurnaroundTime+0x120>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d202      	bcs.n	8002d02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e062      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4a3c      	ldr	r2, [pc, #240]	@ (8002df8 <USB_SetTurnaroundTime+0x120>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d306      	bcc.n	8002d18 <USB_SetTurnaroundTime+0x40>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002dfc <USB_SetTurnaroundTime+0x124>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d202      	bcs.n	8002d18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d12:	230e      	movs	r3, #14
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e057      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4a38      	ldr	r2, [pc, #224]	@ (8002dfc <USB_SetTurnaroundTime+0x124>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d306      	bcc.n	8002d2e <USB_SetTurnaroundTime+0x56>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4a37      	ldr	r2, [pc, #220]	@ (8002e00 <USB_SetTurnaroundTime+0x128>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d202      	bcs.n	8002d2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d28:	230d      	movs	r3, #13
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e04c      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4a33      	ldr	r2, [pc, #204]	@ (8002e00 <USB_SetTurnaroundTime+0x128>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d306      	bcc.n	8002d44 <USB_SetTurnaroundTime+0x6c>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4a32      	ldr	r2, [pc, #200]	@ (8002e04 <USB_SetTurnaroundTime+0x12c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d802      	bhi.n	8002d44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d3e:	230c      	movs	r3, #12
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e041      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4a2f      	ldr	r2, [pc, #188]	@ (8002e04 <USB_SetTurnaroundTime+0x12c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d906      	bls.n	8002d5a <USB_SetTurnaroundTime+0x82>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002e08 <USB_SetTurnaroundTime+0x130>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d802      	bhi.n	8002d5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d54:	230b      	movs	r3, #11
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e036      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e08 <USB_SetTurnaroundTime+0x130>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d906      	bls.n	8002d70 <USB_SetTurnaroundTime+0x98>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a29      	ldr	r2, [pc, #164]	@ (8002e0c <USB_SetTurnaroundTime+0x134>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d802      	bhi.n	8002d70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e02b      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a26      	ldr	r2, [pc, #152]	@ (8002e0c <USB_SetTurnaroundTime+0x134>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d906      	bls.n	8002d86 <USB_SetTurnaroundTime+0xae>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	@ (8002e10 <USB_SetTurnaroundTime+0x138>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d202      	bcs.n	8002d86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d80:	2309      	movs	r3, #9
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e020      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <USB_SetTurnaroundTime+0x138>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d306      	bcc.n	8002d9c <USB_SetTurnaroundTime+0xc4>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4a20      	ldr	r2, [pc, #128]	@ (8002e14 <USB_SetTurnaroundTime+0x13c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d96:	2308      	movs	r3, #8
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e015      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <USB_SetTurnaroundTime+0x13c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d906      	bls.n	8002db2 <USB_SetTurnaroundTime+0xda>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <USB_SetTurnaroundTime+0x140>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d202      	bcs.n	8002db2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002dac:	2307      	movs	r3, #7
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e00a      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002db2:	2306      	movs	r3, #6
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e007      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002dbe:	2309      	movs	r3, #9
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e001      	b.n	8002dc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002dc4:	2309      	movs	r3, #9
 8002dc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	00d8acbf 	.word	0x00d8acbf
 8002df8:	00e4e1c0 	.word	0x00e4e1c0
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	01067380 	.word	0x01067380
 8002e04:	011a499f 	.word	0x011a499f
 8002e08:	01312cff 	.word	0x01312cff
 8002e0c:	014ca43f 	.word	0x014ca43f
 8002e10:	016e3600 	.word	0x016e3600
 8002e14:	01a6ab1f 	.word	0x01a6ab1f
 8002e18:	01e84800 	.word	0x01e84800

08002e1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0201 	bic.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d115      	bne.n	8002eae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e8e:	200a      	movs	r0, #10
 8002e90:	f7fd fd4e 	bl	8000930 <HAL_Delay>
      ms += 10U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	330a      	adds	r3, #10
 8002e98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f001 f93f 	bl	800411e <USB_GetMode>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d01e      	beq.n	8002ee4 <USB_SetCurrentMode+0x84>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002eaa:	d9f0      	bls.n	8002e8e <USB_SetCurrentMode+0x2e>
 8002eac:	e01a      	b.n	8002ee4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d115      	bne.n	8002ee0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ec0:	200a      	movs	r0, #10
 8002ec2:	f7fd fd35 	bl	8000930 <HAL_Delay>
      ms += 10U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	330a      	adds	r3, #10
 8002eca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f001 f926 	bl	800411e <USB_GetMode>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <USB_SetCurrentMode+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2bc7      	cmp	r3, #199	@ 0xc7
 8002edc:	d9f0      	bls.n	8002ec0 <USB_SetCurrentMode+0x60>
 8002ede:	e001      	b.n	8002ee4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e005      	b.n	8002ef0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ee8:	d101      	bne.n	8002eee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ef8:	b084      	sub	sp, #16
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	e009      	b.n	8002f2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	3340      	adds	r3, #64	@ 0x40
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b0e      	cmp	r3, #14
 8002f30:	d9f2      	bls.n	8002f18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d11c      	bne.n	8002f74 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f72:	e00b      	b.n	8002f8c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002f92:	461a      	mov	r2, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10d      	bne.n	8002fbc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fa8:	2100      	movs	r1, #0
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f968 	bl	8003280 <USB_SetDevSpeed>
 8002fb0:	e008      	b.n	8002fc4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f963 	bl	8003280 <USB_SetDevSpeed>
 8002fba:	e003      	b.n	8002fc4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fbc:	2103      	movs	r1, #3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f95e 	bl	8003280 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8fa 	bl	80031c0 <USB_FlushTxFifo>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f924 	bl	8003224 <USB_FlushRxFifo>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fec:	461a      	mov	r2, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003004:	461a      	mov	r2, r3
 8003006:	2300      	movs	r3, #0
 8003008:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e043      	b.n	8003098 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003026:	d118      	bne.n	800305a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e013      	b.n	800306c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003050:	461a      	mov	r2, r3
 8003052:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	e008      	b.n	800306c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003066:	461a      	mov	r2, r3
 8003068:	2300      	movs	r3, #0
 800306a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003078:	461a      	mov	r2, r3
 800307a:	2300      	movs	r3, #0
 800307c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800308a:	461a      	mov	r2, r3
 800308c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003090:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3301      	adds	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800309c:	461a      	mov	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d3b5      	bcc.n	8003010 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e043      	b.n	8003132 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030c0:	d118      	bne.n	80030f4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d4:	461a      	mov	r2, r3
 80030d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	e013      	b.n	8003106 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ea:	461a      	mov	r2, r3
 80030ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e008      	b.n	8003106 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003100:	461a      	mov	r2, r3
 8003102:	2300      	movs	r3, #0
 8003104:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003112:	461a      	mov	r2, r3
 8003114:	2300      	movs	r3, #0
 8003116:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003124:	461a      	mov	r2, r3
 8003126:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800312a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	3301      	adds	r3, #1
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003136:	461a      	mov	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4293      	cmp	r3, r2
 800313c:	d3b5      	bcc.n	80030aa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800314c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003150:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800315e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003160:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <USB_DevInit+0x2c4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003180:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f043 0208 	orr.w	r2, r3, #8
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003194:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031b8:	b004      	add	sp, #16
 80031ba:	4770      	bx	lr
 80031bc:	803c3800 	.word	0x803c3800

080031c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3301      	adds	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031da:	d901      	bls.n	80031e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e01b      	b.n	8003218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	daf2      	bge.n	80031ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	019b      	lsls	r3, r3, #6
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003204:	d901      	bls.n	800320a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e006      	b.n	8003218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b20      	cmp	r3, #32
 8003214:	d0f0      	beq.n	80031f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3301      	adds	r3, #1
 8003234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800323c:	d901      	bls.n	8003242 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e018      	b.n	8003274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	daf2      	bge.n	8003230 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2210      	movs	r2, #16
 8003252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003260:	d901      	bls.n	8003266 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e006      	b.n	8003274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b10      	cmp	r3, #16
 8003270:	d0f0      	beq.n	8003254 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0306 	and.w	r3, r3, #6
 80032ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]
 80032d6:	e00a      	b.n	80032ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d002      	beq.n	80032e4 <USB_GetDevSpeed+0x32>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d102      	bne.n	80032ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032e4:	2302      	movs	r3, #2
 80032e6:	75fb      	strb	r3, [r7, #23]
 80032e8:	e001      	b.n	80032ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032ea:	230f      	movs	r3, #15
 80032ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d13a      	bne.n	800338e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	68f9      	ldr	r1, [r7, #12]
 8003332:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003336:	4313      	orrs	r3, r2
 8003338:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d155      	bne.n	80033fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	791b      	ldrb	r3, [r3, #4]
 800336a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800336c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	059b      	lsls	r3, r3, #22
 8003372:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003374:	4313      	orrs	r3, r2
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	0151      	lsls	r1, r2, #5
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	440a      	add	r2, r1
 800337e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e036      	b.n	80033fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f303 	lsl.w	r3, r1, r3
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11a      	bne.n	80033fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	791b      	ldrb	r3, [r3, #4]
 80033e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033e2:	430b      	orrs	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	0151      	lsls	r1, r2, #5
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	440a      	add	r2, r1
 80033ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d161      	bne.n	80034ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800343a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800343e:	d11f      	bne.n	8003480 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	0151      	lsls	r1, r2, #5
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	440a      	add	r2, r1
 8003456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800345a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800345e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	0151      	lsls	r1, r2, #5
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	440a      	add	r2, r1
 8003476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800347a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800347e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034a0:	4013      	ands	r3, r2
 80034a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	2101      	movs	r1, #1
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034c4:	4013      	ands	r3, r2
 80034c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	0159      	lsls	r1, r3, #5
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	440b      	add	r3, r1
 80034de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034e2:	4619      	mov	r1, r3
 80034e4:	4b35      	ldr	r3, [pc, #212]	@ (80035bc <USB_DeactivateEndpoint+0x1b0>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
 80034ea:	e060      	b.n	80035ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003502:	d11f      	bne.n	8003544 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	0151      	lsls	r1, r2, #5
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	440a      	add	r2, r1
 800351a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800351e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003522:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	0151      	lsls	r1, r2, #5
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	440a      	add	r2, r1
 800353a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800353e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003542:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800354a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	041b      	lsls	r3, r3, #16
 800355c:	43db      	mvns	r3, r3
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003564:	4013      	ands	r3, r2
 8003566:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	43db      	mvns	r3, r3
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003588:	4013      	ands	r3, r2
 800358a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0159      	lsls	r1, r3, #5
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	440b      	add	r3, r1
 80035a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a6:	4619      	mov	r1, r3
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <USB_DeactivateEndpoint+0x1b4>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	ec337800 	.word	0xec337800
 80035c0:	eff37800 	.word	0xeff37800

080035c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	@ 0x28
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	785b      	ldrb	r3, [r3, #1]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 817f 	bne.w	80038e4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d132      	bne.n	8003654 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	0151      	lsls	r1, r2, #5
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	440a      	add	r2, r1
 8003604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003608:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800360c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	440a      	add	r2, r1
 8003628:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800362c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	440a      	add	r2, r1
 8003648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800364c:	0cdb      	lsrs	r3, r3, #19
 800364e:	04db      	lsls	r3, r3, #19
 8003650:	6113      	str	r3, [r2, #16]
 8003652:	e097      	b.n	8003784 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	0151      	lsls	r1, r2, #5
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	440a      	add	r2, r1
 800366a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800366e:	0cdb      	lsrs	r3, r3, #19
 8003670:	04db      	lsls	r3, r3, #19
 8003672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	440a      	add	r2, r1
 800368a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800368e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003692:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003696:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11a      	bne.n	80036d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d903      	bls.n	80036b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	0151      	lsls	r1, r2, #5
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	440a      	add	r2, r1
 80036c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036d0:	6113      	str	r3, [r2, #16]
 80036d2:	e044      	b.n	800375e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4413      	add	r3, r2
 80036de:	1e5a      	subs	r2, r3, #1
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	04d9      	lsls	r1, r3, #19
 80036fc:	4ba4      	ldr	r3, [pc, #656]	@ (8003990 <USB_EPStartXfer+0x3cc>)
 80036fe:	400b      	ands	r3, r1
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	0148      	lsls	r0, r1, #5
 8003704:	69f9      	ldr	r1, [r7, #28]
 8003706:	4401      	add	r1, r0
 8003708:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	791b      	ldrb	r3, [r3, #4]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d122      	bne.n	800375e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	440a      	add	r2, r1
 800372e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003732:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003736:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	8afb      	ldrh	r3, [r7, #22]
 8003748:	075b      	lsls	r3, r3, #29
 800374a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	0148      	lsls	r0, r1, #5
 8003752:	69f9      	ldr	r1, [r7, #28]
 8003754:	4401      	add	r1, r0
 8003756:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800375a:	4313      	orrs	r3, r2
 800375c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003774:	69b9      	ldr	r1, [r7, #24]
 8003776:	0148      	lsls	r0, r1, #5
 8003778:	69f9      	ldr	r1, [r7, #28]
 800377a:	4401      	add	r1, r0
 800377c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003780:	4313      	orrs	r3, r2
 8003782:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d14b      	bne.n	8003822 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	791b      	ldrb	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d128      	bne.n	8003800 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d110      	bne.n	80037e0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	0151      	lsls	r1, r2, #5
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	440a      	add	r2, r1
 80037d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00f      	b.n	8003800 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	0151      	lsls	r1, r2, #5
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	440a      	add	r2, r1
 80037f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	440a      	add	r2, r1
 8003816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800381a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e166      	b.n	8003af0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	0151      	lsls	r1, r2, #5
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	440a      	add	r2, r1
 8003838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800383c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003840:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	791b      	ldrb	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d015      	beq.n	8003876 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 814e 	beq.w	8003af0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800385a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	2101      	movs	r1, #1
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003870:	4313      	orrs	r3, r2
 8003872:	634b      	str	r3, [r1, #52]	@ 0x34
 8003874:	e13c      	b.n	8003af0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d110      	bne.n	80038a8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e00f      	b.n	80038c8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	68d9      	ldr	r1, [r3, #12]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781a      	ldrb	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	b298      	uxth	r0, r3
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	4603      	mov	r3, r0
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f9b9 	bl	8003c54 <USB_WritePacket>
 80038e2:	e105      	b.n	8003af0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	0151      	lsls	r1, r2, #5
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	440a      	add	r2, r1
 80038fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038fe:	0cdb      	lsrs	r3, r3, #19
 8003900:	04db      	lsls	r3, r3, #19
 8003902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	440a      	add	r2, r1
 800391a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800391e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003922:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003926:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d132      	bne.n	8003994 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	0148      	lsls	r0, r1, #5
 8003960:	69f9      	ldr	r1, [r7, #28]
 8003962:	4401      	add	r1, r0
 8003964:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003968:	4313      	orrs	r3, r2
 800396a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	0151      	lsls	r1, r2, #5
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	440a      	add	r2, r1
 8003982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003986:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800398a:	6113      	str	r3, [r2, #16]
 800398c:	e062      	b.n	8003a54 <USB_EPStartXfer+0x490>
 800398e:	bf00      	nop
 8003990:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d123      	bne.n	80039e4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	0148      	lsls	r0, r1, #5
 80039b6:	69f9      	ldr	r1, [r7, #28]
 80039b8:	4401      	add	r1, r0
 80039ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039be:	4313      	orrs	r3, r2
 80039c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	0151      	lsls	r1, r2, #5
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	440a      	add	r2, r1
 80039d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039e0:	6113      	str	r3, [r2, #16]
 80039e2:	e037      	b.n	8003a54 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	1e5a      	subs	r2, r3, #1
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	8afa      	ldrh	r2, [r7, #22]
 8003a00:	fb03 f202 	mul.w	r2, r3, r2
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	8afb      	ldrh	r3, [r7, #22]
 8003a18:	04d9      	lsls	r1, r3, #19
 8003a1a:	4b38      	ldr	r3, [pc, #224]	@ (8003afc <USB_EPStartXfer+0x538>)
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	69b9      	ldr	r1, [r7, #24]
 8003a20:	0148      	lsls	r0, r1, #5
 8003a22:	69f9      	ldr	r1, [r7, #28]
 8003a24:	4401      	add	r1, r0
 8003a26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	0148      	lsls	r0, r1, #5
 8003a48:	69f9      	ldr	r1, [r7, #28]
 8003a4a:	4401      	add	r1, r0
 8003a4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10d      	bne.n	8003a76 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	68d9      	ldr	r1, [r3, #12]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a72:	460a      	mov	r2, r1
 8003a74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	791b      	ldrb	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d128      	bne.n	8003ad0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d110      	bne.n	8003ab0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	0151      	lsls	r1, r2, #5
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	440a      	add	r2, r1
 8003aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aa8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00f      	b.n	8003ad0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	1ff80000 	.word	0x1ff80000

08003b00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d14a      	bne.n	8003bb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b36:	f040 8086 	bne.w	8003c46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	7812      	ldrb	r2, [r2, #0]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3301      	adds	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d902      	bls.n	8003b98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
          break;
 8003b96:	e056      	b.n	8003c46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bb0:	d0e7      	beq.n	8003b82 <USB_EPStopXfer+0x82>
 8003bb2:	e048      	b.n	8003c46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bcc:	d13b      	bne.n	8003c46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bf0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d902      	bls.n	8003c2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	75fb      	strb	r3, [r7, #23]
          break;
 8003c2a:	e00c      	b.n	8003c46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c44:	d0e7      	beq.n	8003c16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	460b      	mov	r3, r1
 8003c64:	71fb      	strb	r3, [r7, #7]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d123      	bne.n	8003cc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c7a:	88bb      	ldrh	r3, [r7, #4]
 8003c7c:	3303      	adds	r3, #3
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	e018      	b.n	8003cba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	031a      	lsls	r2, r3, #12
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c94:	461a      	mov	r2, r3
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3e2      	bcc.n	8003c88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3724      	adds	r7, #36	@ 0x24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b08b      	sub	sp, #44	@ 0x2c
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	e014      	b.n	8003d26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	3301      	adds	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	3301      	adds	r3, #1
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	3301      	adds	r3, #1
 8003d24:	623b      	str	r3, [r7, #32]
 8003d26:	6a3a      	ldr	r2, [r7, #32]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3e6      	bcc.n	8003cfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d2e:	8bfb      	ldrh	r3, [r7, #30]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01e      	beq.n	8003d72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f107 0310 	add.w	r3, r7, #16
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	701a      	strb	r2, [r3, #0]
      i++;
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	3301      	adds	r3, #1
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003d66:	8bfb      	ldrh	r3, [r7, #30]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d6c:	8bfb      	ldrh	r3, [r7, #30]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1ea      	bne.n	8003d48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	372c      	adds	r7, #44	@ 0x2c
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d12c      	bne.n	8003df6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db12      	blt.n	8003dd4 <USB_EPSetStall+0x54>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00f      	beq.n	8003dd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	e02b      	b.n	8003e4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	db12      	blt.n	8003e2e <USB_EPSetStall+0xae>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00f      	beq.n	8003e2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	785b      	ldrb	r3, [r3, #1]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d128      	bne.n	8003eca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	0151      	lsls	r1, r2, #5
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	440a      	add	r2, r1
 8003e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	791b      	ldrb	r3, [r3, #4]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d003      	beq.n	8003ea8 <USB_EPClearStall+0x4c>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	791b      	ldrb	r3, [r3, #4]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d138      	bne.n	8003f1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e027      	b.n	8003f1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ee4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ee8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	791b      	ldrb	r3, [r3, #4]
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d003      	beq.n	8003efa <USB_EPClearStall+0x9e>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	791b      	ldrb	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d10f      	bne.n	8003f1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	0151      	lsls	r1, r2, #5
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	440a      	add	r2, r1
 8003f10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f8e:	f023 0303 	bic.w	r3, r3, #3
 8003f92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fa2:	f023 0302 	bic.w	r3, r3, #2
 8003fa6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003fd0:	f023 0303 	bic.w	r3, r3, #3
 8003fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004010:	68fb      	ldr	r3, [r7, #12]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	0c1b      	lsrs	r3, r3, #16
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	4013      	ands	r3, r2
 8004074:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	b29b      	uxth	r3, r3
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040b4:	68bb      	ldr	r3, [r7, #8]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b087      	sub	sp, #28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	01db      	lsls	r3, r3, #7
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004110:	68bb      	ldr	r3, [r7, #8]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0301 	and.w	r3, r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004154:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004158:	f023 0307 	bic.w	r3, r3, #7
 800415c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800416c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	460b      	mov	r3, r1
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	333c      	adds	r3, #60	@ 0x3c
 8004196:	3304      	adds	r3, #4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4a26      	ldr	r2, [pc, #152]	@ (8004238 <USB_EP0_OutStart+0xb8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d90a      	bls.n	80041ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041b4:	d101      	bne.n	80041ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e037      	b.n	800422a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041e8:	f043 0318 	orr.w	r3, r3, #24
 80041ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004200:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004202:	7afb      	ldrb	r3, [r7, #11]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10f      	bne.n	8004228 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004222:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	4f54300a 	.word	0x4f54300a

0800423c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3301      	adds	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004254:	d901      	bls.n	800425a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e01b      	b.n	8004292 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	daf2      	bge.n	8004248 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f043 0201 	orr.w	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800427e:	d901      	bls.n	8004284 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e006      	b.n	8004292 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d0f0      	beq.n	8004272 <USB_CoreReset+0x36>

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80042ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80042b0:	f002 fc94 	bl	8006bdc <USBD_static_malloc>
 80042b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	32b0      	adds	r2, #176	@ 0xb0
 80042c6:	2100      	movs	r1, #0
 80042c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0d4      	b.n	800447a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80042d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80042d4:	2100      	movs	r1, #0
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f002 fcc4 	bl	8006c64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	32b0      	adds	r2, #176	@ 0xb0
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	32b0      	adds	r2, #176	@ 0xb0
 80042f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7c1b      	ldrb	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d138      	bne.n	800437a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004308:	4b5e      	ldr	r3, [pc, #376]	@ (8004484 <USBD_CDC_Init+0x1e4>)
 800430a:	7819      	ldrb	r1, [r3, #0]
 800430c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004310:	2202      	movs	r2, #2
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f002 fb3f 	bl	8006996 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004318:	4b5a      	ldr	r3, [pc, #360]	@ (8004484 <USBD_CDC_Init+0x1e4>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	3324      	adds	r3, #36	@ 0x24
 800432e:	2201      	movs	r2, #1
 8004330:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004332:	4b55      	ldr	r3, [pc, #340]	@ (8004488 <USBD_CDC_Init+0x1e8>)
 8004334:	7819      	ldrb	r1, [r3, #0]
 8004336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800433a:	2202      	movs	r2, #2
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f002 fb2a 	bl	8006996 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004342:	4b51      	ldr	r3, [pc, #324]	@ (8004488 <USBD_CDC_Init+0x1e8>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	f003 020f 	and.w	r2, r3, #15
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800435a:	2201      	movs	r2, #1
 800435c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800435e:	4b4b      	ldr	r3, [pc, #300]	@ (800448c <USBD_CDC_Init+0x1ec>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	f003 020f 	and.w	r2, r3, #15
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3326      	adds	r3, #38	@ 0x26
 8004374:	2210      	movs	r2, #16
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e035      	b.n	80043e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800437a:	4b42      	ldr	r3, [pc, #264]	@ (8004484 <USBD_CDC_Init+0x1e4>)
 800437c:	7819      	ldrb	r1, [r3, #0]
 800437e:	2340      	movs	r3, #64	@ 0x40
 8004380:	2202      	movs	r2, #2
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f002 fb07 	bl	8006996 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004388:	4b3e      	ldr	r3, [pc, #248]	@ (8004484 <USBD_CDC_Init+0x1e4>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3324      	adds	r3, #36	@ 0x24
 800439e:	2201      	movs	r2, #1
 80043a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80043a2:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <USBD_CDC_Init+0x1e8>)
 80043a4:	7819      	ldrb	r1, [r3, #0]
 80043a6:	2340      	movs	r3, #64	@ 0x40
 80043a8:	2202      	movs	r2, #2
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f002 faf3 	bl	8006996 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80043b0:	4b35      	ldr	r3, [pc, #212]	@ (8004488 <USBD_CDC_Init+0x1e8>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f003 020f 	and.w	r2, r3, #15
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043c8:	2201      	movs	r2, #1
 80043ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80043cc:	4b2f      	ldr	r3, [pc, #188]	@ (800448c <USBD_CDC_Init+0x1ec>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f003 020f 	and.w	r2, r3, #15
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3326      	adds	r3, #38	@ 0x26
 80043e2:	2210      	movs	r2, #16
 80043e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80043e6:	4b29      	ldr	r3, [pc, #164]	@ (800448c <USBD_CDC_Init+0x1ec>)
 80043e8:	7819      	ldrb	r1, [r3, #0]
 80043ea:	2308      	movs	r3, #8
 80043ec:	2203      	movs	r2, #3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f002 fad1 	bl	8006996 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80043f4:	4b25      	ldr	r3, [pc, #148]	@ (800448c <USBD_CDC_Init+0x1ec>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3324      	adds	r3, #36	@ 0x24
 800440a:	2201      	movs	r2, #1
 800440c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	33b0      	adds	r3, #176	@ 0xb0
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004444:	2302      	movs	r3, #2
 8004446:	e018      	b.n	800447a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	7c1b      	ldrb	r3, [r3, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004450:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <USBD_CDC_Init+0x1e8>)
 8004452:	7819      	ldrb	r1, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800445a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f002 fb88 	bl	8006b74 <USBD_LL_PrepareReceive>
 8004464:	e008      	b.n	8004478 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004466:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <USBD_CDC_Init+0x1e8>)
 8004468:	7819      	ldrb	r1, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004470:	2340      	movs	r3, #64	@ 0x40
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f002 fb7e 	bl	8006b74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000093 	.word	0x20000093
 8004488:	20000094 	.word	0x20000094
 800448c:	20000095 	.word	0x20000095

08004490 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800449c:	4b3a      	ldr	r3, [pc, #232]	@ (8004588 <USBD_CDC_DeInit+0xf8>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f002 fa9d 	bl	80069e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80044a8:	4b37      	ldr	r3, [pc, #220]	@ (8004588 <USBD_CDC_DeInit+0xf8>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	3324      	adds	r3, #36	@ 0x24
 80044be:	2200      	movs	r2, #0
 80044c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80044c2:	4b32      	ldr	r3, [pc, #200]	@ (800458c <USBD_CDC_DeInit+0xfc>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f002 fa8a 	bl	80069e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80044ce:	4b2f      	ldr	r3, [pc, #188]	@ (800458c <USBD_CDC_DeInit+0xfc>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	f003 020f 	and.w	r2, r3, #15
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80044e6:	2200      	movs	r2, #0
 80044e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80044ea:	4b29      	ldr	r3, [pc, #164]	@ (8004590 <USBD_CDC_DeInit+0x100>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f002 fa76 	bl	80069e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80044f6:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <USBD_CDC_DeInit+0x100>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	3324      	adds	r3, #36	@ 0x24
 800450c:	2200      	movs	r2, #0
 800450e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <USBD_CDC_DeInit+0x100>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	3326      	adds	r3, #38	@ 0x26
 8004526:	2200      	movs	r2, #0
 8004528:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	32b0      	adds	r2, #176	@ 0xb0
 8004534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01f      	beq.n	800457c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	33b0      	adds	r3, #176	@ 0xb0
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	32b0      	adds	r2, #176	@ 0xb0
 800455a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455e:	4618      	mov	r0, r3
 8004560:	f002 fb4a 	bl	8006bf8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	32b0      	adds	r2, #176	@ 0xb0
 800456e:	2100      	movs	r1, #0
 8004570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000093 	.word	0x20000093
 800458c:	20000094 	.word	0x20000094
 8004590:	20000095 	.word	0x20000095

08004594 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	32b0      	adds	r2, #176	@ 0xb0
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0bf      	b.n	8004744 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d050      	beq.n	8004672 <USBD_CDC_Setup+0xde>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	f040 80af 	bne.w	8004734 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	88db      	ldrh	r3, [r3, #6]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d03a      	beq.n	8004654 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b25b      	sxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	da1b      	bge.n	8004620 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	33b0      	adds	r3, #176	@ 0xb0
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80045fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	88d2      	ldrh	r2, [r2, #6]
 8004604:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	88db      	ldrh	r3, [r3, #6]
 800460a:	2b07      	cmp	r3, #7
 800460c:	bf28      	it	cs
 800460e:	2307      	movcs	r3, #7
 8004610:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	89fa      	ldrh	r2, [r7, #14]
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 fd93 	bl	8006144 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800461e:	e090      	b.n	8004742 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	785a      	ldrb	r2, [r3, #1]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	88db      	ldrh	r3, [r3, #6]
 800462e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004630:	d803      	bhi.n	800463a <USBD_CDC_Setup+0xa6>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	88db      	ldrh	r3, [r3, #6]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	e000      	b.n	800463c <USBD_CDC_Setup+0xa8>
 800463a:	2240      	movs	r2, #64	@ 0x40
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004642:	6939      	ldr	r1, [r7, #16]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800464a:	461a      	mov	r2, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f001 fda5 	bl	800619c <USBD_CtlPrepareRx>
      break;
 8004652:	e076      	b.n	8004742 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	33b0      	adds	r3, #176	@ 0xb0
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	7850      	ldrb	r0, [r2, #1]
 800466a:	2200      	movs	r2, #0
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	4798      	blx	r3
      break;
 8004670:	e067      	b.n	8004742 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	2b0b      	cmp	r3, #11
 8004678:	d851      	bhi.n	800471e <USBD_CDC_Setup+0x18a>
 800467a:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <USBD_CDC_Setup+0xec>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046b1 	.word	0x080046b1
 8004684:	0800472d 	.word	0x0800472d
 8004688:	0800471f 	.word	0x0800471f
 800468c:	0800471f 	.word	0x0800471f
 8004690:	0800471f 	.word	0x0800471f
 8004694:	0800471f 	.word	0x0800471f
 8004698:	0800471f 	.word	0x0800471f
 800469c:	0800471f 	.word	0x0800471f
 80046a0:	0800471f 	.word	0x0800471f
 80046a4:	0800471f 	.word	0x0800471f
 80046a8:	080046db 	.word	0x080046db
 80046ac:	08004705 	.word	0x08004705
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d107      	bne.n	80046cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80046bc:	f107 030a 	add.w	r3, r7, #10
 80046c0:	2202      	movs	r2, #2
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f001 fd3d 	bl	8006144 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046ca:	e032      	b.n	8004732 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f001 fcbb 	bl	800604a <USBD_CtlError>
            ret = USBD_FAIL;
 80046d4:	2303      	movs	r3, #3
 80046d6:	75fb      	strb	r3, [r7, #23]
          break;
 80046d8:	e02b      	b.n	8004732 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d107      	bne.n	80046f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80046e6:	f107 030d 	add.w	r3, r7, #13
 80046ea:	2201      	movs	r2, #1
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f001 fd28 	bl	8006144 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046f4:	e01d      	b.n	8004732 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80046f6:	6839      	ldr	r1, [r7, #0]
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 fca6 	bl	800604a <USBD_CtlError>
            ret = USBD_FAIL;
 80046fe:	2303      	movs	r3, #3
 8004700:	75fb      	strb	r3, [r7, #23]
          break;
 8004702:	e016      	b.n	8004732 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b03      	cmp	r3, #3
 800470e:	d00f      	beq.n	8004730 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 fc99 	bl	800604a <USBD_CtlError>
            ret = USBD_FAIL;
 8004718:	2303      	movs	r3, #3
 800471a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800471c:	e008      	b.n	8004730 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 fc92 	bl	800604a <USBD_CtlError>
          ret = USBD_FAIL;
 8004726:	2303      	movs	r3, #3
 8004728:	75fb      	strb	r3, [r7, #23]
          break;
 800472a:	e002      	b.n	8004732 <USBD_CDC_Setup+0x19e>
          break;
 800472c:	bf00      	nop
 800472e:	e008      	b.n	8004742 <USBD_CDC_Setup+0x1ae>
          break;
 8004730:	bf00      	nop
      }
      break;
 8004732:	e006      	b.n	8004742 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004734:	6839      	ldr	r1, [r7, #0]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f001 fc87 	bl	800604a <USBD_CtlError>
      ret = USBD_FAIL;
 800473c:	2303      	movs	r3, #3
 800473e:	75fb      	strb	r3, [r7, #23]
      break;
 8004740:	bf00      	nop
  }

  return (uint8_t)ret;
 8004742:	7dfb      	ldrb	r3, [r7, #23]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800475e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	32b0      	adds	r2, #176	@ 0xb0
 800476a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004772:	2303      	movs	r3, #3
 8004774:	e065      	b.n	8004842 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	32b0      	adds	r2, #176	@ 0xb0
 8004780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004784:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	f003 020f 	and.w	r2, r3, #15
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	3318      	adds	r3, #24
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02f      	beq.n	8004800 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	f003 020f 	and.w	r2, r3, #15
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	3318      	adds	r3, #24
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	f003 010f 	and.w	r1, r3, #15
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	460b      	mov	r3, r1
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	440b      	add	r3, r1
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4403      	add	r3, r0
 80047c8:	331c      	adds	r3, #28
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d112      	bne.n	8004800 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	3318      	adds	r3, #24
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80047f2:	78f9      	ldrb	r1, [r7, #3]
 80047f4:	2300      	movs	r3, #0
 80047f6:	2200      	movs	r2, #0
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f002 f99a 	bl	8006b32 <USBD_LL_Transmit>
 80047fe:	e01f      	b.n	8004840 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	33b0      	adds	r3, #176	@ 0xb0
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	33b0      	adds	r3, #176	@ 0xb0
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	32b0      	adds	r2, #176	@ 0xb0
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	32b0      	adds	r2, #176	@ 0xb0
 8004870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004878:	2303      	movs	r3, #3
 800487a:	e01a      	b.n	80048b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f002 f998 	bl	8006bb6 <USBD_LL_GetRxDataSize>
 8004886:	4602      	mov	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	33b0      	adds	r3, #176	@ 0xb0
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80048ac:	4611      	mov	r1, r2
 80048ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	32b0      	adds	r2, #176	@ 0xb0
 80048cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80048d8:	2303      	movs	r3, #3
 80048da:	e024      	b.n	8004926 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	33b0      	adds	r3, #176	@ 0xb0
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d019      	beq.n	8004924 <USBD_CDC_EP0_RxReady+0x6a>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80048f6:	2bff      	cmp	r3, #255	@ 0xff
 80048f8:	d014      	beq.n	8004924 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	33b0      	adds	r3, #176	@ 0xb0
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004912:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800491a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	22ff      	movs	r2, #255	@ 0xff
 8004920:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004938:	2182      	movs	r1, #130	@ 0x82
 800493a:	4818      	ldr	r0, [pc, #96]	@ (800499c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800493c:	f000 fd4f 	bl	80053de <USBD_GetEpDesc>
 8004940:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004942:	2101      	movs	r1, #1
 8004944:	4815      	ldr	r0, [pc, #84]	@ (800499c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004946:	f000 fd4a 	bl	80053de <USBD_GetEpDesc>
 800494a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800494c:	2181      	movs	r1, #129	@ 0x81
 800494e:	4813      	ldr	r0, [pc, #76]	@ (800499c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004950:	f000 fd45 	bl	80053de <USBD_GetEpDesc>
 8004954:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2210      	movs	r2, #16
 8004960:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d006      	beq.n	8004976 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2200      	movs	r2, #0
 800496c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004970:	711a      	strb	r2, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d006      	beq.n	800498a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004984:	711a      	strb	r2, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2243      	movs	r2, #67	@ 0x43
 800498e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004990:	4b02      	ldr	r3, [pc, #8]	@ (800499c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000050 	.word	0x20000050

080049a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80049a8:	2182      	movs	r1, #130	@ 0x82
 80049aa:	4818      	ldr	r0, [pc, #96]	@ (8004a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049ac:	f000 fd17 	bl	80053de <USBD_GetEpDesc>
 80049b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80049b2:	2101      	movs	r1, #1
 80049b4:	4815      	ldr	r0, [pc, #84]	@ (8004a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049b6:	f000 fd12 	bl	80053de <USBD_GetEpDesc>
 80049ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80049bc:	2181      	movs	r1, #129	@ 0x81
 80049be:	4813      	ldr	r0, [pc, #76]	@ (8004a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049c0:	f000 fd0d 	bl	80053de <USBD_GetEpDesc>
 80049c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2210      	movs	r2, #16
 80049d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d006      	beq.n	80049e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2200      	movs	r2, #0
 80049dc:	711a      	strb	r2, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f042 0202 	orr.w	r2, r2, #2
 80049e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	711a      	strb	r2, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f042 0202 	orr.w	r2, r2, #2
 80049f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2243      	movs	r2, #67	@ 0x43
 80049fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a00:	4b02      	ldr	r3, [pc, #8]	@ (8004a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000050 	.word	0x20000050

08004a10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a18:	2182      	movs	r1, #130	@ 0x82
 8004a1a:	4818      	ldr	r0, [pc, #96]	@ (8004a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a1c:	f000 fcdf 	bl	80053de <USBD_GetEpDesc>
 8004a20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a22:	2101      	movs	r1, #1
 8004a24:	4815      	ldr	r0, [pc, #84]	@ (8004a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a26:	f000 fcda 	bl	80053de <USBD_GetEpDesc>
 8004a2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a2c:	2181      	movs	r1, #129	@ 0x81
 8004a2e:	4813      	ldr	r0, [pc, #76]	@ (8004a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a30:	f000 fcd5 	bl	80053de <USBD_GetEpDesc>
 8004a34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2210      	movs	r2, #16
 8004a40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a50:	711a      	strb	r2, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a64:	711a      	strb	r2, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2243      	movs	r2, #67	@ 0x43
 8004a6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a70:	4b02      	ldr	r3, [pc, #8]	@ (8004a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000050 	.word	0x20000050

08004a80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	220a      	movs	r2, #10
 8004a8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004a8e:	4b03      	ldr	r3, [pc, #12]	@ (8004a9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	2000000c 	.word	0x2000000c

08004aa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e009      	b.n	8004ac8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	33b0      	adds	r3, #176	@ 0xb0
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	32b0      	adds	r2, #176	@ 0xb0
 8004aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e008      	b.n	8004b0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	32b0      	adds	r2, #176	@ 0xb0
 8004b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e004      	b.n	8004b46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	32b0      	adds	r2, #176	@ 0xb0
 8004b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e025      	b.n	8004bc6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11f      	bne.n	8004bc4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004b8c:	4b10      	ldr	r3, [pc, #64]	@ (8004bd0 <USBD_CDC_TransmitPacket+0x7c>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f003 020f 	and.w	r2, r3, #15
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4403      	add	r3, r0
 8004ba6:	3318      	adds	r3, #24
 8004ba8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004baa:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <USBD_CDC_TransmitPacket+0x7c>)
 8004bac:	7819      	ldrb	r1, [r3, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f001 ffb9 	bl	8006b32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000093 	.word	0x20000093

08004bd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	32b0      	adds	r2, #176	@ 0xb0
 8004be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	32b0      	adds	r2, #176	@ 0xb0
 8004bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e018      	b.n	8004c34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	7c1b      	ldrb	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c3c <USBD_CDC_ReceivePacket+0x68>)
 8004c0c:	7819      	ldrb	r1, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f001 ffab 	bl	8006b74 <USBD_LL_PrepareReceive>
 8004c1e:	e008      	b.n	8004c32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c20:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <USBD_CDC_ReceivePacket+0x68>)
 8004c22:	7819      	ldrb	r1, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c2a:	2340      	movs	r3, #64	@ 0x40
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f001 ffa1 	bl	8006b74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000094 	.word	0x20000094

08004c40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e01f      	b.n	8004c98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	79fa      	ldrb	r2, [r7, #7]
 8004c8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f001 fe1b 	bl	80068c8 <USBD_LL_Init>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e025      	b.n	8004d04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	32ae      	adds	r2, #174	@ 0xae
 8004cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00f      	beq.n	8004cf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	32ae      	adds	r2, #174	@ 0xae
 8004cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	f107 020e 	add.w	r2, r7, #14
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4798      	blx	r3
 8004cec:	4602      	mov	r2, r0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f001 fe23 	bl	8006960 <USBD_LL_Start>
 8004d1a:	4603      	mov	r3, r0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	4611      	mov	r1, r2
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4798      	blx	r3
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 f90c 	bl	8005fd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d01a      	beq.n	8004e18 <USBD_LL_SetupStage+0x72>
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d822      	bhi.n	8004e2c <USBD_LL_SetupStage+0x86>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <USBD_LL_SetupStage+0x4a>
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d00a      	beq.n	8004e04 <USBD_LL_SetupStage+0x5e>
 8004dee:	e01d      	b.n	8004e2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fb63 	bl	80054c4 <USBD_StdDevReq>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	73fb      	strb	r3, [r7, #15]
      break;
 8004e02:	e020      	b.n	8004e46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fbcb 	bl	80055a8 <USBD_StdItfReq>
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]
      break;
 8004e16:	e016      	b.n	8004e46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fc2d 	bl	8005680 <USBD_StdEPReq>
 8004e26:	4603      	mov	r3, r0
 8004e28:	73fb      	strb	r3, [r7, #15]
      break;
 8004e2a:	e00c      	b.n	8004e46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004e32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fdf0 	bl	8006a20 <USBD_LL_StallEP>
 8004e40:	4603      	mov	r3, r0
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	bf00      	nop
  }

  return ret;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004e62:	7afb      	ldrb	r3, [r7, #11]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d16e      	bne.n	8004f46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004e6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	f040 8098 	bne.w	8004fac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d913      	bls.n	8004eb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	1ad2      	subs	r2, r2, r3
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	bf28      	it	cs
 8004ea2:	4613      	movcs	r3, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f001 f994 	bl	80061d6 <USBD_CtlContinueRx>
 8004eae:	e07d      	b.n	8004fac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d014      	beq.n	8004ee8 <USBD_LL_DataOutStage+0x98>
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d81d      	bhi.n	8004efe <USBD_LL_DataOutStage+0xae>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <USBD_LL_DataOutStage+0x7c>
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d003      	beq.n	8004ed2 <USBD_LL_DataOutStage+0x82>
 8004eca:	e018      	b.n	8004efe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	75bb      	strb	r3, [r7, #22]
            break;
 8004ed0:	e018      	b.n	8004f04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fa64 	bl	80053aa <USBD_CoreFindIF>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75bb      	strb	r3, [r7, #22]
            break;
 8004ee6:	e00d      	b.n	8004f04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa66 	bl	80053c4 <USBD_CoreFindEP>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75bb      	strb	r3, [r7, #22]
            break;
 8004efc:	e002      	b.n	8004f04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75bb      	strb	r3, [r7, #22]
            break;
 8004f02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004f04:	7dbb      	ldrb	r3, [r7, #22]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d119      	bne.n	8004f3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d113      	bne.n	8004f3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004f16:	7dba      	ldrb	r2, [r7, #22]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	32ae      	adds	r2, #174	@ 0xae
 8004f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004f26:	7dba      	ldrb	r2, [r7, #22]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004f2e:	7dba      	ldrb	r2, [r7, #22]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	32ae      	adds	r2, #174	@ 0xae
 8004f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f001 f95a 	bl	80061f8 <USBD_CtlSendStatus>
 8004f44:	e032      	b.n	8004fac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004f46:	7afb      	ldrb	r3, [r7, #11]
 8004f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	4619      	mov	r1, r3
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fa37 	bl	80053c4 <USBD_CoreFindEP>
 8004f56:	4603      	mov	r3, r0
 8004f58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f5a:	7dbb      	ldrb	r3, [r7, #22]
 8004f5c:	2bff      	cmp	r3, #255	@ 0xff
 8004f5e:	d025      	beq.n	8004fac <USBD_LL_DataOutStage+0x15c>
 8004f60:	7dbb      	ldrb	r3, [r7, #22]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d122      	bne.n	8004fac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d117      	bne.n	8004fa2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004f72:	7dba      	ldrb	r2, [r7, #22]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	32ae      	adds	r2, #174	@ 0xae
 8004f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00f      	beq.n	8004fa2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004f82:	7dba      	ldrb	r2, [r7, #22]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004f8a:	7dba      	ldrb	r2, [r7, #22]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	32ae      	adds	r2, #174	@ 0xae
 8004f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	7afa      	ldrb	r2, [r7, #11]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	4798      	blx	r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	e000      	b.n	8004fae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004fc4:	7afb      	ldrb	r3, [r7, #11]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d16f      	bne.n	80050aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d15a      	bne.n	8005090 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d914      	bls.n	8005010 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f001 f8bc 	bl	800617a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005002:	2300      	movs	r3, #0
 8005004:	2200      	movs	r2, #0
 8005006:	2100      	movs	r1, #0
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f001 fdb3 	bl	8006b74 <USBD_LL_PrepareReceive>
 800500e:	e03f      	b.n	8005090 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d11c      	bne.n	8005056 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005024:	429a      	cmp	r2, r3
 8005026:	d316      	bcc.n	8005056 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005032:	429a      	cmp	r2, r3
 8005034:	d20f      	bcs.n	8005056 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005036:	2200      	movs	r2, #0
 8005038:	2100      	movs	r1, #0
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f001 f89d 	bl	800617a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005048:	2300      	movs	r3, #0
 800504a:	2200      	movs	r2, #0
 800504c:	2100      	movs	r1, #0
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f001 fd90 	bl	8006b74 <USBD_LL_PrepareReceive>
 8005054:	e01c      	b.n	8005090 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b03      	cmp	r3, #3
 8005060:	d10f      	bne.n	8005082 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005082:	2180      	movs	r1, #128	@ 0x80
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f001 fccb 	bl	8006a20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f001 f8c7 	bl	800621e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d03a      	beq.n	8005110 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff fe42 	bl	8004d24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80050a8:	e032      	b.n	8005110 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80050aa:	7afb      	ldrb	r3, [r7, #11]
 80050ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f985 	bl	80053c4 <USBD_CoreFindEP>
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2bff      	cmp	r3, #255	@ 0xff
 80050c2:	d025      	beq.n	8005110 <USBD_LL_DataInStage+0x15a>
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d122      	bne.n	8005110 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d11c      	bne.n	8005110 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80050d6:	7dfa      	ldrb	r2, [r7, #23]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	32ae      	adds	r2, #174	@ 0xae
 80050dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d014      	beq.n	8005110 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80050e6:	7dfa      	ldrb	r2, [r7, #23]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80050ee:	7dfa      	ldrb	r2, [r7, #23]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	32ae      	adds	r2, #174	@ 0xae
 80050f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	7afa      	ldrb	r2, [r7, #11]
 80050fc:	4611      	mov	r1, r2
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	4798      	blx	r3
 8005102:	4603      	mov	r3, r0
 8005104:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005106:	7dbb      	ldrb	r3, [r7, #22]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800510c:	7dbb      	ldrb	r3, [r7, #22]
 800510e:	e000      	b.n	8005112 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d014      	beq.n	8005180 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00e      	beq.n	8005180 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6852      	ldr	r2, [r2, #4]
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	4611      	mov	r1, r2
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800517c:	2303      	movs	r3, #3
 800517e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005180:	2340      	movs	r3, #64	@ 0x40
 8005182:	2200      	movs	r2, #0
 8005184:	2100      	movs	r1, #0
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 fc05 	bl	8006996 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2240      	movs	r2, #64	@ 0x40
 8005198:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800519c:	2340      	movs	r3, #64	@ 0x40
 800519e:	2200      	movs	r2, #0
 80051a0:	2180      	movs	r1, #128	@ 0x80
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 fbf7 	bl	8006996 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2240      	movs	r2, #64	@ 0x40
 80051b2:	621a      	str	r2, [r3, #32]

  return ret;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d006      	beq.n	8005200 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2204      	movs	r2, #4
 8005204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b04      	cmp	r3, #4
 8005228:	d106      	bne.n	8005238 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005230:	b2da      	uxtb	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b03      	cmp	r3, #3
 8005258:	d110      	bne.n	800527c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	460b      	mov	r3, r1
 8005290:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	32ae      	adds	r2, #174	@ 0xae
 800529c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e01c      	b.n	80052e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d115      	bne.n	80052e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	32ae      	adds	r2, #174	@ 0xae
 80052be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	32ae      	adds	r2, #174	@ 0xae
 80052d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	4611      	mov	r1, r2
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	32ae      	adds	r2, #174	@ 0xae
 8005300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005308:	2303      	movs	r3, #3
 800530a:	e01c      	b.n	8005346 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b03      	cmp	r3, #3
 8005316:	d115      	bne.n	8005344 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	32ae      	adds	r2, #174	@ 0xae
 8005322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	32ae      	adds	r2, #174	@ 0xae
 8005336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	4611      	mov	r1, r2
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6852      	ldr	r2, [r2, #4]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	4611      	mov	r1, r2
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800539c:	2303      	movs	r3, #3
 800539e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80053b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80053d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b086      	sub	sp, #24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	885b      	ldrh	r3, [r3, #2]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	7812      	ldrb	r2, [r2, #0]
 8005400:	4293      	cmp	r3, r2
 8005402:	d91f      	bls.n	8005444 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800540a:	e013      	b.n	8005434 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800540c:	f107 030a 	add.w	r3, r7, #10
 8005410:	4619      	mov	r1, r3
 8005412:	6978      	ldr	r0, [r7, #20]
 8005414:	f000 f81b 	bl	800544e <USBD_GetNextDesc>
 8005418:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b05      	cmp	r3, #5
 8005420:	d108      	bne.n	8005434 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	789b      	ldrb	r3, [r3, #2]
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	429a      	cmp	r2, r3
 800542e:	d008      	beq.n	8005442 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	885b      	ldrh	r3, [r3, #2]
 8005438:	b29a      	uxth	r2, r3
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	429a      	cmp	r2, r3
 800543e:	d8e5      	bhi.n	800540c <USBD_GetEpDesc+0x2e>
 8005440:	e000      	b.n	8005444 <USBD_GetEpDesc+0x66>
          break;
 8005442:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005444:	693b      	ldr	r3, [r7, #16]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	7812      	ldrb	r2, [r2, #0]
 8005464:	4413      	add	r3, r2
 8005466:	b29a      	uxth	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005478:	68fb      	ldr	r3, [r7, #12]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005486:	b480      	push	{r7}
 8005488:	b087      	sub	sp, #28
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3301      	adds	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80054a4:	8a3b      	ldrh	r3, [r7, #16]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	b21a      	sxth	r2, r3
 80054aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b21b      	sxth	r3, r3
 80054b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80054b4:	89fb      	ldrh	r3, [r7, #14]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054da:	2b40      	cmp	r3, #64	@ 0x40
 80054dc:	d005      	beq.n	80054ea <USBD_StdDevReq+0x26>
 80054de:	2b40      	cmp	r3, #64	@ 0x40
 80054e0:	d857      	bhi.n	8005592 <USBD_StdDevReq+0xce>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00f      	beq.n	8005506 <USBD_StdDevReq+0x42>
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d153      	bne.n	8005592 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	32ae      	adds	r2, #174	@ 0xae
 80054f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e04a      	b.n	800559c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	2b09      	cmp	r3, #9
 800550c:	d83b      	bhi.n	8005586 <USBD_StdDevReq+0xc2>
 800550e:	a201      	add	r2, pc, #4	@ (adr r2, 8005514 <USBD_StdDevReq+0x50>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005569 	.word	0x08005569
 8005518:	0800557d 	.word	0x0800557d
 800551c:	08005587 	.word	0x08005587
 8005520:	08005573 	.word	0x08005573
 8005524:	08005587 	.word	0x08005587
 8005528:	08005547 	.word	0x08005547
 800552c:	0800553d 	.word	0x0800553d
 8005530:	08005587 	.word	0x08005587
 8005534:	0800555f 	.word	0x0800555f
 8005538:	08005551 	.word	0x08005551
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa3c 	bl	80059bc <USBD_GetDescriptor>
          break;
 8005544:	e024      	b.n	8005590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fba1 	bl	8005c90 <USBD_SetAddress>
          break;
 800554e:	e01f      	b.n	8005590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fbe0 	bl	8005d18 <USBD_SetConfig>
 8005558:	4603      	mov	r3, r0
 800555a:	73fb      	strb	r3, [r7, #15]
          break;
 800555c:	e018      	b.n	8005590 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fc83 	bl	8005e6c <USBD_GetConfig>
          break;
 8005566:	e013      	b.n	8005590 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fcb4 	bl	8005ed8 <USBD_GetStatus>
          break;
 8005570:	e00e      	b.n	8005590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fce3 	bl	8005f40 <USBD_SetFeature>
          break;
 800557a:	e009      	b.n	8005590 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fd07 	bl	8005f92 <USBD_ClrFeature>
          break;
 8005584:	e004      	b.n	8005590 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fd5e 	bl	800604a <USBD_CtlError>
          break;
 800558e:	bf00      	nop
      }
      break;
 8005590:	e004      	b.n	800559c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fd58 	bl	800604a <USBD_CtlError>
      break;
 800559a:	bf00      	nop
  }

  return ret;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop

080055a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055be:	2b40      	cmp	r3, #64	@ 0x40
 80055c0:	d005      	beq.n	80055ce <USBD_StdItfReq+0x26>
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d852      	bhi.n	800566c <USBD_StdItfReq+0xc4>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <USBD_StdItfReq+0x26>
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d14e      	bne.n	800566c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d840      	bhi.n	800565e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	889b      	ldrh	r3, [r3, #4]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d836      	bhi.n	8005654 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	889b      	ldrh	r3, [r3, #4]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fedb 	bl	80053aa <USBD_CoreFindIF>
 80055f4:	4603      	mov	r3, r0
 80055f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055f8:	7bbb      	ldrb	r3, [r7, #14]
 80055fa:	2bff      	cmp	r3, #255	@ 0xff
 80055fc:	d01d      	beq.n	800563a <USBD_StdItfReq+0x92>
 80055fe:	7bbb      	ldrb	r3, [r7, #14]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d11a      	bne.n	800563a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005604:	7bba      	ldrb	r2, [r7, #14]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	32ae      	adds	r2, #174	@ 0xae
 800560a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00f      	beq.n	8005634 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005614:	7bba      	ldrb	r2, [r7, #14]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800561c:	7bba      	ldrb	r2, [r7, #14]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	32ae      	adds	r2, #174	@ 0xae
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	4798      	blx	r3
 800562e:	4603      	mov	r3, r0
 8005630:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005632:	e004      	b.n	800563e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005634:	2303      	movs	r3, #3
 8005636:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005638:	e001      	b.n	800563e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800563a:	2303      	movs	r3, #3
 800563c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	88db      	ldrh	r3, [r3, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d110      	bne.n	8005668 <USBD_StdItfReq+0xc0>
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10d      	bne.n	8005668 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fdd3 	bl	80061f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005652:	e009      	b.n	8005668 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fcf7 	bl	800604a <USBD_CtlError>
          break;
 800565c:	e004      	b.n	8005668 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fcf2 	bl	800604a <USBD_CtlError>
          break;
 8005666:	e000      	b.n	800566a <USBD_StdItfReq+0xc2>
          break;
 8005668:	bf00      	nop
      }
      break;
 800566a:	e004      	b.n	8005676 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fceb 	bl	800604a <USBD_CtlError>
      break;
 8005674:	bf00      	nop
  }

  return ret;
 8005676:	7bfb      	ldrb	r3, [r7, #15]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	889b      	ldrh	r3, [r3, #4]
 8005692:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800569c:	2b40      	cmp	r3, #64	@ 0x40
 800569e:	d007      	beq.n	80056b0 <USBD_StdEPReq+0x30>
 80056a0:	2b40      	cmp	r3, #64	@ 0x40
 80056a2:	f200 817f 	bhi.w	80059a4 <USBD_StdEPReq+0x324>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d02a      	beq.n	8005700 <USBD_StdEPReq+0x80>
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	f040 817a 	bne.w	80059a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80056b0:	7bbb      	ldrb	r3, [r7, #14]
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fe85 	bl	80053c4 <USBD_CoreFindEP>
 80056ba:	4603      	mov	r3, r0
 80056bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056be:	7b7b      	ldrb	r3, [r7, #13]
 80056c0:	2bff      	cmp	r3, #255	@ 0xff
 80056c2:	f000 8174 	beq.w	80059ae <USBD_StdEPReq+0x32e>
 80056c6:	7b7b      	ldrb	r3, [r7, #13]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f040 8170 	bne.w	80059ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80056ce:	7b7a      	ldrb	r2, [r7, #13]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80056d6:	7b7a      	ldrb	r2, [r7, #13]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	32ae      	adds	r2, #174	@ 0xae
 80056dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 8163 	beq.w	80059ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80056e8:	7b7a      	ldrb	r2, [r7, #13]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	32ae      	adds	r2, #174	@ 0xae
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4798      	blx	r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056fe:	e156      	b.n	80059ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	2b03      	cmp	r3, #3
 8005706:	d008      	beq.n	800571a <USBD_StdEPReq+0x9a>
 8005708:	2b03      	cmp	r3, #3
 800570a:	f300 8145 	bgt.w	8005998 <USBD_StdEPReq+0x318>
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 809b 	beq.w	800584a <USBD_StdEPReq+0x1ca>
 8005714:	2b01      	cmp	r3, #1
 8005716:	d03c      	beq.n	8005792 <USBD_StdEPReq+0x112>
 8005718:	e13e      	b.n	8005998 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d002      	beq.n	800572c <USBD_StdEPReq+0xac>
 8005726:	2b03      	cmp	r3, #3
 8005728:	d016      	beq.n	8005758 <USBD_StdEPReq+0xd8>
 800572a:	e02c      	b.n	8005786 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00d      	beq.n	800574e <USBD_StdEPReq+0xce>
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	2b80      	cmp	r3, #128	@ 0x80
 8005736:	d00a      	beq.n	800574e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 f96f 	bl	8006a20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005742:	2180      	movs	r1, #128	@ 0x80
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f001 f96b 	bl	8006a20 <USBD_LL_StallEP>
 800574a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800574c:	e020      	b.n	8005790 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fc7a 	bl	800604a <USBD_CtlError>
              break;
 8005756:	e01b      	b.n	8005790 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	885b      	ldrh	r3, [r3, #2]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10e      	bne.n	800577e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005760:	7bbb      	ldrb	r3, [r7, #14]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <USBD_StdEPReq+0xfe>
 8005766:	7bbb      	ldrb	r3, [r7, #14]
 8005768:	2b80      	cmp	r3, #128	@ 0x80
 800576a:	d008      	beq.n	800577e <USBD_StdEPReq+0xfe>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	88db      	ldrh	r3, [r3, #6]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 f951 	bl	8006a20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fd3a 	bl	80061f8 <USBD_CtlSendStatus>

              break;
 8005784:	e004      	b.n	8005790 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fc5e 	bl	800604a <USBD_CtlError>
              break;
 800578e:	bf00      	nop
          }
          break;
 8005790:	e107      	b.n	80059a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d002      	beq.n	80057a4 <USBD_StdEPReq+0x124>
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d016      	beq.n	80057d0 <USBD_StdEPReq+0x150>
 80057a2:	e04b      	b.n	800583c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <USBD_StdEPReq+0x146>
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	2b80      	cmp	r3, #128	@ 0x80
 80057ae:	d00a      	beq.n	80057c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057b0:	7bbb      	ldrb	r3, [r7, #14]
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 f933 	bl	8006a20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057ba:	2180      	movs	r1, #128	@ 0x80
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f92f 	bl	8006a20 <USBD_LL_StallEP>
 80057c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057c4:	e040      	b.n	8005848 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fc3e 	bl	800604a <USBD_CtlError>
              break;
 80057ce:	e03b      	b.n	8005848 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	885b      	ldrh	r3, [r3, #2]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d136      	bne.n	8005846 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80057d8:	7bbb      	ldrb	r3, [r7, #14]
 80057da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 f939 	bl	8006a5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fd03 	bl	80061f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80057f2:	7bbb      	ldrb	r3, [r7, #14]
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fde4 	bl	80053c4 <USBD_CoreFindEP>
 80057fc:	4603      	mov	r3, r0
 80057fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005800:	7b7b      	ldrb	r3, [r7, #13]
 8005802:	2bff      	cmp	r3, #255	@ 0xff
 8005804:	d01f      	beq.n	8005846 <USBD_StdEPReq+0x1c6>
 8005806:	7b7b      	ldrb	r3, [r7, #13]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d11c      	bne.n	8005846 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800580c:	7b7a      	ldrb	r2, [r7, #13]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005814:	7b7a      	ldrb	r2, [r7, #13]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	32ae      	adds	r2, #174	@ 0xae
 800581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d010      	beq.n	8005846 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005824:	7b7a      	ldrb	r2, [r7, #13]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	32ae      	adds	r2, #174	@ 0xae
 800582a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800583a:	e004      	b.n	8005846 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fc03 	bl	800604a <USBD_CtlError>
              break;
 8005844:	e000      	b.n	8005848 <USBD_StdEPReq+0x1c8>
              break;
 8005846:	bf00      	nop
          }
          break;
 8005848:	e0ab      	b.n	80059a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d002      	beq.n	800585c <USBD_StdEPReq+0x1dc>
 8005856:	2b03      	cmp	r3, #3
 8005858:	d032      	beq.n	80058c0 <USBD_StdEPReq+0x240>
 800585a:	e097      	b.n	800598c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800585c:	7bbb      	ldrb	r3, [r7, #14]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <USBD_StdEPReq+0x1f2>
 8005862:	7bbb      	ldrb	r3, [r7, #14]
 8005864:	2b80      	cmp	r3, #128	@ 0x80
 8005866:	d004      	beq.n	8005872 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fbed 	bl	800604a <USBD_CtlError>
                break;
 8005870:	e091      	b.n	8005996 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005876:	2b00      	cmp	r3, #0
 8005878:	da0b      	bge.n	8005892 <USBD_StdEPReq+0x212>
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	3310      	adds	r3, #16
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	3304      	adds	r3, #4
 8005890:	e00b      	b.n	80058aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4413      	add	r3, r2
 80058a8:	3304      	adds	r3, #4
 80058aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2202      	movs	r2, #2
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fc43 	bl	8006144 <USBD_CtlSendData>
              break;
 80058be:	e06a      	b.n	8005996 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da11      	bge.n	80058ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	f003 020f 	and.w	r2, r3, #15
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	3324      	adds	r3, #36	@ 0x24
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d117      	bne.n	8005912 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fbb0 	bl	800604a <USBD_CtlError>
                  break;
 80058ea:	e054      	b.n	8005996 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	f003 020f 	and.w	r2, r3, #15
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fb9d 	bl	800604a <USBD_CtlError>
                  break;
 8005910:	e041      	b.n	8005996 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005916:	2b00      	cmp	r3, #0
 8005918:	da0b      	bge.n	8005932 <USBD_StdEPReq+0x2b2>
 800591a:	7bbb      	ldrb	r3, [r7, #14]
 800591c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	3310      	adds	r3, #16
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	e00b      	b.n	800594a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4413      	add	r3, r2
 8005948:	3304      	adds	r3, #4
 800594a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <USBD_StdEPReq+0x2d8>
 8005952:	7bbb      	ldrb	r3, [r7, #14]
 8005954:	2b80      	cmp	r3, #128	@ 0x80
 8005956:	d103      	bne.n	8005960 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e00e      	b.n	800597e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 f899 	bl	8006a9c <USBD_LL_IsStallEP>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e002      	b.n	800597e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2202      	movs	r2, #2
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fbdd 	bl	8006144 <USBD_CtlSendData>
              break;
 800598a:	e004      	b.n	8005996 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fb5b 	bl	800604a <USBD_CtlError>
              break;
 8005994:	bf00      	nop
          }
          break;
 8005996:	e004      	b.n	80059a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fb55 	bl	800604a <USBD_CtlError>
          break;
 80059a0:	bf00      	nop
      }
      break;
 80059a2:	e005      	b.n	80059b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fb4f 	bl	800604a <USBD_CtlError>
      break;
 80059ac:	e000      	b.n	80059b0 <USBD_StdEPReq+0x330>
      break;
 80059ae:	bf00      	nop
  }

  return ret;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	885b      	ldrh	r3, [r3, #2]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	2b06      	cmp	r3, #6
 80059de:	f200 8128 	bhi.w	8005c32 <USBD_GetDescriptor+0x276>
 80059e2:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <USBD_GetDescriptor+0x2c>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	08005a1d 	.word	0x08005a1d
 80059f0:	08005a5d 	.word	0x08005a5d
 80059f4:	08005c33 	.word	0x08005c33
 80059f8:	08005c33 	.word	0x08005c33
 80059fc:	08005bd3 	.word	0x08005bd3
 8005a00:	08005bff 	.word	0x08005bff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	7c12      	ldrb	r2, [r2, #16]
 8005a10:	f107 0108 	add.w	r1, r7, #8
 8005a14:	4610      	mov	r0, r2
 8005a16:	4798      	blx	r3
 8005a18:	60f8      	str	r0, [r7, #12]
      break;
 8005a1a:	e112      	b.n	8005c42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	7c1b      	ldrb	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10d      	bne.n	8005a40 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	f107 0208 	add.w	r2, r7, #8
 8005a30:	4610      	mov	r0, r2
 8005a32:	4798      	blx	r3
 8005a34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a3e:	e100      	b.n	8005c42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a48:	f107 0208 	add.w	r2, r7, #8
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4798      	blx	r3
 8005a50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	2202      	movs	r2, #2
 8005a58:	701a      	strb	r2, [r3, #0]
      break;
 8005a5a:	e0f2      	b.n	8005c42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	885b      	ldrh	r3, [r3, #2]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	f200 80ac 	bhi.w	8005bc0 <USBD_GetDescriptor+0x204>
 8005a68:	a201      	add	r2, pc, #4	@ (adr r2, 8005a70 <USBD_GetDescriptor+0xb4>)
 8005a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6e:	bf00      	nop
 8005a70:	08005a89 	.word	0x08005a89
 8005a74:	08005abd 	.word	0x08005abd
 8005a78:	08005af1 	.word	0x08005af1
 8005a7c:	08005b25 	.word	0x08005b25
 8005a80:	08005b59 	.word	0x08005b59
 8005a84:	08005b8d 	.word	0x08005b8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	7c12      	ldrb	r2, [r2, #16]
 8005aa0:	f107 0108 	add.w	r1, r7, #8
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
 8005aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aaa:	e091      	b.n	8005bd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 facb 	bl	800604a <USBD_CtlError>
            err++;
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8005aba:	e089      	b.n	8005bd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	7c12      	ldrb	r2, [r2, #16]
 8005ad4:	f107 0108 	add.w	r1, r7, #8
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ade:	e077      	b.n	8005bd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fab1 	bl	800604a <USBD_CtlError>
            err++;
 8005ae8:	7afb      	ldrb	r3, [r7, #11]
 8005aea:	3301      	adds	r3, #1
 8005aec:	72fb      	strb	r3, [r7, #11]
          break;
 8005aee:	e06f      	b.n	8005bd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	7c12      	ldrb	r2, [r2, #16]
 8005b08:	f107 0108 	add.w	r1, r7, #8
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
 8005b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b12:	e05d      	b.n	8005bd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa97 	bl	800604a <USBD_CtlError>
            err++;
 8005b1c:	7afb      	ldrb	r3, [r7, #11]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	72fb      	strb	r3, [r7, #11]
          break;
 8005b22:	e055      	b.n	8005bd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	7c12      	ldrb	r2, [r2, #16]
 8005b3c:	f107 0108 	add.w	r1, r7, #8
 8005b40:	4610      	mov	r0, r2
 8005b42:	4798      	blx	r3
 8005b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b46:	e043      	b.n	8005bd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa7d 	bl	800604a <USBD_CtlError>
            err++;
 8005b50:	7afb      	ldrb	r3, [r7, #11]
 8005b52:	3301      	adds	r3, #1
 8005b54:	72fb      	strb	r3, [r7, #11]
          break;
 8005b56:	e03b      	b.n	8005bd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	7c12      	ldrb	r2, [r2, #16]
 8005b70:	f107 0108 	add.w	r1, r7, #8
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
 8005b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b7a:	e029      	b.n	8005bd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa63 	bl	800604a <USBD_CtlError>
            err++;
 8005b84:	7afb      	ldrb	r3, [r7, #11]
 8005b86:	3301      	adds	r3, #1
 8005b88:	72fb      	strb	r3, [r7, #11]
          break;
 8005b8a:	e021      	b.n	8005bd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	7c12      	ldrb	r2, [r2, #16]
 8005ba4:	f107 0108 	add.w	r1, r7, #8
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4798      	blx	r3
 8005bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bae:	e00f      	b.n	8005bd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa49 	bl	800604a <USBD_CtlError>
            err++;
 8005bb8:	7afb      	ldrb	r3, [r7, #11]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bbe:	e007      	b.n	8005bd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa41 	bl	800604a <USBD_CtlError>
          err++;
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005bce:	bf00      	nop
      }
      break;
 8005bd0:	e037      	b.n	8005c42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7c1b      	ldrb	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be2:	f107 0208 	add.w	r2, r7, #8
 8005be6:	4610      	mov	r0, r2
 8005be8:	4798      	blx	r3
 8005bea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bec:	e029      	b.n	8005c42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fa2a 	bl	800604a <USBD_CtlError>
        err++;
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8005bfc:	e021      	b.n	8005c42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7c1b      	ldrb	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10d      	bne.n	8005c22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	f107 0208 	add.w	r2, r7, #8
 8005c12:	4610      	mov	r0, r2
 8005c14:	4798      	blx	r3
 8005c16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	2207      	movs	r2, #7
 8005c1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c20:	e00f      	b.n	8005c42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa10 	bl	800604a <USBD_CtlError>
        err++;
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c30:	e007      	b.n	8005c42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fa08 	bl	800604a <USBD_CtlError>
      err++;
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c40:	bf00      	nop
  }

  if (err != 0U)
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d11e      	bne.n	8005c86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	88db      	ldrh	r3, [r3, #6]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d016      	beq.n	8005c7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	88da      	ldrh	r2, [r3, #6]
 8005c5a:	893b      	ldrh	r3, [r7, #8]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	bf28      	it	cs
 8005c60:	4613      	movcs	r3, r2
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c66:	893b      	ldrh	r3, [r7, #8]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fa69 	bl	8006144 <USBD_CtlSendData>
 8005c72:	e009      	b.n	8005c88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9e7 	bl	800604a <USBD_CtlError>
 8005c7c:	e004      	b.n	8005c88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 faba 	bl	80061f8 <USBD_CtlSendStatus>
 8005c84:	e000      	b.n	8005c88 <USBD_GetDescriptor+0x2cc>
    return;
 8005c86:	bf00      	nop
  }
}
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop

08005c90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	889b      	ldrh	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d131      	bne.n	8005d06 <USBD_SetAddress+0x76>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	88db      	ldrh	r3, [r3, #6]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d12d      	bne.n	8005d06 <USBD_SetAddress+0x76>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	885b      	ldrh	r3, [r3, #2]
 8005cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cb0:	d829      	bhi.n	8005d06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	885b      	ldrh	r3, [r3, #2]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d104      	bne.n	8005cd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f9bc 	bl	800604a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd2:	e01d      	b.n	8005d10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 ff07 	bl	8006af4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa86 	bl	80061f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfa:	e009      	b.n	8005d10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d04:	e004      	b.n	8005d10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f99e 	bl	800604a <USBD_CtlError>
  }
}
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	885b      	ldrh	r3, [r3, #2]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d30:	4b4d      	ldr	r3, [pc, #308]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d905      	bls.n	8005d44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f985 	bl	800604a <USBD_CtlError>
    return USBD_FAIL;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e08c      	b.n	8005e5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d002      	beq.n	8005d56 <USBD_SetConfig+0x3e>
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d029      	beq.n	8005da8 <USBD_SetConfig+0x90>
 8005d54:	e075      	b.n	8005e42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005d56:	4b44      	ldr	r3, [pc, #272]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d020      	beq.n	8005da0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005d5e:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d68:	4b3f      	ldr	r3, [pc, #252]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fe ffe3 	bl	8004d3a <USBD_SetClassConfig>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f962 	bl	800604a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d8e:	e065      	b.n	8005e5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fa31 	bl	80061f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2203      	movs	r2, #3
 8005d9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005d9e:	e05d      	b.n	8005e5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa29 	bl	80061f8 <USBD_CtlSendStatus>
      break;
 8005da6:	e059      	b.n	8005e5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005da8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d112      	bne.n	8005dd6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005db8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dc2:	4b29      	ldr	r3, [pc, #164]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fe ffd2 	bl	8004d72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa12 	bl	80061f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005dd4:	e042      	b.n	8005e5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005dd6:	4b24      	ldr	r3, [pc, #144]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d02a      	beq.n	8005e3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fe ffc0 	bl	8004d72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005df2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fe ff99 	bl	8004d3a <USBD_SetClassConfig>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00f      	beq.n	8005e32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f918 	bl	800604a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fe ffa5 	bl	8004d72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005e30:	e014      	b.n	8005e5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9e0 	bl	80061f8 <USBD_CtlSendStatus>
      break;
 8005e38:	e010      	b.n	8005e5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9dc 	bl	80061f8 <USBD_CtlSendStatus>
      break;
 8005e40:	e00c      	b.n	8005e5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f900 	bl	800604a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e4a:	4b07      	ldr	r3, [pc, #28]	@ (8005e68 <USBD_SetConfig+0x150>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7fe ff8e 	bl	8004d72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005e56:	2303      	movs	r3, #3
 8005e58:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5a:	bf00      	nop
  }

  return ret;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	2000011c 	.word	0x2000011c

08005e6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	88db      	ldrh	r3, [r3, #6]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d004      	beq.n	8005e88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8e2 	bl	800604a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e86:	e023      	b.n	8005ed0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	dc02      	bgt.n	8005e9a <USBD_GetConfig+0x2e>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	dc03      	bgt.n	8005ea0 <USBD_GetConfig+0x34>
 8005e98:	e015      	b.n	8005ec6 <USBD_GetConfig+0x5a>
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d00b      	beq.n	8005eb6 <USBD_GetConfig+0x4a>
 8005e9e:	e012      	b.n	8005ec6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	2201      	movs	r2, #1
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f948 	bl	8006144 <USBD_CtlSendData>
        break;
 8005eb4:	e00c      	b.n	8005ed0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f940 	bl	8006144 <USBD_CtlSendData>
        break;
 8005ec4:	e004      	b.n	8005ed0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f8be 	bl	800604a <USBD_CtlError>
        break;
 8005ece:	bf00      	nop
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d81e      	bhi.n	8005f2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	88db      	ldrh	r3, [r3, #6]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d004      	beq.n	8005f02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8a5 	bl	800604a <USBD_CtlError>
        break;
 8005f00:	e01a      	b.n	8005f38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f043 0202 	orr.w	r2, r3, #2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	330c      	adds	r3, #12
 8005f22:	2202      	movs	r2, #2
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f90c 	bl	8006144 <USBD_CtlSendData>
      break;
 8005f2c:	e004      	b.n	8005f38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f88a 	bl	800604a <USBD_CtlError>
      break;
 8005f36:	bf00      	nop
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	885b      	ldrh	r3, [r3, #2]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d107      	bne.n	8005f62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f94c 	bl	80061f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005f60:	e013      	b.n	8005f8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	885b      	ldrh	r3, [r3, #2]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d10b      	bne.n	8005f82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	889b      	ldrh	r3, [r3, #4]
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f93c 	bl	80061f8 <USBD_CtlSendStatus>
}
 8005f80:	e003      	b.n	8005f8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f860 	bl	800604a <USBD_CtlError>
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d80b      	bhi.n	8005fc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	885b      	ldrh	r3, [r3, #2]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d10c      	bne.n	8005fcc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f91c 	bl	80061f8 <USBD_CtlSendStatus>
      }
      break;
 8005fc0:	e004      	b.n	8005fcc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f840 	bl	800604a <USBD_CtlError>
      break;
 8005fca:	e000      	b.n	8005fce <USBD_ClrFeature+0x3c>
      break;
 8005fcc:	bf00      	nop
  }
}
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	781a      	ldrb	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fa40 	bl	8005486 <SWAPBYTE>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff fa33 	bl	8005486 <SWAPBYTE>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3301      	adds	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fa26 	bl	8005486 <SWAPBYTE>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	80da      	strh	r2, [r3, #6]
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006054:	2180      	movs	r1, #128	@ 0x80
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fce2 	bl	8006a20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800605c:	2100      	movs	r1, #0
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fcde 	bl	8006a20 <USBD_LL_StallEP>
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d042      	beq.n	8006108 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f000 f842 	bl	8006110 <USBD_GetLen>
 800608c:	4603      	mov	r3, r0
 800608e:	3301      	adds	r3, #1
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006096:	d808      	bhi.n	80060aa <USBD_GetString+0x3e>
 8006098:	6938      	ldr	r0, [r7, #16]
 800609a:	f000 f839 	bl	8006110 <USBD_GetLen>
 800609e:	4603      	mov	r3, r0
 80060a0:	3301      	adds	r3, #1
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	e001      	b.n	80060ae <USBD_GetString+0x42>
 80060aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	4413      	add	r3, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	3301      	adds	r3, #1
 80060c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	4413      	add	r3, r2
 80060ca:	2203      	movs	r2, #3
 80060cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	3301      	adds	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060d4:	e013      	b.n	80060fe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	4413      	add	r3, r2
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	3301      	adds	r3, #1
 80060e6:	613b      	str	r3, [r7, #16]
    idx++;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	3301      	adds	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	4413      	add	r3, r2
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	3301      	adds	r3, #1
 80060fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e7      	bne.n	80060d6 <USBD_GetString+0x6a>
 8006106:	e000      	b.n	800610a <USBD_GetString+0x9e>
    return;
 8006108:	bf00      	nop
  }
}
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006120:	e005      	b.n	800612e <USBD_GetLen+0x1e>
  {
    len++;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	3301      	adds	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	3301      	adds	r3, #1
 800612c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f5      	bne.n	8006122 <USBD_GetLen+0x12>
  }

  return len;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2202      	movs	r2, #2
 8006154:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	2100      	movs	r1, #0
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fce1 	bl	8006b32 <USBD_LL_Transmit>

  return USBD_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	2100      	movs	r1, #0
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fcd0 	bl	8006b32 <USBD_LL_Transmit>

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2203      	movs	r2, #3
 80061ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	2100      	movs	r1, #0
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fcd4 	bl	8006b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	2100      	movs	r1, #0
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fcc3 	bl	8006b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2204      	movs	r2, #4
 8006204:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006208:	2300      	movs	r3, #0
 800620a:	2200      	movs	r2, #0
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fc8f 	bl	8006b32 <USBD_LL_Transmit>

  return USBD_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2205      	movs	r2, #5
 800622a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800622e:	2300      	movs	r3, #0
 8006230:	2200      	movs	r2, #0
 8006232:	2100      	movs	r1, #0
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fc9d 	bl	8006b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006248:	2200      	movs	r2, #0
 800624a:	4912      	ldr	r1, [pc, #72]	@ (8006294 <MX_USB_DEVICE_Init+0x50>)
 800624c:	4812      	ldr	r0, [pc, #72]	@ (8006298 <MX_USB_DEVICE_Init+0x54>)
 800624e:	f7fe fcf7 	bl	8004c40 <USBD_Init>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006258:	f7fa fa54 	bl	8000704 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800625c:	490f      	ldr	r1, [pc, #60]	@ (800629c <MX_USB_DEVICE_Init+0x58>)
 800625e:	480e      	ldr	r0, [pc, #56]	@ (8006298 <MX_USB_DEVICE_Init+0x54>)
 8006260:	f7fe fd1e 	bl	8004ca0 <USBD_RegisterClass>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800626a:	f7fa fa4b 	bl	8000704 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800626e:	490c      	ldr	r1, [pc, #48]	@ (80062a0 <MX_USB_DEVICE_Init+0x5c>)
 8006270:	4809      	ldr	r0, [pc, #36]	@ (8006298 <MX_USB_DEVICE_Init+0x54>)
 8006272:	f7fe fc15 	bl	8004aa0 <USBD_CDC_RegisterInterface>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800627c:	f7fa fa42 	bl	8000704 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006280:	4805      	ldr	r0, [pc, #20]	@ (8006298 <MX_USB_DEVICE_Init+0x54>)
 8006282:	f7fe fd43 	bl	8004d0c <USBD_Start>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800628c:	f7fa fa3a 	bl	8000704 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006290:	bf00      	nop
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200000ac 	.word	0x200000ac
 8006298:	20000120 	.word	0x20000120
 800629c:	20000018 	.word	0x20000018
 80062a0:	20000098 	.word	0x20000098

080062a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80062a8:	2200      	movs	r2, #0
 80062aa:	4905      	ldr	r1, [pc, #20]	@ (80062c0 <CDC_Init_FS+0x1c>)
 80062ac:	4805      	ldr	r0, [pc, #20]	@ (80062c4 <CDC_Init_FS+0x20>)
 80062ae:	f7fe fc11 	bl	8004ad4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80062b2:	4905      	ldr	r1, [pc, #20]	@ (80062c8 <CDC_Init_FS+0x24>)
 80062b4:	4803      	ldr	r0, [pc, #12]	@ (80062c4 <CDC_Init_FS+0x20>)
 80062b6:	f7fe fc2f 	bl	8004b18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80062ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80062bc:	4618      	mov	r0, r3
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	200007fc 	.word	0x200007fc
 80062c4:	20000120 	.word	0x20000120
 80062c8:	200003fc 	.word	0x200003fc

080062cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	6039      	str	r1, [r7, #0]
 80062e6:	71fb      	strb	r3, [r7, #7]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	2b23      	cmp	r3, #35	@ 0x23
 80062f0:	d84a      	bhi.n	8006388 <CDC_Control_FS+0xac>
 80062f2:	a201      	add	r2, pc, #4	@ (adr r2, 80062f8 <CDC_Control_FS+0x1c>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006389 	.word	0x08006389
 80062fc:	08006389 	.word	0x08006389
 8006300:	08006389 	.word	0x08006389
 8006304:	08006389 	.word	0x08006389
 8006308:	08006389 	.word	0x08006389
 800630c:	08006389 	.word	0x08006389
 8006310:	08006389 	.word	0x08006389
 8006314:	08006389 	.word	0x08006389
 8006318:	08006389 	.word	0x08006389
 800631c:	08006389 	.word	0x08006389
 8006320:	08006389 	.word	0x08006389
 8006324:	08006389 	.word	0x08006389
 8006328:	08006389 	.word	0x08006389
 800632c:	08006389 	.word	0x08006389
 8006330:	08006389 	.word	0x08006389
 8006334:	08006389 	.word	0x08006389
 8006338:	08006389 	.word	0x08006389
 800633c:	08006389 	.word	0x08006389
 8006340:	08006389 	.word	0x08006389
 8006344:	08006389 	.word	0x08006389
 8006348:	08006389 	.word	0x08006389
 800634c:	08006389 	.word	0x08006389
 8006350:	08006389 	.word	0x08006389
 8006354:	08006389 	.word	0x08006389
 8006358:	08006389 	.word	0x08006389
 800635c:	08006389 	.word	0x08006389
 8006360:	08006389 	.word	0x08006389
 8006364:	08006389 	.word	0x08006389
 8006368:	08006389 	.word	0x08006389
 800636c:	08006389 	.word	0x08006389
 8006370:	08006389 	.word	0x08006389
 8006374:	08006389 	.word	0x08006389
 8006378:	08006389 	.word	0x08006389
 800637c:	08006389 	.word	0x08006389
 8006380:	08006389 	.word	0x08006389
 8006384:	08006389 	.word	0x08006389
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006388:	bf00      	nop
  }

  return (USBD_OK);
 800638a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4805      	ldr	r0, [pc, #20]	@ (80063bc <CDC_Receive_FS+0x24>)
 80063a6:	f7fe fbb7 	bl	8004b18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80063aa:	4804      	ldr	r0, [pc, #16]	@ (80063bc <CDC_Receive_FS+0x24>)
 80063ac:	f7fe fc12 	bl	8004bd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80063b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000120 	.word	0x20000120

080063c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80063d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <CDC_Transmit_FS+0x48>)
 80063d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e00b      	b.n	80063fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4806      	ldr	r0, [pc, #24]	@ (8006408 <CDC_Transmit_FS+0x48>)
 80063ee:	f7fe fb71 	bl	8004ad4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80063f2:	4805      	ldr	r0, [pc, #20]	@ (8006408 <CDC_Transmit_FS+0x48>)
 80063f4:	f7fe fbae 	bl	8004b54 <USBD_CDC_TransmitPacket>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000120 	.word	0x20000120

0800640c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800641e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006422:	4618      	mov	r0, r3
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2212      	movs	r2, #18
 8006440:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006442:	4b03      	ldr	r3, [pc, #12]	@ (8006450 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	200000c8 	.word	0x200000c8

08006454 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2204      	movs	r2, #4
 8006464:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006466:	4b03      	ldr	r3, [pc, #12]	@ (8006474 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	200000dc 	.word	0x200000dc

08006478 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	4907      	ldr	r1, [pc, #28]	@ (80064ac <USBD_FS_ProductStrDescriptor+0x34>)
 800648e:	4808      	ldr	r0, [pc, #32]	@ (80064b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006490:	f7ff fdec 	bl	800606c <USBD_GetString>
 8006494:	e004      	b.n	80064a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	4904      	ldr	r1, [pc, #16]	@ (80064ac <USBD_FS_ProductStrDescriptor+0x34>)
 800649a:	4805      	ldr	r0, [pc, #20]	@ (80064b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800649c:	f7ff fde6 	bl	800606c <USBD_GetString>
  }
  return USBD_StrDesc;
 80064a0:	4b02      	ldr	r3, [pc, #8]	@ (80064ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000bfc 	.word	0x20000bfc
 80064b0:	08006ce8 	.word	0x08006ce8

080064b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	6039      	str	r1, [r7, #0]
 80064be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	4904      	ldr	r1, [pc, #16]	@ (80064d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064c4:	4804      	ldr	r0, [pc, #16]	@ (80064d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064c6:	f7ff fdd1 	bl	800606c <USBD_GetString>
  return USBD_StrDesc;
 80064ca:	4b02      	ldr	r3, [pc, #8]	@ (80064d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20000bfc 	.word	0x20000bfc
 80064d8:	08006d00 	.word	0x08006d00

080064dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	6039      	str	r1, [r7, #0]
 80064e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	221a      	movs	r2, #26
 80064ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80064ee:	f000 f843 	bl	8006578 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80064f2:	4b02      	ldr	r3, [pc, #8]	@ (80064fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	200000e0 	.word	0x200000e0

08006500 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	6039      	str	r1, [r7, #0]
 800650a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	4907      	ldr	r1, [pc, #28]	@ (8006534 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006516:	4808      	ldr	r0, [pc, #32]	@ (8006538 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006518:	f7ff fda8 	bl	800606c <USBD_GetString>
 800651c:	e004      	b.n	8006528 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	4904      	ldr	r1, [pc, #16]	@ (8006534 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006522:	4805      	ldr	r0, [pc, #20]	@ (8006538 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006524:	f7ff fda2 	bl	800606c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006528:	4b02      	ldr	r3, [pc, #8]	@ (8006534 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000bfc 	.word	0x20000bfc
 8006538:	08006d14 	.word	0x08006d14

0800653c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	6039      	str	r1, [r7, #0]
 8006546:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d105      	bne.n	800655a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	4907      	ldr	r1, [pc, #28]	@ (8006570 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006552:	4808      	ldr	r0, [pc, #32]	@ (8006574 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006554:	f7ff fd8a 	bl	800606c <USBD_GetString>
 8006558:	e004      	b.n	8006564 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4904      	ldr	r1, [pc, #16]	@ (8006570 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800655e:	4805      	ldr	r0, [pc, #20]	@ (8006574 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006560:	f7ff fd84 	bl	800606c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006564:	4b02      	ldr	r3, [pc, #8]	@ (8006570 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000bfc 	.word	0x20000bfc
 8006574:	08006d20 	.word	0x08006d20

08006578 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800657e:	4b0f      	ldr	r3, [pc, #60]	@ (80065bc <Get_SerialNum+0x44>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006584:	4b0e      	ldr	r3, [pc, #56]	@ (80065c0 <Get_SerialNum+0x48>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800658a:	4b0e      	ldr	r3, [pc, #56]	@ (80065c4 <Get_SerialNum+0x4c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800659e:	2208      	movs	r2, #8
 80065a0:	4909      	ldr	r1, [pc, #36]	@ (80065c8 <Get_SerialNum+0x50>)
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f814 	bl	80065d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065a8:	2204      	movs	r2, #4
 80065aa:	4908      	ldr	r1, [pc, #32]	@ (80065cc <Get_SerialNum+0x54>)
 80065ac:	68b8      	ldr	r0, [r7, #8]
 80065ae:	f000 f80f 	bl	80065d0 <IntToUnicode>
  }
}
 80065b2:	bf00      	nop
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	1fff7a10 	.word	0x1fff7a10
 80065c0:	1fff7a14 	.word	0x1fff7a14
 80065c4:	1fff7a18 	.word	0x1fff7a18
 80065c8:	200000e2 	.word	0x200000e2
 80065cc:	200000f2 	.word	0x200000f2

080065d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]
 80065e6:	e027      	b.n	8006638 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	0f1b      	lsrs	r3, r3, #28
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d80b      	bhi.n	8006608 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	0f1b      	lsrs	r3, r3, #28
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4619      	mov	r1, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	440b      	add	r3, r1
 8006600:	3230      	adds	r2, #48	@ 0x30
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e00a      	b.n	800661e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	0f1b      	lsrs	r3, r3, #28
 800660c:	b2da      	uxtb	r2, r3
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4619      	mov	r1, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	440b      	add	r3, r1
 8006618:	3237      	adds	r2, #55	@ 0x37
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	3301      	adds	r3, #1
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	4413      	add	r3, r2
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	3301      	adds	r3, #1
 8006636:	75fb      	strb	r3, [r7, #23]
 8006638:	7dfa      	ldrb	r2, [r7, #23]
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	429a      	cmp	r2, r3
 800663e:	d3d3      	bcc.n	80065e8 <IntToUnicode+0x18>
  }
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	@ 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006658:	f107 0314 	add.w	r3, r7, #20
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	609a      	str	r2, [r3, #8]
 8006664:	60da      	str	r2, [r3, #12]
 8006666:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006670:	d13a      	bne.n	80066e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006672:	2300      	movs	r3, #0
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	4b1e      	ldr	r3, [pc, #120]	@ (80066f0 <HAL_PCD_MspInit+0xa0>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	4a1d      	ldr	r2, [pc, #116]	@ (80066f0 <HAL_PCD_MspInit+0xa0>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6313      	str	r3, [r2, #48]	@ 0x30
 8006682:	4b1b      	ldr	r3, [pc, #108]	@ (80066f0 <HAL_PCD_MspInit+0xa0>)
 8006684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800668e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006694:	2302      	movs	r3, #2
 8006696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800669c:	2303      	movs	r3, #3
 800669e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066a0:	230a      	movs	r3, #10
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066a4:	f107 0314 	add.w	r3, r7, #20
 80066a8:	4619      	mov	r1, r3
 80066aa:	4812      	ldr	r0, [pc, #72]	@ (80066f4 <HAL_PCD_MspInit+0xa4>)
 80066ac:	f7fa fa76 	bl	8000b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066b0:	4b0f      	ldr	r3, [pc, #60]	@ (80066f0 <HAL_PCD_MspInit+0xa0>)
 80066b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b4:	4a0e      	ldr	r2, [pc, #56]	@ (80066f0 <HAL_PCD_MspInit+0xa0>)
 80066b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <HAL_PCD_MspInit+0xa0>)
 80066c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c4:	4a0a      	ldr	r2, [pc, #40]	@ (80066f0 <HAL_PCD_MspInit+0xa0>)
 80066c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80066cc:	4b08      	ldr	r3, [pc, #32]	@ (80066f0 <HAL_PCD_MspInit+0xa0>)
 80066ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066d8:	2200      	movs	r2, #0
 80066da:	2100      	movs	r1, #0
 80066dc:	2043      	movs	r0, #67	@ 0x43
 80066de:	f7fa fa26 	bl	8000b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066e2:	2043      	movs	r0, #67	@ 0x43
 80066e4:	f7fa fa3f 	bl	8000b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066e8:	bf00      	nop
 80066ea:	3728      	adds	r7, #40	@ 0x28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40023800 	.word	0x40023800
 80066f4:	40020000 	.word	0x40020000

080066f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f7fe fb49 	bl	8004da6 <USBD_LL_SetupStage>
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	4613      	mov	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	4619      	mov	r1, r3
 8006746:	f7fe fb83 	bl	8004e50 <USBD_LL_DataOutStage>
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	3320      	adds	r3, #32
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	4619      	mov	r1, r3
 800677a:	f7fe fc1c 	bl	8004fb6 <USBD_LL_DataInStage>
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe fd56 	bl	8005246 <USBD_LL_SOF>
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	79db      	ldrb	r3, [r3, #7]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d001      	beq.n	80067ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80067b6:	f7f9 ffa5 	bl	8000704 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067c0:	7bfa      	ldrb	r2, [r7, #15]
 80067c2:	4611      	mov	r1, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fcfa 	bl	80051be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fca2 	bl	800511a <USBD_LL_Reset>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fcf5 	bl	80051de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7adb      	ldrb	r3, [r3, #11]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006814:	4b04      	ldr	r3, [pc, #16]	@ (8006828 <HAL_PCD_SuspendCallback+0x48>)
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	4a03      	ldr	r2, [pc, #12]	@ (8006828 <HAL_PCD_SuspendCallback+0x48>)
 800681a:	f043 0306 	orr.w	r3, r3, #6
 800681e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed00 	.word	0xe000ed00

0800682c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe fceb 	bl	8005216 <USBD_LL_Resume>
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	4611      	mov	r1, r2
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fd43 	bl	80052ea <USBD_LL_IsoOUTIncomplete>
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fcff 	bl	8005286 <USBD_LL_IsoINIncomplete>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fd55 	bl	800534e <USBD_LL_DevConnected>
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fd52 	bl	8005364 <USBD_LL_DevDisconnected>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d13c      	bne.n	8006952 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068d8:	4a20      	ldr	r2, [pc, #128]	@ (800695c <USBD_LL_Init+0x94>)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a1e      	ldr	r2, [pc, #120]	@ (800695c <USBD_LL_Init+0x94>)
 80068e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80068e8:	4b1c      	ldr	r3, [pc, #112]	@ (800695c <USBD_LL_Init+0x94>)
 80068ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80068ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80068f0:	4b1a      	ldr	r3, [pc, #104]	@ (800695c <USBD_LL_Init+0x94>)
 80068f2:	2204      	movs	r2, #4
 80068f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80068f6:	4b19      	ldr	r3, [pc, #100]	@ (800695c <USBD_LL_Init+0x94>)
 80068f8:	2202      	movs	r2, #2
 80068fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80068fc:	4b17      	ldr	r3, [pc, #92]	@ (800695c <USBD_LL_Init+0x94>)
 80068fe:	2200      	movs	r2, #0
 8006900:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006902:	4b16      	ldr	r3, [pc, #88]	@ (800695c <USBD_LL_Init+0x94>)
 8006904:	2202      	movs	r2, #2
 8006906:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006908:	4b14      	ldr	r3, [pc, #80]	@ (800695c <USBD_LL_Init+0x94>)
 800690a:	2200      	movs	r2, #0
 800690c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800690e:	4b13      	ldr	r3, [pc, #76]	@ (800695c <USBD_LL_Init+0x94>)
 8006910:	2200      	movs	r2, #0
 8006912:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006914:	4b11      	ldr	r3, [pc, #68]	@ (800695c <USBD_LL_Init+0x94>)
 8006916:	2200      	movs	r2, #0
 8006918:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800691a:	4b10      	ldr	r3, [pc, #64]	@ (800695c <USBD_LL_Init+0x94>)
 800691c:	2200      	movs	r2, #0
 800691e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006920:	4b0e      	ldr	r3, [pc, #56]	@ (800695c <USBD_LL_Init+0x94>)
 8006922:	2200      	movs	r2, #0
 8006924:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006926:	480d      	ldr	r0, [pc, #52]	@ (800695c <USBD_LL_Init+0x94>)
 8006928:	f7fa faef 	bl	8000f0a <HAL_PCD_Init>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006932:	f7f9 fee7 	bl	8000704 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006936:	2180      	movs	r1, #128	@ 0x80
 8006938:	4808      	ldr	r0, [pc, #32]	@ (800695c <USBD_LL_Init+0x94>)
 800693a:	f7fb fd1c 	bl	8002376 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800693e:	2240      	movs	r2, #64	@ 0x40
 8006940:	2100      	movs	r1, #0
 8006942:	4806      	ldr	r0, [pc, #24]	@ (800695c <USBD_LL_Init+0x94>)
 8006944:	f7fb fcd0 	bl	80022e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006948:	2280      	movs	r2, #128	@ 0x80
 800694a:	2101      	movs	r1, #1
 800694c:	4803      	ldr	r0, [pc, #12]	@ (800695c <USBD_LL_Init+0x94>)
 800694e:	f7fb fccb 	bl	80022e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000dfc 	.word	0x20000dfc

08006960 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006976:	4618      	mov	r0, r3
 8006978:	f7fa fbd6 	bl	8001128 <HAL_PCD_Start>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	4618      	mov	r0, r3
 8006984:	f000 f942 	bl	8006c0c <USBD_Get_USB_Status>
 8006988:	4603      	mov	r3, r0
 800698a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800698c:	7bbb      	ldrb	r3, [r7, #14]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	4608      	mov	r0, r1
 80069a0:	4611      	mov	r1, r2
 80069a2:	461a      	mov	r2, r3
 80069a4:	4603      	mov	r3, r0
 80069a6:	70fb      	strb	r3, [r7, #3]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70bb      	strb	r3, [r7, #2]
 80069ac:	4613      	mov	r3, r2
 80069ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80069be:	78bb      	ldrb	r3, [r7, #2]
 80069c0:	883a      	ldrh	r2, [r7, #0]
 80069c2:	78f9      	ldrb	r1, [r7, #3]
 80069c4:	f7fb f8aa 	bl	8001b1c <HAL_PCD_EP_Open>
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f91c 	bl	8006c0c <USBD_Get_USB_Status>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fb f8f5 	bl	8001bf0 <HAL_PCD_EP_Close>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f8fd 	bl	8006c0c <USBD_Get_USB_Status>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fb f9ad 	bl	8001d9e <HAL_PCD_EP_SetStall>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f8de 	bl	8006c0c <USBD_Get_USB_Status>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a78:	78fa      	ldrb	r2, [r7, #3]
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fb f9f1 	bl	8001e64 <HAL_PCD_EP_ClrStall>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f8bf 	bl	8006c0c <USBD_Get_USB_Status>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006aae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da0b      	bge.n	8006ad0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	3316      	adds	r3, #22
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	e00b      	b.n	8006ae8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006ae6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	4611      	mov	r1, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fa ffde 	bl	8001ad4 <HAL_PCD_SetAddress>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f874 	bl	8006c0c <USBD_Get_USB_Status>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b50:	7af9      	ldrb	r1, [r7, #11]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	f7fb f8e8 	bl	8001d2a <HAL_PCD_EP_Transmit>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 f853 	bl	8006c0c <USBD_Get_USB_Status>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	607a      	str	r2, [r7, #4]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	460b      	mov	r3, r1
 8006b82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b92:	7af9      	ldrb	r1, [r7, #11]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	f7fb f874 	bl	8001c84 <HAL_PCD_EP_Receive>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 f832 	bl	8006c0c <USBD_Get_USB_Status>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bac:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006bc8:	78fa      	ldrb	r2, [r7, #3]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fb f894 	bl	8001cfa <HAL_PCD_EP_GetRxCount>
 8006bd2:	4603      	mov	r3, r0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006be4:	4b03      	ldr	r3, [pc, #12]	@ (8006bf4 <USBD_static_malloc+0x18>)
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	200012e0 	.word	0x200012e0

08006bf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d817      	bhi.n	8006c50 <USBD_Get_USB_Status+0x44>
 8006c20:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <USBD_Get_USB_Status+0x1c>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c3f 	.word	0x08006c3f
 8006c30:	08006c45 	.word	0x08006c45
 8006c34:	08006c4b 	.word	0x08006c4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c3c:	e00b      	b.n	8006c56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	73fb      	strb	r3, [r7, #15]
    break;
 8006c42:	e008      	b.n	8006c56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
    break;
 8006c48:	e005      	b.n	8006c56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c4e:	e002      	b.n	8006c56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c50:	2303      	movs	r3, #3
 8006c52:	73fb      	strb	r3, [r7, #15]
    break;
 8006c54:	bf00      	nop
  }
  return usb_status;
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <memset>:
 8006c64:	4402      	add	r2, r0
 8006c66:	4603      	mov	r3, r0
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d100      	bne.n	8006c6e <memset+0xa>
 8006c6c:	4770      	bx	lr
 8006c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c72:	e7f9      	b.n	8006c68 <memset+0x4>

08006c74 <__libc_init_array>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4d0d      	ldr	r5, [pc, #52]	@ (8006cac <__libc_init_array+0x38>)
 8006c78:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb0 <__libc_init_array+0x3c>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	42a6      	cmp	r6, r4
 8006c82:	d109      	bne.n	8006c98 <__libc_init_array+0x24>
 8006c84:	4d0b      	ldr	r5, [pc, #44]	@ (8006cb4 <__libc_init_array+0x40>)
 8006c86:	4c0c      	ldr	r4, [pc, #48]	@ (8006cb8 <__libc_init_array+0x44>)
 8006c88:	f000 f818 	bl	8006cbc <_init>
 8006c8c:	1b64      	subs	r4, r4, r5
 8006c8e:	10a4      	asrs	r4, r4, #2
 8006c90:	2600      	movs	r6, #0
 8006c92:	42a6      	cmp	r6, r4
 8006c94:	d105      	bne.n	8006ca2 <__libc_init_array+0x2e>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9c:	4798      	blx	r3
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7ee      	b.n	8006c80 <__libc_init_array+0xc>
 8006ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca6:	4798      	blx	r3
 8006ca8:	3601      	adds	r6, #1
 8006caa:	e7f2      	b.n	8006c92 <__libc_init_array+0x1e>
 8006cac:	08006d48 	.word	0x08006d48
 8006cb0:	08006d48 	.word	0x08006d48
 8006cb4:	08006d48 	.word	0x08006d48
 8006cb8:	08006d4c 	.word	0x08006d4c

08006cbc <_init>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_fini>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr
