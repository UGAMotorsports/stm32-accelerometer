
stm-accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080080ec  080080ec  000090ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008204  08008204  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008204  08008204  00009204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800820c  0800820c  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800820c  0800820c  0000920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008210  08008210  00009210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008214  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  200000fc  08008310  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  08008310  0000a554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b2a  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fce  00000000  00000000  0001ac56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abe  00000000  00000000  0001ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018589  00000000  00000000  0001f526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d29  00000000  00000000  00037aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089026  00000000  00000000  0004d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d67fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a5c  00000000  00000000  000d6844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000da2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080080d4 	.word	0x080080d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080080d4 	.word	0x080080d4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	4b31      	ldr	r3, [pc, #196]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a30      	ldr	r2, [pc, #192]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b2e      	ldr	r3, [pc, #184]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b2a      	ldr	r3, [pc, #168]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a29      	ldr	r2, [pc, #164]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
 8000506:	4b27      	ldr	r3, [pc, #156]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b23      	ldr	r3, [pc, #140]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	4a22      	ldr	r2, [pc, #136]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	@ 0x30
 8000522:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a1b      	ldr	r2, [pc, #108]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <MX_GPIO_Init+0xe0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDLight_GPIO_Port, LEDLight_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000550:	4815      	ldr	r0, [pc, #84]	@ (80005a8 <MX_GPIO_Init+0xe4>)
 8000552:	f000 fe39 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2140      	movs	r1, #64	@ 0x40
 800055a:	4814      	ldr	r0, [pc, #80]	@ (80005ac <MX_GPIO_Init+0xe8>)
 800055c:	f000 fe34 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDLight_Pin */
  GPIO_InitStruct.Pin = LEDLight_Pin;
 8000560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDLight_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	480b      	ldr	r0, [pc, #44]	@ (80005a8 <MX_GPIO_Init+0xe4>)
 800057a:	f000 fca1 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800057e:	2340      	movs	r3, #64	@ 0x40
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	@ (80005ac <MX_GPIO_Init+0xe8>)
 8000596:	f000 fc93 	bl	8000ec0 <HAL_GPIO_Init>

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	@ 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020800 	.word	0x40020800
 80005ac:	40020400 	.word	0x40020400

080005b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005b6:	4a13      	ldr	r2, [pc, #76]	@ (8000604 <MX_I2C1_Init+0x54>)
 80005b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005bc:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <MX_I2C1_Init+0x58>)
 80005be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_I2C1_Init+0x50>)
 80005ee:	f000 fe05 	bl	80011fc <HAL_I2C_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f8:	f000 fa16 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000118 	.word	0x20000118
 8000604:	40005400 	.word	0x40005400
 8000608:	000186a0 	.word	0x000186a0

0800060c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a19      	ldr	r2, [pc, #100]	@ (8000690 <HAL_I2C_MspInit+0x84>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d12c      	bne.n	8000688 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <HAL_I2C_MspInit+0x88>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <HAL_I2C_MspInit+0x88>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <HAL_I2C_MspInit+0x88>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800064a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800064e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000650:	2312      	movs	r3, #18
 8000652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000658:	2303      	movs	r3, #3
 800065a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800065c:	2304      	movs	r3, #4
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	480c      	ldr	r0, [pc, #48]	@ (8000698 <HAL_I2C_MspInit+0x8c>)
 8000668:	f000 fc2a 	bl	8000ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <HAL_I2C_MspInit+0x88>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_I2C_MspInit+0x88>)
 8000676:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <HAL_I2C_MspInit+0x88>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40005400 	.word	0x40005400
 8000694:	40023800 	.word	0x40023800
 8000698:	40020400 	.word	0x40020400

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b0aa      	sub	sp, #168	@ 0xa8
 80006a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 fa65 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f953 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f7ff ff0b 	bl	80004c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ae:	f7ff ff7f 	bl	80005b0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80006b2:	f006 ff77 	bl	80075a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t result = 0x0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &result, 1, 100);
 80006bc:	2364      	movs	r3, #100	@ 0x64
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	f107 0391 	add.w	r3, r7, #145	@ 0x91
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	2275      	movs	r2, #117	@ 0x75
 80006ce:	21d0      	movs	r1, #208	@ 0xd0
 80006d0:	4896      	ldr	r0, [pc, #600]	@ (800092c <main+0x290>)
 80006d2:	f000 ffd1 	bl	8001678 <HAL_I2C_Mem_Read>
  HAL_Delay (1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006da:	f000 fabb 	bl	8000c54 <HAL_Delay>

  if (result == 0x68) {
 80006de:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80006e2:	2b68      	cmp	r3, #104	@ 0x68
 80006e4:	d15b      	bne.n	800079e <main+0x102>
	  uint8_t send[] = "the device was found\r\n";
 80006e6:	4b92      	ldr	r3, [pc, #584]	@ (8000930 <main+0x294>)
 80006e8:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 80006ec:	461d      	mov	r5, r3
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006f6:	6020      	str	r0, [r4, #0]
 80006f8:	3404      	adds	r4, #4
 80006fa:	8021      	strh	r1, [r4, #0]
 80006fc:	3402      	adds	r4, #2
 80006fe:	0c0b      	lsrs	r3, r1, #16
 8000700:	7023      	strb	r3, [r4, #0]
	  CDC_Transmit_FS (send, (uint16_t)sizeof(send));
 8000702:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000706:	2117      	movs	r1, #23
 8000708:	4618      	mov	r0, r3
 800070a:	f007 f809 	bl	8007720 <CDC_Transmit_FS>
	  HAL_Delay (10);
 800070e:	200a      	movs	r0, #10
 8000710:	f000 faa0 	bl	8000c54 <HAL_Delay>
	  uint8_t data;
	  data = 0x00;
 8000714:	2300      	movs	r3, #0
 8000716:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x6B, 1, &data, 1, 500); //initialize mpu clock
 800071a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800071e:	9302      	str	r3, [sp, #8]
 8000720:	2301      	movs	r3, #1
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	226b      	movs	r2, #107	@ 0x6b
 800072e:	21d0      	movs	r1, #208	@ 0xd0
 8000730:	487e      	ldr	r0, [pc, #504]	@ (800092c <main+0x290>)
 8000732:	f000 fea7 	bl	8001484 <HAL_I2C_Mem_Write>
	  data = 0x07;
 8000736:	2307      	movs	r3, #7
 8000738:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x19, 1, &data, 1, 500); //measurement poll rate of 1 khz
 800073c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	2301      	movs	r3, #1
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2301      	movs	r3, #1
 800074e:	2219      	movs	r2, #25
 8000750:	21d0      	movs	r1, #208	@ 0xd0
 8000752:	4876      	ldr	r0, [pc, #472]	@ (800092c <main+0x290>)
 8000754:	f000 fe96 	bl	8001484 <HAL_I2C_Mem_Write>
	  data = 0b00001000;
 8000758:	2308      	movs	r3, #8
 800075a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x1C, 1, &data, 1, 500); //accel set to [-4g, 4g]
 800075e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000762:	9302      	str	r3, [sp, #8]
 8000764:	2301      	movs	r3, #1
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2301      	movs	r3, #1
 8000770:	221c      	movs	r2, #28
 8000772:	21d0      	movs	r1, #208	@ 0xd0
 8000774:	486d      	ldr	r0, [pc, #436]	@ (800092c <main+0x290>)
 8000776:	f000 fe85 	bl	8001484 <HAL_I2C_Mem_Write>
	  data = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x1B, 1, &data, 1, 500); //gyro set to [-250degree/sec, 250degree/sec]
 8000780:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000784:	9302      	str	r3, [sp, #8]
 8000786:	2301      	movs	r3, #1
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	221b      	movs	r2, #27
 8000794:	21d0      	movs	r1, #208	@ 0xd0
 8000796:	4865      	ldr	r0, [pc, #404]	@ (800092c <main+0x290>)
 8000798:	f000 fe74 	bl	8001484 <HAL_I2C_Mem_Write>
 800079c:	e02e      	b.n	80007fc <main+0x160>
  } else {
	  uint8_t send[] = "          \r\n";
 800079e:	4b65      	ldr	r3, [pc, #404]	@ (8000934 <main+0x298>)
 80007a0:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 80007a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a6:	c407      	stmia	r4!, {r0, r1, r2}
 80007a8:	7023      	strb	r3, [r4, #0]
	  itoa(result, (char*)send, 10);
 80007aa:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80007ae:	4618      	mov	r0, r3
 80007b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80007b4:	220a      	movs	r2, #10
 80007b6:	4619      	mov	r1, r3
 80007b8:	f007 fc1c 	bl	8007ff4 <itoa>
	  HAL_Delay (10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f000 fa49 	bl	8000c54 <HAL_Delay>
	  CDC_Transmit_FS (send, sizeof(send));
 80007c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80007c6:	210d      	movs	r1, #13
 80007c8:	4618      	mov	r0, r3
 80007ca:	f006 ffa9 	bl	8007720 <CDC_Transmit_FS>
	  HAL_Delay (10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f000 fa40 	bl	8000c54 <HAL_Delay>
	  uint8_t errormessage[] = "there was an error\r\n";
 80007d4:	4b58      	ldr	r3, [pc, #352]	@ (8000938 <main+0x29c>)
 80007d6:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80007da:	461d      	mov	r5, r3
 80007dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e4:	6020      	str	r0, [r4, #0]
 80007e6:	3404      	adds	r4, #4
 80007e8:	7021      	strb	r1, [r4, #0]
	  CDC_Transmit_FS (errormessage, sizeof(errormessage));
 80007ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007ee:	2115      	movs	r1, #21
 80007f0:	4618      	mov	r0, r3
 80007f2:	f006 ff95 	bl	8007720 <CDC_Transmit_FS>
	  HAL_Delay (10);
 80007f6:	200a      	movs	r0, #10
 80007f8:	f000 fa2c 	bl	8000c54 <HAL_Delay>

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
	  //HAL_Delay (150);

	  uint8_t acceldata[] = {0, 0, 0, 0, 0, 0};
 80007fc:	4a4f      	ldr	r2, [pc, #316]	@ (800093c <main+0x2a0>)
 80007fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000806:	6018      	str	r0, [r3, #0]
 8000808:	3304      	adds	r3, #4
 800080a:	8019      	strh	r1, [r3, #0]
	  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, acceldata, 6, 1000);
 800080c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	2306      	movs	r3, #6
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	223b      	movs	r2, #59	@ 0x3b
 8000820:	21d0      	movs	r1, #208	@ 0xd0
 8000822:	4842      	ldr	r0, [pc, #264]	@ (800092c <main+0x290>)
 8000824:	f000 ff28 	bl	8001678 <HAL_I2C_Mem_Read>
	  HAL_Delay(100);
 8000828:	2064      	movs	r0, #100	@ 0x64
 800082a:	f000 fa13 	bl	8000c54 <HAL_Delay>
	  if ((acceldata[2] == 0) && (acceldata[3] == 0)) {
 800082e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000832:	2b00      	cmp	r3, #0
 8000834:	d112      	bne.n	800085c <main+0x1c0>
 8000836:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10e      	bne.n	800085c <main+0x1c0>
		  uint8_t erroraccel[] = "error getting data\r\n";
 800083e:	4b40      	ldr	r3, [pc, #256]	@ (8000940 <main+0x2a4>)
 8000840:	463c      	mov	r4, r7
 8000842:	461d      	mov	r5, r3
 8000844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000848:	e895 0003 	ldmia.w	r5, {r0, r1}
 800084c:	6020      	str	r0, [r4, #0]
 800084e:	3404      	adds	r4, #4
 8000850:	7021      	strb	r1, [r4, #0]
		  CDC_Transmit_FS (erroraccel, sizeof(erroraccel));
 8000852:	463b      	mov	r3, r7
 8000854:	2115      	movs	r1, #21
 8000856:	4618      	mov	r0, r3
 8000858:	f006 ff62 	bl	8007720 <CDC_Transmit_FS>
	  }
	  int16_t rawx = (uint16_t)(acceldata[0] << 8 | acceldata[1]);
 800085c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	b21a      	sxth	r2, r3
 8000864:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000868:	b21b      	sxth	r3, r3
 800086a:	4313      	orrs	r3, r2
 800086c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	  int16_t rawy = (uint16_t)(acceldata[2] << 8 | acceldata[3]);
 8000870:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000874:	021b      	lsls	r3, r3, #8
 8000876:	b21a      	sxth	r2, r3
 8000878:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	  int16_t rawz = (uint16_t)(acceldata[4] << 8 | acceldata[5]);
 8000884:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
	  HAL_Delay(50);
 8000898:	2032      	movs	r0, #50	@ 0x32
 800089a:	f000 f9db 	bl	8000c54 <HAL_Delay>
	  uint8_t bufferx[] = "        : x\r\n";
 800089e:	4b29      	ldr	r3, [pc, #164]	@ (8000944 <main+0x2a8>)
 80008a0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80008a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a6:	c407      	stmia	r4!, {r0, r1, r2}
 80008a8:	8023      	strh	r3, [r4, #0]
	  uint8_t buffery[] = "        : y\r\n";
 80008aa:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <main+0x2ac>)
 80008ac:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80008b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b2:	c407      	stmia	r4!, {r0, r1, r2}
 80008b4:	8023      	strh	r3, [r4, #0]
	  uint8_t bufferz[] = "        : z\r\n\r\n";
 80008b6:	4b25      	ldr	r3, [pc, #148]	@ (800094c <main+0x2b0>)
 80008b8:	f107 0418 	add.w	r4, r7, #24
 80008bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  itoa(rawx, (char*)bufferx, 10);
 80008c2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 80008c6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80008ca:	220a      	movs	r2, #10
 80008cc:	4618      	mov	r0, r3
 80008ce:	f007 fb91 	bl	8007ff4 <itoa>
	  itoa(rawy, (char*)buffery, 10);
 80008d2:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80008d6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80008da:	220a      	movs	r2, #10
 80008dc:	4618      	mov	r0, r3
 80008de:	f007 fb89 	bl	8007ff4 <itoa>
	  itoa(rawz, (char*)bufferz, 10);
 80008e2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 80008e6:	f107 0118 	add.w	r1, r7, #24
 80008ea:	220a      	movs	r2, #10
 80008ec:	4618      	mov	r0, r3
 80008ee:	f007 fb81 	bl	8007ff4 <itoa>
	  CDC_Transmit_FS (bufferx, sizeof(bufferx));
 80008f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008f6:	210e      	movs	r1, #14
 80008f8:	4618      	mov	r0, r3
 80008fa:	f006 ff11 	bl	8007720 <CDC_Transmit_FS>
	  HAL_Delay(2);
 80008fe:	2002      	movs	r0, #2
 8000900:	f000 f9a8 	bl	8000c54 <HAL_Delay>
	  CDC_Transmit_FS (buffery, sizeof(buffery));
 8000904:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000908:	210e      	movs	r1, #14
 800090a:	4618      	mov	r0, r3
 800090c:	f006 ff08 	bl	8007720 <CDC_Transmit_FS>
	  HAL_Delay(2);
 8000910:	2002      	movs	r0, #2
 8000912:	f000 f99f 	bl	8000c54 <HAL_Delay>
	  CDC_Transmit_FS (bufferz, sizeof(bufferz));
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2110      	movs	r1, #16
 800091c:	4618      	mov	r0, r3
 800091e:	f006 feff 	bl	8007720 <CDC_Transmit_FS>
	  HAL_Delay(20);
 8000922:	2014      	movs	r0, #20
 8000924:	f000 f996 	bl	8000c54 <HAL_Delay>
  {
 8000928:	e768      	b.n	80007fc <main+0x160>
 800092a:	bf00      	nop
 800092c:	20000118 	.word	0x20000118
 8000930:	080080ec 	.word	0x080080ec
 8000934:	08008104 	.word	0x08008104
 8000938:	08008114 	.word	0x08008114
 800093c:	0800812c 	.word	0x0800812c
 8000940:	08008134 	.word	0x08008134
 8000944:	0800814c 	.word	0x0800814c
 8000948:	0800815c 	.word	0x0800815c
 800094c:	0800816c 	.word	0x0800816c

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	@ 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	@ 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f007 fb8c 	bl	800807c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <SystemClock_Config+0xd0>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	4a28      	ldr	r2, [pc, #160]	@ (8000a20 <SystemClock_Config+0xd0>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	@ 0x40
 8000984:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <SystemClock_Config+0xd0>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <SystemClock_Config+0xd4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800099c:	4a21      	ldr	r2, [pc, #132]	@ (8000a24 <SystemClock_Config+0xd4>)
 800099e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <SystemClock_Config+0xd4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009c4:	2319      	movs	r3, #25
 80009c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009d2:	2307      	movs	r3, #7
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fe84 	bl	80036e8 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009e6:	f000 f81f 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 f8e6 	bl	8003bd8 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a12:	f000 f809 	bl	8000a28 <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	@ 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <NMI_Handler+0x4>

08000a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ada:	f000 f89b 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <OTG_FS_IRQHandler+0x10>)
 8000aea:	f001 fcef 	bl	80024cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000e50 	.word	0x20000e50

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b20:	f7ff ffea 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f007 fa9f 	bl	800808c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fda5 	bl	800069c <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000b60:	08008214 	.word	0x08008214
  ldr r2, =_sbss
 8000b64:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000b68:	20001554 	.word	0x20001554

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f94f 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff ff46 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f967 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f92f 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	2000016c 	.word	0x2000016c

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000016c 	.word	0x2000016c

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_Delay+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	@ (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff29 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff3e 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff8e 	bl	8000d90 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff31 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffa2 	bl	8000df8 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e159      	b.n	8001190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f040 8148 	bne.w	800118a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d130      	bne.n	8000f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d017      	beq.n	8000fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d123      	bne.n	8001004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	69b9      	ldr	r1, [r7, #24]
 8001000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0203 	and.w	r2, r3, #3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80a2 	beq.w	800118a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b57      	ldr	r3, [pc, #348]	@ (80011a8 <HAL_GPIO_Init+0x2e8>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a56      	ldr	r2, [pc, #344]	@ (80011a8 <HAL_GPIO_Init+0x2e8>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b54      	ldr	r3, [pc, #336]	@ (80011a8 <HAL_GPIO_Init+0x2e8>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001062:	4a52      	ldr	r2, [pc, #328]	@ (80011ac <HAL_GPIO_Init+0x2ec>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a49      	ldr	r2, [pc, #292]	@ (80011b0 <HAL_GPIO_Init+0x2f0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d019      	beq.n	80010c2 <HAL_GPIO_Init+0x202>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a48      	ldr	r2, [pc, #288]	@ (80011b4 <HAL_GPIO_Init+0x2f4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x1fe>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a47      	ldr	r2, [pc, #284]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x1fa>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a46      	ldr	r2, [pc, #280]	@ (80011bc <HAL_GPIO_Init+0x2fc>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x1f6>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a45      	ldr	r2, [pc, #276]	@ (80011c0 <HAL_GPIO_Init+0x300>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x1f2>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010b2:	2307      	movs	r3, #7
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	@ (80011ac <HAL_GPIO_Init+0x2ec>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b38      	ldr	r3, [pc, #224]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001106:	4a2f      	ldr	r2, [pc, #188]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110c:	4b2d      	ldr	r3, [pc, #180]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001130:	4a24      	ldr	r2, [pc, #144]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001136:	4b23      	ldr	r3, [pc, #140]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115a:	4a1a      	ldr	r2, [pc, #104]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001184:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f aea2 	bls.w	8000edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40013c00 	.word	0x40013c00

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e12b      	b.n	8001466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f9f2 	bl	800060c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2224      	movs	r2, #36	@ 0x24
 800122c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800124e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800125e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001260:	f002 fe72 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a81      	ldr	r2, [pc, #516]	@ (8001470 <HAL_I2C_Init+0x274>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d807      	bhi.n	8001280 <HAL_I2C_Init+0x84>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4a80      	ldr	r2, [pc, #512]	@ (8001474 <HAL_I2C_Init+0x278>)
 8001274:	4293      	cmp	r3, r2
 8001276:	bf94      	ite	ls
 8001278:	2301      	movls	r3, #1
 800127a:	2300      	movhi	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	e006      	b.n	800128e <HAL_I2C_Init+0x92>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4a7d      	ldr	r2, [pc, #500]	@ (8001478 <HAL_I2C_Init+0x27c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	bf94      	ite	ls
 8001288:	2301      	movls	r3, #1
 800128a:	2300      	movhi	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e0e7      	b.n	8001466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4a78      	ldr	r2, [pc, #480]	@ (800147c <HAL_I2C_Init+0x280>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9b      	lsrs	r3, r3, #18
 80012a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001470 <HAL_I2C_Init+0x274>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d802      	bhi.n	80012d0 <HAL_I2C_Init+0xd4>
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3301      	adds	r3, #1
 80012ce:	e009      	b.n	80012e4 <HAL_I2C_Init+0xe8>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	4a69      	ldr	r2, [pc, #420]	@ (8001480 <HAL_I2C_Init+0x284>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	099b      	lsrs	r3, r3, #6
 80012e2:	3301      	adds	r3, #1
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	430b      	orrs	r3, r1
 80012ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	495c      	ldr	r1, [pc, #368]	@ (8001470 <HAL_I2C_Init+0x274>)
 8001300:	428b      	cmp	r3, r1
 8001302:	d819      	bhi.n	8001338 <HAL_I2C_Init+0x13c>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1e59      	subs	r1, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001312:	1c59      	adds	r1, r3, #1
 8001314:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001318:	400b      	ands	r3, r1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00a      	beq.n	8001334 <HAL_I2C_Init+0x138>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1e59      	subs	r1, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fbb1 f3f3 	udiv	r3, r1, r3
 800132c:	3301      	adds	r3, #1
 800132e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001332:	e051      	b.n	80013d8 <HAL_I2C_Init+0x1dc>
 8001334:	2304      	movs	r3, #4
 8001336:	e04f      	b.n	80013d8 <HAL_I2C_Init+0x1dc>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d111      	bne.n	8001364 <HAL_I2C_Init+0x168>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1e58      	subs	r0, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	440b      	add	r3, r1
 800134e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001352:	3301      	adds	r3, #1
 8001354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	e012      	b.n	800138a <HAL_I2C_Init+0x18e>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1e58      	subs	r0, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	0099      	lsls	r1, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	fbb0 f3f3 	udiv	r3, r0, r3
 800137a:	3301      	adds	r3, #1
 800137c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_I2C_Init+0x196>
 800138e:	2301      	movs	r3, #1
 8001390:	e022      	b.n	80013d8 <HAL_I2C_Init+0x1dc>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10e      	bne.n	80013b8 <HAL_I2C_Init+0x1bc>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1e58      	subs	r0, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6859      	ldr	r1, [r3, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	440b      	add	r3, r1
 80013a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013b6:	e00f      	b.n	80013d8 <HAL_I2C_Init+0x1dc>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e58      	subs	r0, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	0099      	lsls	r1, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ce:	3301      	adds	r3, #1
 80013d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	6809      	ldr	r1, [r1, #0]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69da      	ldr	r2, [r3, #28]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001406:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6911      	ldr	r1, [r2, #16]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68d2      	ldr	r2, [r2, #12]
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	430b      	orrs	r3, r1
 800141a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2220      	movs	r2, #32
 8001452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	000186a0 	.word	0x000186a0
 8001474:	001e847f 	.word	0x001e847f
 8001478:	003d08ff 	.word	0x003d08ff
 800147c:	431bde83 	.word	0x431bde83
 8001480:	10624dd3 	.word	0x10624dd3

08001484 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4603      	mov	r3, r0
 8001494:	817b      	strh	r3, [r7, #10]
 8001496:	460b      	mov	r3, r1
 8001498:	813b      	strh	r3, [r7, #8]
 800149a:	4613      	mov	r3, r2
 800149c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800149e:	f7ff fbcd 	bl	8000c3c <HAL_GetTick>
 80014a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b20      	cmp	r3, #32
 80014ae:	f040 80d9 	bne.w	8001664 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2319      	movs	r3, #25
 80014b8:	2201      	movs	r2, #1
 80014ba:	496d      	ldr	r1, [pc, #436]	@ (8001670 <HAL_I2C_Mem_Write+0x1ec>)
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 fc8b 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80014c8:	2302      	movs	r3, #2
 80014ca:	e0cc      	b.n	8001666 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_I2C_Mem_Write+0x56>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e0c5      	b.n	8001666 <HAL_I2C_Mem_Write+0x1e2>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d007      	beq.n	8001500 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800150e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2221      	movs	r2, #33	@ 0x21
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2240      	movs	r2, #64	@ 0x40
 800151c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a3a      	ldr	r2, [r7, #32]
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001530:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4a4d      	ldr	r2, [pc, #308]	@ (8001674 <HAL_I2C_Mem_Write+0x1f0>)
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001542:	88f8      	ldrh	r0, [r7, #6]
 8001544:	893a      	ldrh	r2, [r7, #8]
 8001546:	8979      	ldrh	r1, [r7, #10]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fac2 	bl	8001adc <I2C_RequestMemoryWrite>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d052      	beq.n	8001604 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e081      	b.n	8001666 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fd50 	bl	800200c <I2C_WaitOnTXEFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00d      	beq.n	800158e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	2b04      	cmp	r3, #4
 8001578:	d107      	bne.n	800158a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e06b      	b.n	8001666 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d11b      	bne.n	8001604 <HAL_I2C_Mem_Write+0x180>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d017      	beq.n	8001604 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ee:	3b01      	subs	r3, #1
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1aa      	bne.n	8001562 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 fd43 	bl	800209c <I2C_WaitOnBTFFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00d      	beq.n	8001638 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	2b04      	cmp	r3, #4
 8001622:	d107      	bne.n	8001634 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001632:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e016      	b.n	8001666 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	e000      	b.n	8001666 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001664:	2302      	movs	r3, #2
  }
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	00100002 	.word	0x00100002
 8001674:	ffff0000 	.word	0xffff0000

08001678 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af02      	add	r7, sp, #8
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	4603      	mov	r3, r0
 8001688:	817b      	strh	r3, [r7, #10]
 800168a:	460b      	mov	r3, r1
 800168c:	813b      	strh	r3, [r7, #8]
 800168e:	4613      	mov	r3, r2
 8001690:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001692:	f7ff fad3 	bl	8000c3c <HAL_GetTick>
 8001696:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	f040 8214 	bne.w	8001ace <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2319      	movs	r3, #25
 80016ac:	2201      	movs	r2, #1
 80016ae:	497b      	ldr	r1, [pc, #492]	@ (800189c <HAL_I2C_Mem_Read+0x224>)
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 fb91 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80016bc:	2302      	movs	r3, #2
 80016be:	e207      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_I2C_Mem_Read+0x56>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e200      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d007      	beq.n	80016f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2222      	movs	r2, #34	@ 0x22
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2240      	movs	r2, #64	@ 0x40
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001724:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4a5b      	ldr	r2, [pc, #364]	@ (80018a0 <HAL_I2C_Mem_Read+0x228>)
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001736:	88f8      	ldrh	r0, [r7, #6]
 8001738:	893a      	ldrh	r2, [r7, #8]
 800173a:	8979      	ldrh	r1, [r7, #10]
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4603      	mov	r3, r0
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fa5e 	bl	8001c08 <I2C_RequestMemoryRead>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1bc      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d113      	bne.n	8001786 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e190      	b.n	8001aa8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11b      	bne.n	80017c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800179c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e170      	b.n	8001aa8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d11b      	bne.n	8001806 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	e150      	b.n	8001aa8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800181c:	e144      	b.n	8001aa8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001822:	2b03      	cmp	r3, #3
 8001824:	f200 80f1 	bhi.w	8001a0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182c:	2b01      	cmp	r3, #1
 800182e:	d123      	bne.n	8001878 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001832:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 fc79 	bl	800212c <I2C_WaitOnRXNEFlagUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e145      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001876:	e117      	b.n	8001aa8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187c:	2b02      	cmp	r3, #2
 800187e:	d14e      	bne.n	800191e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001886:	2200      	movs	r2, #0
 8001888:	4906      	ldr	r1, [pc, #24]	@ (80018a4 <HAL_I2C_Mem_Read+0x22c>)
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 faa4 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e11a      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
 800189a:	bf00      	nop
 800189c:	00100002 	.word	0x00100002
 80018a0:	ffff0000 	.word	0xffff0000
 80018a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800191c:	e0c4      	b.n	8001aa8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001924:	2200      	movs	r2, #0
 8001926:	496c      	ldr	r1, [pc, #432]	@ (8001ad8 <HAL_I2C_Mem_Read+0x460>)
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 fa55 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0cb      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001980:	2200      	movs	r2, #0
 8001982:	4955      	ldr	r1, [pc, #340]	@ (8001ad8 <HAL_I2C_Mem_Read+0x460>)
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 fa27 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e09d      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a08:	e04e      	b.n	8001aa8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fb8c 	bl	800212c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e058      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d124      	bne.n	8001aa8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a74:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f47f aeb6 	bne.w	800181e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001ace:	2302      	movs	r3, #2
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3728      	adds	r7, #40	@ 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	00010004 	.word	0x00010004

08001adc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	817b      	strh	r3, [r7, #10]
 8001aee:	460b      	mov	r3, r1
 8001af0:	813b      	strh	r3, [r7, #8]
 8001af2:	4613      	mov	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f960 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00d      	beq.n	8001b3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b2c:	d103      	bne.n	8001b36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e05f      	b.n	8001bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	492d      	ldr	r1, [pc, #180]	@ (8001c04 <I2C_RequestMemoryWrite+0x128>)
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f9bb 	bl	8001ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e04c      	b.n	8001bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b78:	6a39      	ldr	r1, [r7, #32]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fa46 	bl	800200c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d107      	bne.n	8001b9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e02b      	b.n	8001bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ba8:	893b      	ldrh	r3, [r7, #8]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	e021      	b.n	8001bf8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bb4:	893b      	ldrh	r3, [r7, #8]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fa20 	bl	800200c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d107      	bne.n	8001bea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e005      	b.n	8001bfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bee:	893b      	ldrh	r3, [r7, #8]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	00010002 	.word	0x00010002

08001c08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	817b      	strh	r3, [r7, #10]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	813b      	strh	r3, [r7, #8]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f8c2 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00d      	beq.n	8001c76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c68:	d103      	bne.n	8001c72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0aa      	b.n	8001dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c76:	897b      	ldrh	r3, [r7, #10]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	6a3a      	ldr	r2, [r7, #32]
 8001c8a:	4952      	ldr	r1, [pc, #328]	@ (8001dd4 <I2C_RequestMemoryRead+0x1cc>)
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f91d 	bl	8001ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e097      	b.n	8001dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb4:	6a39      	ldr	r1, [r7, #32]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f9a8 	bl	800200c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00d      	beq.n	8001cde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d107      	bne.n	8001cda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e076      	b.n	8001dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce4:	893b      	ldrh	r3, [r7, #8]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	e021      	b.n	8001d34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001cf0:	893b      	ldrh	r3, [r7, #8]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d00:	6a39      	ldr	r1, [r7, #32]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f982 	bl	800200c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00d      	beq.n	8001d2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d107      	bne.n	8001d26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e050      	b.n	8001dcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d2a:	893b      	ldrh	r3, [r7, #8]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d36:	6a39      	ldr	r1, [r7, #32]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f967 	bl	800200c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00d      	beq.n	8001d60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d107      	bne.n	8001d5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e035      	b.n	8001dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f82b 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d96:	d103      	bne.n	8001da0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e013      	b.n	8001dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001da4:	897b      	ldrh	r3, [r7, #10]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	4906      	ldr	r1, [pc, #24]	@ (8001dd4 <I2C_RequestMemoryRead+0x1cc>)
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f886 	bl	8001ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	00010002 	.word	0x00010002

08001dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de8:	e048      	b.n	8001e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d044      	beq.n	8001e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7fe ff23 	bl	8000c3c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d139      	bne.n	8001e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	0c1b      	lsrs	r3, r3, #16
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10d      	bne.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	e00c      	b.n	8001e48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	43da      	mvns	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d116      	bne.n	8001e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f043 0220 	orr.w	r2, r3, #32
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e023      	b.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	0c1b      	lsrs	r3, r3, #16
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10d      	bne.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	e00c      	b.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4013      	ands	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d093      	beq.n	8001dea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eda:	e071      	b.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eea:	d123      	bne.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e067      	b.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3a:	d041      	beq.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3c:	f7fe fe7e 	bl	8000c3c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d302      	bcc.n	8001f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d136      	bne.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10c      	bne.n	8001f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4013      	ands	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e00b      	b.n	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4013      	ands	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e021      	b.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10c      	bne.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e00b      	b.n	8001ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f af6d 	bne.w	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002018:	e034      	b.n	8002084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f8e3 	bl	80021e6 <I2C_IsAcknowledgeFailed>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e034      	b.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d028      	beq.n	8002084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002032:	f7fe fe03 	bl	8000c3c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	429a      	cmp	r2, r3
 8002040:	d302      	bcc.n	8002048 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d11d      	bne.n	8002084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	2b80      	cmp	r3, #128	@ 0x80
 8002054:	d016      	beq.n	8002084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e007      	b.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208e:	2b80      	cmp	r3, #128	@ 0x80
 8002090:	d1c3      	bne.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020a8:	e034      	b.n	8002114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f89b 	bl	80021e6 <I2C_IsAcknowledgeFailed>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e034      	b.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d028      	beq.n	8002114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7fe fdbb 	bl	8000c3c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11d      	bne.n	8002114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d016      	beq.n	8002114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e007      	b.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b04      	cmp	r3, #4
 8002120:	d1c3      	bne.n	80020aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002138:	e049      	b.n	80021ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b10      	cmp	r3, #16
 8002146:	d119      	bne.n	800217c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0210 	mvn.w	r2, #16
 8002150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e030      	b.n	80021de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217c:	f7fe fd5e 	bl	8000c3c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	429a      	cmp	r2, r3
 800218a:	d302      	bcc.n	8002192 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d11d      	bne.n	80021ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219c:	2b40      	cmp	r3, #64	@ 0x40
 800219e:	d016      	beq.n	80021ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f043 0220 	orr.w	r2, r3, #32
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e007      	b.n	80021de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d8:	2b40      	cmp	r3, #64	@ 0x40
 80021da:	d1ae      	bne.n	800213a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fc:	d11b      	bne.n	8002236 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002206:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f043 0204 	orr.w	r2, r3, #4
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af02      	add	r7, sp, #8
 800224a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e101      	b.n	800245a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f005 fb9d 	bl	80079b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002284:	d102      	bne.n	800228c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f001 ff84 	bl	800419e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7c1a      	ldrb	r2, [r3, #16]
 800229e:	f88d 2000 	strb.w	r2, [sp]
 80022a2:	3304      	adds	r3, #4
 80022a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a6:	f001 fe63 	bl	8003f70 <USB_CoreInit>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0ce      	b.n	800245a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 ff7c 	bl	80041c0 <USB_SetCurrentMode>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0bf      	b.n	800245a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e04a      	b.n	8002376 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3315      	adds	r3, #21
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3314      	adds	r3, #20
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	b298      	uxth	r0, r3
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	332e      	adds	r3, #46	@ 0x2e
 800231c:	4602      	mov	r2, r0
 800231e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3318      	adds	r3, #24
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	331c      	adds	r3, #28
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3320      	adds	r3, #32
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3324      	adds	r3, #36	@ 0x24
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	3301      	adds	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	791b      	ldrb	r3, [r3, #4]
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	429a      	cmp	r2, r3
 800237e:	d3af      	bcc.n	80022e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e044      	b.n	8002410 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	3301      	adds	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	791b      	ldrb	r3, [r3, #4]
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	429a      	cmp	r2, r3
 8002418:	d3b5      	bcc.n	8002386 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7c1a      	ldrb	r2, [r3, #16]
 8002422:	f88d 2000 	strb.w	r2, [sp]
 8002426:	3304      	adds	r3, #4
 8002428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242a:	f001 ff15 	bl	8004258 <USB_DevInit>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e00c      	b.n	800245a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f002 ff5f 	bl	8005316 <USB_DevDisconnect>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_Start+0x1c>
 800247a:	2302      	movs	r3, #2
 800247c:	e022      	b.n	80024c4 <HAL_PCD_Start+0x62>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 fe66 	bl	800417c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 ff0d 	bl	80052d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b08d      	sub	sp, #52	@ 0x34
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 ffcb 	bl	800547e <USB_GetMode>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 848c 	bne.w	8002e08 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 ff2f 	bl	8005358 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8482 	beq.w	8002e06 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f002 ff1c 	bl	8005358 <USB_ReadInterrupts>
 8002520:	4603      	mov	r3, r0
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f002 0202 	and.w	r2, r2, #2
 8002538:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f002 ff0a 	bl	8005358 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b10      	cmp	r3, #16
 800254c:	d161      	bne.n	8002612 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0210 	bic.w	r2, r2, #16
 800255c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 020f 	and.w	r2, r3, #15
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	3304      	adds	r3, #4
 800257c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	0c5b      	lsrs	r3, r3, #17
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	2b02      	cmp	r3, #2
 8002588:	d124      	bne.n	80025d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d035      	beq.n	8002602 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6a38      	ldr	r0, [r7, #32]
 80025aa:	f002 fd41 	bl	8005030 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ba:	441a      	add	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025cc:	441a      	add	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	e016      	b.n	8002602 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	0c5b      	lsrs	r3, r3, #17
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d110      	bne.n	8002602 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025e6:	2208      	movs	r2, #8
 80025e8:	4619      	mov	r1, r3
 80025ea:	6a38      	ldr	r0, [r7, #32]
 80025ec:	f002 fd20 	bl	8005030 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fc:	441a      	add	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0210 	orr.w	r2, r2, #16
 8002610:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fe9e 	bl	8005358 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002622:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002626:	f040 80a7 	bne.w	8002778 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f002 fea3 	bl	800537e <USB_ReadDevAllOutEpInterrupt>
 8002638:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800263a:	e099      	b.n	8002770 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 808e 	beq.w	8002764 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f002 fec7 	bl	80053e6 <USB_ReadDevOutEPInterrupt>
 8002658:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	2301      	movs	r3, #1
 8002674:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002676:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fea3 	bl	80033c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002694:	461a      	mov	r2, r3
 8002696:	2308      	movs	r3, #8
 8002698:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800269a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 ff79 	bl	8003594 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b8:	461a      	mov	r2, r3
 80026ba:	2310      	movs	r3, #16
 80026bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d030      	beq.n	800272a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d0:	2b80      	cmp	r3, #128	@ 0x80
 80026d2:	d109      	bne.n	80026e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	78db      	ldrb	r3, [r3, #3]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2200      	movs	r2, #0
 800270a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f005 fa48 	bl	8007ba8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002724:	461a      	mov	r2, r3
 8002726:	2302      	movs	r3, #2
 8002728:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002740:	461a      	mov	r2, r3
 8002742:	2320      	movs	r3, #32
 8002744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002762:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	3301      	adds	r3, #1
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800276a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	f47f af62 	bne.w	800263c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f002 fdeb 	bl	8005358 <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002788:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800278c:	f040 80db 	bne.w	8002946 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f002 fe0c 	bl	80053b2 <USB_ReadDevAllInEpInterrupt>
 800279a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80027a0:	e0cd      	b.n	800293e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80c2 	beq.w	8002932 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fe32 	bl	8005422 <USB_ReadDevInEPInterrupt>
 80027be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d057      	beq.n	800287a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	2201      	movs	r2, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69f9      	ldr	r1, [r7, #28]
 80027e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027ea:	4013      	ands	r3, r2
 80027ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027fa:	461a      	mov	r2, r3
 80027fc:	2301      	movs	r3, #1
 80027fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	799b      	ldrb	r3, [r3, #6]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d132      	bne.n	800286e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3320      	adds	r3, #32
 8002818:	6819      	ldr	r1, [r3, #0]
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4403      	add	r3, r0
 8002828:	331c      	adds	r3, #28
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4419      	add	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4403      	add	r3, r0
 800283c:	3320      	adds	r3, #32
 800283e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d113      	bne.n	800286e <HAL_PCD_IRQHandler+0x3a2>
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	3324      	adds	r3, #36	@ 0x24
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002866:	461a      	mov	r2, r3
 8002868:	2101      	movs	r1, #1
 800286a:	f002 fe39 	bl	80054e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f005 f91c 	bl	8007ab2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002890:	461a      	mov	r2, r3
 8002892:	2308      	movs	r3, #8
 8002894:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ac:	461a      	mov	r2, r3
 80028ae:	2310      	movs	r3, #16
 80028b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c8:	461a      	mov	r2, r3
 80028ca:	2340      	movs	r3, #64	@ 0x40
 80028cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d023      	beq.n	8002920 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028da:	6a38      	ldr	r0, [r7, #32]
 80028dc:	f001 fe20 	bl	8004520 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	3310      	adds	r3, #16
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2200      	movs	r2, #0
 8002900:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f005 f95f 	bl	8007bcc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800291a:	461a      	mov	r2, r3
 800291c:	2302      	movs	r3, #2
 800291e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800292a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fcbd 	bl	80032ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	3301      	adds	r3, #1
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	f47f af2e 	bne.w	80027a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f002 fd04 	bl	8005358 <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800295a:	d122      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002976:	2b01      	cmp	r3, #1
 8002978:	d108      	bne.n	800298c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002982:	2100      	movs	r1, #0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fea3 	bl	80036d0 <HAL_PCDEx_LPM_Callback>
 800298a:	e002      	b.n	8002992 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f005 f8fd 	bl	8007b8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80029a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 fcd6 	bl	8005358 <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029b6:	d112      	bne.n	80029de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f005 f8b9 	bl	8007b40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029dc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 fcb8 	bl	8005358 <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f2:	f040 80b7 	bne.w	8002b64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2110      	movs	r1, #16
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 fd85 	bl	8004520 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a1a:	e046      	b.n	8002aaa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a40:	0151      	lsls	r1, r2, #5
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	440a      	add	r2, r1
 8002a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a94:	0151      	lsls	r1, r2, #5
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	440a      	add	r2, r1
 8002a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002aa2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	791b      	ldrb	r3, [r3, #4]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d3b2      	bcc.n	8002a1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ac4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ac8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7bdb      	ldrb	r3, [r3, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae2:	f043 030b 	orr.w	r3, r3, #11
 8002ae6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002af8:	f043 030b 	orr.w	r3, r3, #11
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	e015      	b.n	8002b2c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b12:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b26:	f043 030b 	orr.w	r3, r3, #11
 8002b2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f002 fcc6 	bl	80054e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fbf5 	bl	8005358 <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b78:	d123      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fc8b 	bl	800549a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 fd42 	bl	8004612 <USB_GetDevSpeed>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681c      	ldr	r4, [r3, #0]
 8002b9a:	f001 f9c9 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8002b9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f001 fa46 	bl	8004038 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f004 ffa8 	bl	8007b02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 fbc6 	bl	8005358 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d10a      	bne.n	8002bec <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f004 ff85 	bl	8007ae6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f002 0208 	and.w	r2, r2, #8
 8002bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f002 fbb1 	bl	8005358 <USB_ReadInterrupts>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfc:	2b80      	cmp	r3, #128	@ 0x80
 8002bfe:	d123      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c10:	e014      	b.n	8002c3c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fb0a 	bl	800324a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	3301      	adds	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	791b      	ldrb	r3, [r3, #4]
 8002c40:	461a      	mov	r2, r3
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d3e4      	bcc.n	8002c12 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fb83 	bl	8005358 <USB_ReadInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c5c:	d13c      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c5e:	2301      	movs	r3, #1
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c62:	e02b      	b.n	8002cbc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3318      	adds	r3, #24
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d115      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da12      	bge.n	8002cb6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3317      	adds	r3, #23
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 faca 	bl	800324a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	3301      	adds	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	791b      	ldrb	r3, [r3, #4]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d3cd      	bcc.n	8002c64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f002 fb3b 	bl	8005358 <USB_ReadInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cec:	d156      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cee:	2301      	movs	r3, #1
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf2:	e045      	b.n	8002d80 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d12e      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	da2b      	bge.n	8002d7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d121      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d76:	6053      	str	r3, [r2, #4]
            break;
 8002d78:	e008      	b.n	8002d8c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	791b      	ldrb	r3, [r3, #4]
 8002d84:	461a      	mov	r2, r3
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d3b3      	bcc.n	8002cf4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fad9 	bl	8005358 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db0:	d10a      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f004 ff1c 	bl	8007bf0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fac3 	bl	8005358 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d115      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f004 ff0c 	bl	8007c0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	e000      	b.n	8002e08 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002e06:	bf00      	nop
    }
  }
}
 8002e08:	3734      	adds	r7, #52	@ 0x34
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}

08002e0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_PCD_SetAddress+0x1a>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e012      	b.n	8002e4e <HAL_PCD_SetAddress+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fa22 	bl	8005288 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	4608      	mov	r0, r1
 8002e60:	4611      	mov	r1, r2
 8002e62:	461a      	mov	r2, r3
 8002e64:	4603      	mov	r3, r0
 8002e66:	70fb      	strb	r3, [r7, #3]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	803b      	strh	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da0f      	bge.n	8002e9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	f003 020f 	and.w	r2, r3, #15
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3310      	adds	r3, #16
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	705a      	strb	r2, [r3, #1]
 8002e9a:	e00f      	b.n	8002ebc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 020f 	and.w	r2, r3, #15
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002ec8:	883b      	ldrh	r3, [r7, #0]
 8002eca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	78ba      	ldrb	r2, [r7, #2]
 8002ed6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	785b      	ldrb	r3, [r3, #1]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eea:	78bb      	ldrb	r3, [r7, #2]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d102      	bne.n	8002ef6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_PCD_EP_Open+0xae>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e00e      	b.n	8002f22 <HAL_PCD_EP_Open+0xcc>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68f9      	ldr	r1, [r7, #12]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f001 fba2 	bl	800465c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f20:	7afb      	ldrb	r3, [r7, #11]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da0f      	bge.n	8002f5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	f003 020f 	and.w	r2, r3, #15
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	3310      	adds	r3, #16
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3304      	adds	r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	705a      	strb	r2, [r3, #1]
 8002f5c:	e00f      	b.n	8002f7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 020f 	and.w	r2, r3, #15
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_PCD_EP_Close+0x6e>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e00e      	b.n	8002fb6 <HAL_PCD_EP_Close+0x8c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68f9      	ldr	r1, [r7, #12]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 fbe0 	bl	800476c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	b2da      	uxtb	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	799b      	ldrb	r3, [r3, #6]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	799b      	ldrb	r3, [r3, #6]
 8003022:	461a      	mov	r2, r3
 8003024:	6979      	ldr	r1, [r7, #20]
 8003026:	f001 fc7d 	bl	8004924 <USB_EPStartXfer>

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	460b      	mov	r3, r1
 8003072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	f003 020f 	and.w	r2, r3, #15
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	3310      	adds	r3, #16
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	3304      	adds	r3, #4
 800308a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2201      	movs	r2, #1
 80030a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a4:	7afb      	ldrb	r3, [r7, #11]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	799b      	ldrb	r3, [r3, #6]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d102      	bne.n	80030be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	799b      	ldrb	r3, [r3, #6]
 80030c6:	461a      	mov	r2, r3
 80030c8:	6979      	ldr	r1, [r7, #20]
 80030ca:	f001 fc2b 	bl	8004924 <USB_EPStartXfer>

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	7912      	ldrb	r2, [r2, #4]
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e04f      	b.n	8003196 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da0f      	bge.n	800311e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	3310      	adds	r3, #16
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	705a      	strb	r2, [r3, #1]
 800311c:	e00d      	b.n	800313a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	3304      	adds	r3, #4
 8003132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_PCD_EP_SetStall+0x82>
 8003156:	2302      	movs	r3, #2
 8003158:	e01d      	b.n	8003196 <HAL_PCD_EP_SetStall+0xbe>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	4618      	mov	r0, r3
 800316a:	f001 ffb9 	bl	80050e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7999      	ldrb	r1, [r3, #6]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003186:	461a      	mov	r2, r3
 8003188:	f002 f9aa 	bl	80054e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	7912      	ldrb	r2, [r2, #4]
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e042      	b.n	8003242 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da0f      	bge.n	80031e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3310      	adds	r3, #16
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	3304      	adds	r3, #4
 80031da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	705a      	strb	r2, [r3, #1]
 80031e2:	e00f      	b.n	8003204 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	3304      	adds	r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_PCD_EP_ClrStall+0x86>
 8003220:	2302      	movs	r3, #2
 8003222:	e00e      	b.n	8003242 <HAL_PCD_EP_ClrStall+0xa4>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68f9      	ldr	r1, [r7, #12]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 ffc2 	bl	80051bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800325a:	2b00      	cmp	r3, #0
 800325c:	da0c      	bge.n	8003278 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3310      	adds	r3, #16
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e00c      	b.n	8003292 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	3304      	adds	r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	f001 fde1 	bl	8004e60 <USB_EPStopXfer>
 800329e:	4603      	mov	r3, r0
 80032a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032a2:	7afb      	ldrb	r3, [r7, #11]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	@ 0x28
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	3310      	adds	r3, #16
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d901      	bls.n	80032e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e06b      	b.n	80033bc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d902      	bls.n	8003300 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	3303      	adds	r3, #3
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003308:	e02a      	b.n	8003360 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	429a      	cmp	r2, r3
 800331e:	d902      	bls.n	8003326 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3303      	adds	r3, #3
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68d9      	ldr	r1, [r3, #12]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	4603      	mov	r3, r0
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f001 fe36 	bl	8004fb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	441a      	add	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	441a      	add	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	429a      	cmp	r2, r3
 8003374:	d809      	bhi.n	800338a <PCD_WriteEmptyTxFifo+0xde>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337e:	429a      	cmp	r2, r3
 8003380:	d203      	bcs.n	800338a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1bf      	bne.n	800330a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	429a      	cmp	r2, r3
 8003394:	d811      	bhi.n	80033ba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	2201      	movs	r2, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	6939      	ldr	r1, [r7, #16]
 80033b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033b6:	4013      	ands	r3, r2
 80033b8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	333c      	adds	r3, #60	@ 0x3c
 80033dc:	3304      	adds	r3, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	799b      	ldrb	r3, [r3, #6]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d17b      	bne.n	80034f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	4a61      	ldr	r2, [pc, #388]	@ (800358c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	f240 80b9 	bls.w	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80b3 	beq.w	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003426:	461a      	mov	r2, r3
 8003428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800342c:	6093      	str	r3, [r2, #8]
 800342e:	e0a7      	b.n	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	2320      	movs	r3, #32
 800344a:	6093      	str	r3, [r2, #8]
 800344c:	e098      	b.n	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 8093 	bne.w	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	4a4b      	ldr	r2, [pc, #300]	@ (800358c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d90f      	bls.n	8003482 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003478:	461a      	mov	r2, r3
 800347a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347e:	6093      	str	r3, [r2, #8]
 8003480:	e07e      	b.n	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	0159      	lsls	r1, r3, #5
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d114      	bne.n	80034e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034cc:	461a      	mov	r2, r3
 80034ce:	2101      	movs	r1, #1
 80034d0:	f002 f806 	bl	80054e0 <USB_EP0_OutStart>
 80034d4:	e006      	b.n	80034e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	441a      	add	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f004 fac6 	bl	8007a7c <HAL_PCD_DataOutStageCallback>
 80034f0:	e046      	b.n	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d124      	bne.n	8003544 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003510:	461a      	mov	r2, r3
 8003512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003516:	6093      	str	r3, [r2, #8]
 8003518:	e032      	b.n	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003530:	461a      	mov	r2, r3
 8003532:	2320      	movs	r3, #32
 8003534:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f004 fa9d 	bl	8007a7c <HAL_PCD_DataOutStageCallback>
 8003542:	e01d      	b.n	8003580 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d114      	bne.n	8003574 <PCD_EP_OutXfrComplete_int+0x1b0>
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800356c:	461a      	mov	r2, r3
 800356e:	2100      	movs	r1, #0
 8003570:	f001 ffb6 	bl	80054e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f004 fa7e 	bl	8007a7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	4f54300a 	.word	0x4f54300a
 8003590:	4f54310a 	.word	0x4f54310a

08003594 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	333c      	adds	r3, #60	@ 0x3c
 80035ac:	3304      	adds	r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a15      	ldr	r2, [pc, #84]	@ (800361c <PCD_EP_OutSetupPacket_int+0x88>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d90e      	bls.n	80035e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e0:	461a      	mov	r2, r3
 80035e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f004 fa35 	bl	8007a58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	@ (800361c <PCD_EP_OutSetupPacket_int+0x88>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d90c      	bls.n	8003610 <PCD_EP_OutSetupPacket_int+0x7c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	799b      	ldrb	r3, [r3, #6]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d108      	bne.n	8003610 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003608:	461a      	mov	r2, r3
 800360a:	2101      	movs	r1, #1
 800360c:	f001 ff68 	bl	80054e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	4f54300a 	.word	0x4f54300a

08003620 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	70fb      	strb	r3, [r7, #3]
 800362c:	4613      	mov	r3, r2
 800362e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800363e:	883b      	ldrh	r3, [r7, #0]
 8003640:	0419      	lsls	r1, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	430a      	orrs	r2, r1
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28
 800364c:	e028      	b.n	80036a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4413      	add	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e00d      	b.n	800367e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	3340      	adds	r3, #64	@ 0x40
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	3301      	adds	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	3b01      	subs	r3, #1
 8003684:	429a      	cmp	r2, r3
 8003686:	d3ec      	bcc.n	8003662 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003688:	883b      	ldrh	r3, [r7, #0]
 800368a:	0418      	lsls	r0, r3, #16
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	3b01      	subs	r3, #1
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	4302      	orrs	r2, r0
 8003698:	3340      	adds	r3, #64	@ 0x40
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e267      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d075      	beq.n	80037f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003706:	4b88      	ldr	r3, [pc, #544]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b04      	cmp	r3, #4
 8003710:	d00c      	beq.n	800372c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003712:	4b85      	ldr	r3, [pc, #532]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800371a:	2b08      	cmp	r3, #8
 800371c:	d112      	bne.n	8003744 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4b82      	ldr	r3, [pc, #520]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800372a:	d10b      	bne.n	8003744 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	4b7e      	ldr	r3, [pc, #504]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05b      	beq.n	80037f0 <HAL_RCC_OscConfig+0x108>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d157      	bne.n	80037f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e242      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x74>
 800374e:	4b76      	ldr	r3, [pc, #472]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a75      	ldr	r2, [pc, #468]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x98>
 8003766:	4b70      	ldr	r3, [pc, #448]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6f      	ldr	r2, [pc, #444]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b6d      	ldr	r3, [pc, #436]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6c      	ldr	r2, [pc, #432]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xb0>
 8003780:	4b69      	ldr	r3, [pc, #420]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a68      	ldr	r2, [pc, #416]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b66      	ldr	r3, [pc, #408]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a65      	ldr	r2, [pc, #404]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd fa4c 	bl	8000c3c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fd fa48 	bl	8000c3c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	@ 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e207      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xc0>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fd fa38 	bl	8000c3c <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fd fa34 	bl	8000c3c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	@ 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1f3      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	4b51      	ldr	r3, [pc, #324]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0xe8>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d063      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b47      	ldr	r3, [pc, #284]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003812:	2b08      	cmp	r3, #8
 8003814:	d11c      	bne.n	8003850 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b44      	ldr	r3, [pc, #272]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	4b41      	ldr	r3, [pc, #260]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x152>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1c7      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	4b3b      	ldr	r3, [pc, #236]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4937      	ldr	r1, [pc, #220]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	e03a      	b.n	80038c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003858:	4b34      	ldr	r3, [pc, #208]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fd f9ed 	bl	8000c3c <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003866:	f7fd f9e9 	bl	8000c3c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1a8      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	4b2b      	ldr	r3, [pc, #172]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b28      	ldr	r3, [pc, #160]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4925      	ldr	r1, [pc, #148]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	4b24      	ldr	r3, [pc, #144]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd f9cc 	bl	8000c3c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fd f9c8 	bl	8000c3c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e187      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d036      	beq.n	8003940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <HAL_RCC_OscConfig+0x248>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fd f9ac 	bl	8000c3c <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fd f9a8 	bl	8000c3c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e167      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_RCC_OscConfig+0x240>)
 80038fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x200>
 8003906:	e01b      	b.n	8003940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003908:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <HAL_RCC_OscConfig+0x248>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390e:	f7fd f995 	bl	8000c3c <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	e00e      	b.n	8003934 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003916:	f7fd f991 	bl	8000c3c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d907      	bls.n	8003934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e150      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
 8003928:	40023800 	.word	0x40023800
 800392c:	42470000 	.word	0x42470000
 8003930:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b88      	ldr	r3, [pc, #544]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ea      	bne.n	8003916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8097 	beq.w	8003a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b81      	ldr	r3, [pc, #516]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	4b7d      	ldr	r3, [pc, #500]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	4a7c      	ldr	r2, [pc, #496]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	@ 0x40
 800396e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b77      	ldr	r3, [pc, #476]	@ (8003b5c <HAL_RCC_OscConfig+0x474>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d118      	bne.n	80039bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398a:	4b74      	ldr	r3, [pc, #464]	@ (8003b5c <HAL_RCC_OscConfig+0x474>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a73      	ldr	r2, [pc, #460]	@ (8003b5c <HAL_RCC_OscConfig+0x474>)
 8003990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003996:	f7fd f951 	bl	8000c3c <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399e:	f7fd f94d 	bl	8000c3c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e10c      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b5c <HAL_RCC_OscConfig+0x474>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <HAL_RCC_OscConfig+0x2ea>
 80039c4:	4b64      	ldr	r3, [pc, #400]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c8:	4a63      	ldr	r2, [pc, #396]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d0:	e01c      	b.n	8003a0c <HAL_RCC_OscConfig+0x324>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x30c>
 80039da:	4b5f      	ldr	r3, [pc, #380]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	4a5e      	ldr	r2, [pc, #376]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0x324>
 80039f4:	4b58      	ldr	r3, [pc, #352]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f8:	4a57      	ldr	r2, [pc, #348]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a00:	4b55      	ldr	r3, [pc, #340]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a04:	4a54      	ldr	r2, [pc, #336]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd f912 	bl	8000c3c <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fd f90e 	bl	8000c3c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0cb      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	4b49      	ldr	r3, [pc, #292]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ee      	beq.n	8003a1c <HAL_RCC_OscConfig+0x334>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a40:	f7fd f8fc 	bl	8000c3c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fd f8f8 	bl	8000c3c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0b5      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ee      	bne.n	8003a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a70:	4b39      	ldr	r3, [pc, #228]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	4a38      	ldr	r2, [pc, #224]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80a1 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a86:	4b34      	ldr	r3, [pc, #208]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d05c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d141      	bne.n	8003b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b31      	ldr	r3, [pc, #196]	@ (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fd f8cc 	bl	8000c3c <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd f8c8 	bl	8000c3c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e087      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	019b      	lsls	r3, r3, #6
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	491b      	ldr	r1, [pc, #108]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fd f8a1 	bl	8000c3c <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fd f89d 	bl	8000c3c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e05c      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x416>
 8003b1c:	e054      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd f88a 	bl	8000c3c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd f886 	bl	8000c3c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e045      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x444>
 8003b4a:	e03d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e038      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x4ec>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d028      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d121      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d11a      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800

08003bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0cc      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bec:	4b68      	ldr	r3, [pc, #416]	@ (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d90c      	bls.n	8003c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b65      	ldr	r3, [pc, #404]	@ (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b63      	ldr	r3, [pc, #396]	@ (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0b8      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c2c:	4b59      	ldr	r3, [pc, #356]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a58      	ldr	r2, [pc, #352]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c44:	4b53      	ldr	r3, [pc, #332]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a52      	ldr	r2, [pc, #328]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c50:	4b50      	ldr	r3, [pc, #320]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	494d      	ldr	r1, [pc, #308]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d044      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b47      	ldr	r3, [pc, #284]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d119      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c96:	4b3f      	ldr	r3, [pc, #252]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e067      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b37      	ldr	r3, [pc, #220]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4934      	ldr	r1, [pc, #208]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fc ffb8 	bl	8000c3c <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fc ffb4 	bl	8000c3c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e04f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b25      	ldr	r3, [pc, #148]	@ (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d20c      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b22      	ldr	r3, [pc, #136]	@ (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e032      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4916      	ldr	r1, [pc, #88]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4a:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	490e      	ldr	r1, [pc, #56]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d5e:	f000 f821 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	490a      	ldr	r1, [pc, #40]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	4a09      	ldr	r2, [pc, #36]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d7a:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fc ff18 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023c00 	.word	0x40023c00
 8003d94:	40023800 	.word	0x40023800
 8003d98:	080081c4 	.word	0x080081c4
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	20000004 	.word	0x20000004

08003da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b090      	sub	sp, #64	@ 0x40
 8003daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dbc:	4b59      	ldr	r3, [pc, #356]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d00d      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x40>
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	f200 80a1 	bhi.w	8003f10 <HAL_RCC_GetSysClockFreq+0x16c>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x3a>
 8003dd6:	e09b      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd8:	4b53      	ldr	r3, [pc, #332]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ddc:	e09b      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dde:	4b53      	ldr	r3, [pc, #332]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003de0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003de2:	e098      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de4:	4b4f      	ldr	r3, [pc, #316]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dee:	4b4d      	ldr	r3, [pc, #308]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d028      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	2200      	movs	r2, #0
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e10:	fb03 f201 	mul.w	r2, r3, r1
 8003e14:	2300      	movs	r3, #0
 8003e16:	fb00 f303 	mul.w	r3, r0, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4a43      	ldr	r2, [pc, #268]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e1e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e24:	460a      	mov	r2, r1
 8003e26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e2a:	4413      	add	r3, r2
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e30:	2200      	movs	r2, #0
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	61fa      	str	r2, [r7, #28]
 8003e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e3e:	f7fc f9c9 	bl	80001d4 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4613      	mov	r3, r2
 8003e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e4a:	e053      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4c:	4b35      	ldr	r3, [pc, #212]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	099b      	lsrs	r3, r3, #6
 8003e52:	2200      	movs	r2, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	617a      	str	r2, [r7, #20]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e5e:	f04f 0b00 	mov.w	fp, #0
 8003e62:	4652      	mov	r2, sl
 8003e64:	465b      	mov	r3, fp
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e74:	0150      	lsls	r0, r2, #5
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	ebb2 080a 	subs.w	r8, r2, sl
 8003e7e:	eb63 090b 	sbc.w	r9, r3, fp
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e96:	ebb2 0408 	subs.w	r4, r2, r8
 8003e9a:	eb63 0509 	sbc.w	r5, r3, r9
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	00eb      	lsls	r3, r5, #3
 8003ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eac:	00e2      	lsls	r2, r4, #3
 8003eae:	4614      	mov	r4, r2
 8003eb0:	461d      	mov	r5, r3
 8003eb2:	eb14 030a 	adds.w	r3, r4, sl
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	eb45 030b 	adc.w	r3, r5, fp
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eca:	4629      	mov	r1, r5
 8003ecc:	028b      	lsls	r3, r1, #10
 8003ece:	4621      	mov	r1, r4
 8003ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	028a      	lsls	r2, r1, #10
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	60fa      	str	r2, [r7, #12]
 8003ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee8:	f7fc f974 	bl	80001d4 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f0e:	e002      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3740      	adds	r7, #64	@ 0x40
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	00f42400 	.word	0x00f42400
 8003f2c:	017d7840 	.word	0x017d7840

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b03      	ldr	r3, [pc, #12]	@ (8003f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000000 	.word	0x20000000

08003f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f4c:	f7ff fff0 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	0a9b      	lsrs	r3, r3, #10
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4903      	ldr	r1, [pc, #12]	@ (8003f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	080081d4 	.word	0x080081d4

08003f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f70:	b084      	sub	sp, #16
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	f107 001c 	add.w	r0, r7, #28
 8003f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d123      	bne.n	8003fd2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f001 fae8 	bl	800559c <USB_CoreReset>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e01b      	b.n	800400a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f001 fadc 	bl	800559c <USB_CoreReset>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fe8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ffc:	e005      	b.n	800400a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004002:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800400a:	7fbb      	ldrb	r3, [r7, #30]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10b      	bne.n	8004028 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f043 0206 	orr.w	r2, r3, #6
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004034:	b004      	add	sp, #16
 8004036:	4770      	bx	lr

08004038 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	4613      	mov	r3, r2
 8004044:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d165      	bne.n	8004118 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4a41      	ldr	r2, [pc, #260]	@ (8004154 <USB_SetTurnaroundTime+0x11c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d906      	bls.n	8004062 <USB_SetTurnaroundTime+0x2a>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4a40      	ldr	r2, [pc, #256]	@ (8004158 <USB_SetTurnaroundTime+0x120>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d202      	bcs.n	8004062 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800405c:	230f      	movs	r3, #15
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e062      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4a3c      	ldr	r2, [pc, #240]	@ (8004158 <USB_SetTurnaroundTime+0x120>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d306      	bcc.n	8004078 <USB_SetTurnaroundTime+0x40>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4a3b      	ldr	r2, [pc, #236]	@ (800415c <USB_SetTurnaroundTime+0x124>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d202      	bcs.n	8004078 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004072:	230e      	movs	r3, #14
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e057      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a38      	ldr	r2, [pc, #224]	@ (800415c <USB_SetTurnaroundTime+0x124>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d306      	bcc.n	800408e <USB_SetTurnaroundTime+0x56>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4a37      	ldr	r2, [pc, #220]	@ (8004160 <USB_SetTurnaroundTime+0x128>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d202      	bcs.n	800408e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004088:	230d      	movs	r3, #13
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e04c      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4a33      	ldr	r2, [pc, #204]	@ (8004160 <USB_SetTurnaroundTime+0x128>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d306      	bcc.n	80040a4 <USB_SetTurnaroundTime+0x6c>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a32      	ldr	r2, [pc, #200]	@ (8004164 <USB_SetTurnaroundTime+0x12c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d802      	bhi.n	80040a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800409e:	230c      	movs	r3, #12
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e041      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004164 <USB_SetTurnaroundTime+0x12c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d906      	bls.n	80040ba <USB_SetTurnaroundTime+0x82>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004168 <USB_SetTurnaroundTime+0x130>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d802      	bhi.n	80040ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040b4:	230b      	movs	r3, #11
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e036      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004168 <USB_SetTurnaroundTime+0x130>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d906      	bls.n	80040d0 <USB_SetTurnaroundTime+0x98>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4a29      	ldr	r2, [pc, #164]	@ (800416c <USB_SetTurnaroundTime+0x134>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d802      	bhi.n	80040d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80040ca:	230a      	movs	r3, #10
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e02b      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a26      	ldr	r2, [pc, #152]	@ (800416c <USB_SetTurnaroundTime+0x134>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d906      	bls.n	80040e6 <USB_SetTurnaroundTime+0xae>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4a25      	ldr	r2, [pc, #148]	@ (8004170 <USB_SetTurnaroundTime+0x138>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d202      	bcs.n	80040e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80040e0:	2309      	movs	r3, #9
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e020      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <USB_SetTurnaroundTime+0x138>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d306      	bcc.n	80040fc <USB_SetTurnaroundTime+0xc4>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4a20      	ldr	r2, [pc, #128]	@ (8004174 <USB_SetTurnaroundTime+0x13c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d802      	bhi.n	80040fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040f6:	2308      	movs	r3, #8
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e015      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <USB_SetTurnaroundTime+0x13c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d906      	bls.n	8004112 <USB_SetTurnaroundTime+0xda>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4a1c      	ldr	r2, [pc, #112]	@ (8004178 <USB_SetTurnaroundTime+0x140>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d202      	bcs.n	8004112 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800410c:	2307      	movs	r3, #7
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e00a      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004112:	2306      	movs	r3, #6
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e007      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800411e:	2309      	movs	r3, #9
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e001      	b.n	8004128 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004124:	2309      	movs	r3, #9
 8004126:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	029b      	lsls	r3, r3, #10
 800413c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	00d8acbf 	.word	0x00d8acbf
 8004158:	00e4e1c0 	.word	0x00e4e1c0
 800415c:	00f42400 	.word	0x00f42400
 8004160:	01067380 	.word	0x01067380
 8004164:	011a499f 	.word	0x011a499f
 8004168:	01312cff 	.word	0x01312cff
 800416c:	014ca43f 	.word	0x014ca43f
 8004170:	016e3600 	.word	0x016e3600
 8004174:	01a6ab1f 	.word	0x01a6ab1f
 8004178:	01e84800 	.word	0x01e84800

0800417c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d115      	bne.n	800420e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041ee:	200a      	movs	r0, #10
 80041f0:	f7fc fd30 	bl	8000c54 <HAL_Delay>
      ms += 10U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	330a      	adds	r3, #10
 80041f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f001 f93f 	bl	800547e <USB_GetMode>
 8004200:	4603      	mov	r3, r0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d01e      	beq.n	8004244 <USB_SetCurrentMode+0x84>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2bc7      	cmp	r3, #199	@ 0xc7
 800420a:	d9f0      	bls.n	80041ee <USB_SetCurrentMode+0x2e>
 800420c:	e01a      	b.n	8004244 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d115      	bne.n	8004240 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004220:	200a      	movs	r0, #10
 8004222:	f7fc fd17 	bl	8000c54 <HAL_Delay>
      ms += 10U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	330a      	adds	r3, #10
 800422a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f001 f926 	bl	800547e <USB_GetMode>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <USB_SetCurrentMode+0x84>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2bc7      	cmp	r3, #199	@ 0xc7
 800423c:	d9f0      	bls.n	8004220 <USB_SetCurrentMode+0x60>
 800423e:	e001      	b.n	8004244 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e005      	b.n	8004250 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2bc8      	cmp	r3, #200	@ 0xc8
 8004248:	d101      	bne.n	800424e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004258:	b084      	sub	sp, #16
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e009      	b.n	800428c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	3340      	adds	r3, #64	@ 0x40
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	2200      	movs	r2, #0
 8004284:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3301      	adds	r3, #1
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b0e      	cmp	r3, #14
 8004290:	d9f2      	bls.n	8004278 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004292:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11c      	bne.n	80042d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80042d2:	e00b      	b.n	80042ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042f2:	461a      	mov	r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10d      	bne.n	800431c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004308:	2100      	movs	r1, #0
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f968 	bl	80045e0 <USB_SetDevSpeed>
 8004310:	e008      	b.n	8004324 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004312:	2101      	movs	r1, #1
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f963 	bl	80045e0 <USB_SetDevSpeed>
 800431a:	e003      	b.n	8004324 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800431c:	2103      	movs	r1, #3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f95e 	bl	80045e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004324:	2110      	movs	r1, #16
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f8fa 	bl	8004520 <USB_FlushTxFifo>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f924 	bl	8004584 <USB_FlushRxFifo>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434c:	461a      	mov	r2, r3
 800434e:	2300      	movs	r3, #0
 8004350:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004364:	461a      	mov	r2, r3
 8004366:	2300      	movs	r3, #0
 8004368:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	e043      	b.n	80043f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004386:	d118      	bne.n	80043ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800439a:	461a      	mov	r2, r3
 800439c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e013      	b.n	80043cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b0:	461a      	mov	r2, r3
 80043b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	e008      	b.n	80043cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c6:	461a      	mov	r2, r3
 80043c8:	2300      	movs	r3, #0
 80043ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d8:	461a      	mov	r2, r3
 80043da:	2300      	movs	r3, #0
 80043dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ea:	461a      	mov	r2, r3
 80043ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	3301      	adds	r3, #1
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043fc:	461a      	mov	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4293      	cmp	r3, r2
 8004402:	d3b5      	bcc.n	8004370 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e043      	b.n	8004492 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800441c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004420:	d118      	bne.n	8004454 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e013      	b.n	8004466 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444a:	461a      	mov	r2, r3
 800444c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e008      	b.n	8004466 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004472:	461a      	mov	r2, r3
 8004474:	2300      	movs	r3, #0
 8004476:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004484:	461a      	mov	r2, r3
 8004486:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800448a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3301      	adds	r3, #1
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004496:	461a      	mov	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4293      	cmp	r3, r2
 800449c:	d3b5      	bcc.n	800440a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80044be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f043 0210 	orr.w	r2, r3, #16
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	4b10      	ldr	r3, [pc, #64]	@ (800451c <USB_DevInit+0x2c4>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f043 0208 	orr.w	r2, r3, #8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d107      	bne.n	800450c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004518:	b004      	add	sp, #16
 800451a:	4770      	bx	lr
 800451c:	803c3800 	.word	0x803c3800

08004520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800453a:	d901      	bls.n	8004540 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e01b      	b.n	8004578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	daf2      	bge.n	800452e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	019b      	lsls	r3, r3, #6
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004564:	d901      	bls.n	800456a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e006      	b.n	8004578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d0f0      	beq.n	8004558 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800459c:	d901      	bls.n	80045a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e018      	b.n	80045d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	daf2      	bge.n	8004590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2210      	movs	r2, #16
 80045b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045c0:	d901      	bls.n	80045c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e006      	b.n	80045d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d0f0      	beq.n	80045b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004612:	b480      	push	{r7}
 8004614:	b087      	sub	sp, #28
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0306 	and.w	r3, r3, #6
 800462a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]
 8004636:	e00a      	b.n	800464e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d002      	beq.n	8004644 <USB_GetDevSpeed+0x32>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b06      	cmp	r3, #6
 8004642:	d102      	bne.n	800464a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004644:	2302      	movs	r3, #2
 8004646:	75fb      	strb	r3, [r7, #23]
 8004648:	e001      	b.n	800464e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800464a:	230f      	movs	r3, #15
 800464c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d13a      	bne.n	80046ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	b29b      	uxth	r3, r3
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004696:	4313      	orrs	r3, r2
 8004698:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d155      	bne.n	800475c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	791b      	ldrb	r3, [r3, #4]
 80046ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	059b      	lsls	r3, r3, #22
 80046d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046d4:	4313      	orrs	r3, r2
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e036      	b.n	800475c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	2101      	movs	r1, #1
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800470c:	4313      	orrs	r3, r2
 800470e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11a      	bne.n	800475c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004742:	430b      	orrs	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800475a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d161      	bne.n	800484c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800479a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800479e:	d11f      	bne.n	80047e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80047be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004800:	4013      	ands	r3, r2
 8004802:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	b29b      	uxth	r3, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004824:	4013      	ands	r3, r2
 8004826:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	0159      	lsls	r1, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	440b      	add	r3, r1
 800483e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004842:	4619      	mov	r1, r3
 8004844:	4b35      	ldr	r3, [pc, #212]	@ (800491c <USB_DeactivateEndpoint+0x1b0>)
 8004846:	4013      	ands	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
 800484a:	e060      	b.n	800490e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800485e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004862:	d11f      	bne.n	80048a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800487e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004882:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800489e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	2101      	movs	r1, #1
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	43db      	mvns	r3, r3
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048c4:	4013      	ands	r3, r2
 80048c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	43db      	mvns	r3, r3
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048e8:	4013      	ands	r3, r2
 80048ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	0159      	lsls	r1, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	440b      	add	r3, r1
 8004902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004906:	4619      	mov	r1, r3
 8004908:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <USB_DeactivateEndpoint+0x1b4>)
 800490a:	4013      	ands	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	ec337800 	.word	0xec337800
 8004920:	eff37800 	.word	0xeff37800

08004924 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	@ 0x28
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b01      	cmp	r3, #1
 8004942:	f040 817f 	bne.w	8004c44 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d132      	bne.n	80049b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004968:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800496c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800498c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004990:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ac:	0cdb      	lsrs	r3, r3, #19
 80049ae:	04db      	lsls	r3, r3, #19
 80049b0:	6113      	str	r3, [r2, #16]
 80049b2:	e097      	b.n	8004ae4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ce:	0cdb      	lsrs	r3, r3, #19
 80049d0:	04db      	lsls	r3, r3, #19
 80049d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80049f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80049f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11a      	bne.n	8004a34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d903      	bls.n	8004a12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a30:	6113      	str	r3, [r2, #16]
 8004a32:	e044      	b.n	8004abe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	1e5a      	subs	r2, r3, #1
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	8afb      	ldrh	r3, [r7, #22]
 8004a5a:	04d9      	lsls	r1, r3, #19
 8004a5c:	4ba4      	ldr	r3, [pc, #656]	@ (8004cf0 <USB_EPStartXfer+0x3cc>)
 8004a5e:	400b      	ands	r3, r1
 8004a60:	69b9      	ldr	r1, [r7, #24]
 8004a62:	0148      	lsls	r0, r1, #5
 8004a64:	69f9      	ldr	r1, [r7, #28]
 8004a66:	4401      	add	r1, r0
 8004a68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	791b      	ldrb	r3, [r3, #4]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d122      	bne.n	8004abe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a92:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004a96:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	8afb      	ldrh	r3, [r7, #22]
 8004aa8:	075b      	lsls	r3, r3, #29
 8004aaa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	0148      	lsls	r0, r1, #5
 8004ab2:	69f9      	ldr	r1, [r7, #28]
 8004ab4:	4401      	add	r1, r0
 8004ab6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004aba:	4313      	orrs	r3, r2
 8004abc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad4:	69b9      	ldr	r1, [r7, #24]
 8004ad6:	0148      	lsls	r0, r1, #5
 8004ad8:	69f9      	ldr	r1, [r7, #28]
 8004ada:	4401      	add	r1, r0
 8004adc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d14b      	bne.n	8004b82 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	791b      	ldrb	r3, [r3, #4]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d128      	bne.n	8004b60 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d110      	bne.n	8004b40 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e00f      	b.n	8004b60 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	0151      	lsls	r1, r2, #5
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	440a      	add	r2, r1
 8004b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b5e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e166      	b.n	8004e50 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ba0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	791b      	ldrb	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d015      	beq.n	8004bd6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 814e 	beq.w	8004e50 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bca:	69f9      	ldr	r1, [r7, #28]
 8004bcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	634b      	str	r3, [r1, #52]	@ 0x34
 8004bd4:	e13c      	b.n	8004e50 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d110      	bne.n	8004c08 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e00f      	b.n	8004c28 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c26:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	68d9      	ldr	r1, [r3, #12]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	b298      	uxth	r0, r3
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f9b9 	bl	8004fb4 <USB_WritePacket>
 8004c42:	e105      	b.n	8004e50 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c5e:	0cdb      	lsrs	r3, r3, #19
 8004c60:	04db      	lsls	r3, r3, #19
 8004c62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c86:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d132      	bne.n	8004cf4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cbc:	69b9      	ldr	r1, [r7, #24]
 8004cbe:	0148      	lsls	r0, r1, #5
 8004cc0:	69f9      	ldr	r1, [r7, #28]
 8004cc2:	4401      	add	r1, r0
 8004cc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	0151      	lsls	r1, r2, #5
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cea:	6113      	str	r3, [r2, #16]
 8004cec:	e062      	b.n	8004db4 <USB_EPStartXfer+0x490>
 8004cee:	bf00      	nop
 8004cf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d123      	bne.n	8004d44 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d12:	69b9      	ldr	r1, [r7, #24]
 8004d14:	0148      	lsls	r0, r1, #5
 8004d16:	69f9      	ldr	r1, [r7, #28]
 8004d18:	4401      	add	r1, r0
 8004d1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d40:	6113      	str	r3, [r2, #16]
 8004d42:	e037      	b.n	8004db4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	1e5a      	subs	r2, r3, #1
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	8afa      	ldrh	r2, [r7, #22]
 8004d60:	fb03 f202 	mul.w	r2, r3, r2
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	8afb      	ldrh	r3, [r7, #22]
 8004d78:	04d9      	lsls	r1, r3, #19
 8004d7a:	4b38      	ldr	r3, [pc, #224]	@ (8004e5c <USB_EPStartXfer+0x538>)
 8004d7c:	400b      	ands	r3, r1
 8004d7e:	69b9      	ldr	r1, [r7, #24]
 8004d80:	0148      	lsls	r0, r1, #5
 8004d82:	69f9      	ldr	r1, [r7, #28]
 8004d84:	4401      	add	r1, r0
 8004d86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	0148      	lsls	r0, r1, #5
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	4401      	add	r1, r0
 8004dac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004db0:	4313      	orrs	r3, r2
 8004db2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d10d      	bne.n	8004dd6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	68d9      	ldr	r1, [r3, #12]
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	791b      	ldrb	r3, [r3, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d128      	bne.n	8004e30 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d110      	bne.n	8004e10 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e00f      	b.n	8004e30 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	1ff80000 	.word	0x1ff80000

08004e60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d14a      	bne.n	8004f14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e96:	f040 8086 	bne.w	8004fa6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ebc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	0151      	lsls	r1, r2, #5
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	440a      	add	r2, r1
 8004ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d902      	bls.n	8004ef8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ef6:	e056      	b.n	8004fa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f10:	d0e7      	beq.n	8004ee2 <USB_EPStopXfer+0x82>
 8004f12:	e048      	b.n	8004fa6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f2c:	d13b      	bne.n	8004fa6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d902      	bls.n	8004f8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75fb      	strb	r3, [r7, #23]
          break;
 8004f8a:	e00c      	b.n	8004fa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa4:	d0e7      	beq.n	8004f76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	@ 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	71fb      	strb	r3, [r7, #7]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d123      	bne.n	8005022 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fda:	88bb      	ldrh	r3, [r7, #4]
 8004fdc:	3303      	adds	r3, #3
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	e018      	b.n	800501a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	031a      	lsls	r2, r3, #12
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	3301      	adds	r3, #1
 8005000:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3301      	adds	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3301      	adds	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3301      	adds	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	3301      	adds	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d3e2      	bcc.n	8004fe8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3724      	adds	r7, #36	@ 0x24
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005030:	b480      	push	{r7}
 8005032:	b08b      	sub	sp, #44	@ 0x2c
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	089b      	lsrs	r3, r3, #2
 800504a:	b29b      	uxth	r3, r3
 800504c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005056:	2300      	movs	r3, #0
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	e014      	b.n	8005086 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	601a      	str	r2, [r3, #0]
    pDest++;
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	3301      	adds	r3, #1
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	3301      	adds	r3, #1
 8005072:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	3301      	adds	r3, #1
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	3301      	adds	r3, #1
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	3301      	adds	r3, #1
 8005084:	623b      	str	r3, [r7, #32]
 8005086:	6a3a      	ldr	r2, [r7, #32]
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	429a      	cmp	r2, r3
 800508c:	d3e6      	bcc.n	800505c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800508e:	8bfb      	ldrh	r3, [r7, #30]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01e      	beq.n	80050d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800509e:	461a      	mov	r2, r3
 80050a0:	f107 0310 	add.w	r3, r7, #16
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	701a      	strb	r2, [r3, #0]
      i++;
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	3301      	adds	r3, #1
 80050be:	623b      	str	r3, [r7, #32]
      pDest++;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	3301      	adds	r3, #1
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80050c6:	8bfb      	ldrh	r3, [r7, #30]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1ea      	bne.n	80050a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	372c      	adds	r7, #44	@ 0x2c
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d12c      	bne.n	8005156 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db12      	blt.n	8005134 <USB_EPSetStall+0x54>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00f      	beq.n	8005134 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800512e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005132:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800514e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e02b      	b.n	80051ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	db12      	blt.n	800518e <USB_EPSetStall+0xae>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00f      	beq.n	800518e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005188:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800518c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d128      	bne.n	800522a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	791b      	ldrb	r3, [r3, #4]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d003      	beq.n	8005208 <USB_EPClearStall+0x4c>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	791b      	ldrb	r3, [r3, #4]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d138      	bne.n	800527a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e027      	b.n	800527a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005244:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005248:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	791b      	ldrb	r3, [r3, #4]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d003      	beq.n	800525a <USB_EPClearStall+0x9e>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d10f      	bne.n	800527a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005278:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80052aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80052bc:	68f9      	ldr	r1, [r7, #12]
 80052be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052ee:	f023 0303 	bic.w	r3, r3, #3
 80052f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005302:	f023 0302 	bic.w	r3, r3, #2
 8005306:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005330:	f023 0303 	bic.w	r3, r3, #3
 8005334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005344:	f043 0302 	orr.w	r3, r3, #2
 8005348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005370:	68fb      	ldr	r3, [r7, #12]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	0c1b      	lsrs	r3, r3, #16
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	b29b      	uxth	r3, r3
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005414:	68bb      	ldr	r3, [r7, #8]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005422:	b480      	push	{r7}
 8005424:	b087      	sub	sp, #28
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	460b      	mov	r3, r1
 800542c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005444:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	fa22 f303 	lsr.w	r3, r2, r3
 8005452:	01db      	lsls	r3, r3, #7
 8005454:	b2db      	uxtb	r3, r3
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4013      	ands	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005470:	68bb      	ldr	r3, [r7, #8]
}
 8005472:	4618      	mov	r0, r3
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0301 	and.w	r3, r3, #1
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80054b8:	f023 0307 	bic.w	r3, r3, #7
 80054bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	460b      	mov	r3, r1
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	333c      	adds	r3, #60	@ 0x3c
 80054f6:	3304      	adds	r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4a26      	ldr	r2, [pc, #152]	@ (8005598 <USB_EP0_OutStart+0xb8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d90a      	bls.n	800551a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005514:	d101      	bne.n	800551a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e037      	b.n	800558a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005520:	461a      	mov	r2, r3
 8005522:	2300      	movs	r3, #0
 8005524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005534:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005548:	f043 0318 	orr.w	r3, r3, #24
 800554c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800555c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005560:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10f      	bne.n	8005588 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005582:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	4f54300a 	.word	0x4f54300a

0800559c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055b4:	d901      	bls.n	80055ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e01b      	b.n	80055f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	daf2      	bge.n	80055a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055de:	d901      	bls.n	80055e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e006      	b.n	80055f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d0f0      	beq.n	80055d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800560c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005610:	f002 fc94 	bl	8007f3c <USBD_static_malloc>
 8005614:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d109      	bne.n	8005630 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	32b0      	adds	r2, #176	@ 0xb0
 8005626:	2100      	movs	r1, #0
 8005628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800562c:	2302      	movs	r3, #2
 800562e:	e0d4      	b.n	80057da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005630:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005634:	2100      	movs	r1, #0
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f002 fd20 	bl	800807c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	32b0      	adds	r2, #176	@ 0xb0
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	32b0      	adds	r2, #176	@ 0xb0
 8005656:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7c1b      	ldrb	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d138      	bne.n	80056da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005668:	4b5e      	ldr	r3, [pc, #376]	@ (80057e4 <USBD_CDC_Init+0x1e4>)
 800566a:	7819      	ldrb	r1, [r3, #0]
 800566c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005670:	2202      	movs	r2, #2
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f002 fb3f 	bl	8007cf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005678:	4b5a      	ldr	r3, [pc, #360]	@ (80057e4 <USBD_CDC_Init+0x1e4>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f003 020f 	and.w	r2, r3, #15
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	3324      	adds	r3, #36	@ 0x24
 800568e:	2201      	movs	r2, #1
 8005690:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005692:	4b55      	ldr	r3, [pc, #340]	@ (80057e8 <USBD_CDC_Init+0x1e8>)
 8005694:	7819      	ldrb	r1, [r3, #0]
 8005696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800569a:	2202      	movs	r2, #2
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f002 fb2a 	bl	8007cf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056a2:	4b51      	ldr	r3, [pc, #324]	@ (80057e8 <USBD_CDC_Init+0x1e8>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f003 020f 	and.w	r2, r3, #15
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056ba:	2201      	movs	r2, #1
 80056bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056be:	4b4b      	ldr	r3, [pc, #300]	@ (80057ec <USBD_CDC_Init+0x1ec>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f003 020f 	and.w	r2, r3, #15
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	3326      	adds	r3, #38	@ 0x26
 80056d4:	2210      	movs	r2, #16
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e035      	b.n	8005746 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056da:	4b42      	ldr	r3, [pc, #264]	@ (80057e4 <USBD_CDC_Init+0x1e4>)
 80056dc:	7819      	ldrb	r1, [r3, #0]
 80056de:	2340      	movs	r3, #64	@ 0x40
 80056e0:	2202      	movs	r2, #2
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f002 fb07 	bl	8007cf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056e8:	4b3e      	ldr	r3, [pc, #248]	@ (80057e4 <USBD_CDC_Init+0x1e4>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 020f 	and.w	r2, r3, #15
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	3324      	adds	r3, #36	@ 0x24
 80056fe:	2201      	movs	r2, #1
 8005700:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005702:	4b39      	ldr	r3, [pc, #228]	@ (80057e8 <USBD_CDC_Init+0x1e8>)
 8005704:	7819      	ldrb	r1, [r3, #0]
 8005706:	2340      	movs	r3, #64	@ 0x40
 8005708:	2202      	movs	r2, #2
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f002 faf3 	bl	8007cf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005710:	4b35      	ldr	r3, [pc, #212]	@ (80057e8 <USBD_CDC_Init+0x1e8>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	f003 020f 	and.w	r2, r3, #15
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005728:	2201      	movs	r2, #1
 800572a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800572c:	4b2f      	ldr	r3, [pc, #188]	@ (80057ec <USBD_CDC_Init+0x1ec>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 020f 	and.w	r2, r3, #15
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	3326      	adds	r3, #38	@ 0x26
 8005742:	2210      	movs	r2, #16
 8005744:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005746:	4b29      	ldr	r3, [pc, #164]	@ (80057ec <USBD_CDC_Init+0x1ec>)
 8005748:	7819      	ldrb	r1, [r3, #0]
 800574a:	2308      	movs	r3, #8
 800574c:	2203      	movs	r2, #3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f002 fad1 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005754:	4b25      	ldr	r3, [pc, #148]	@ (80057ec <USBD_CDC_Init+0x1ec>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f003 020f 	and.w	r2, r3, #15
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	3324      	adds	r3, #36	@ 0x24
 800576a:	2201      	movs	r2, #1
 800576c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	33b0      	adds	r3, #176	@ 0xb0
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80057a4:	2302      	movs	r3, #2
 80057a6:	e018      	b.n	80057da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	7c1b      	ldrb	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057b0:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <USBD_CDC_Init+0x1e8>)
 80057b2:	7819      	ldrb	r1, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f002 fb88 	bl	8007ed4 <USBD_LL_PrepareReceive>
 80057c4:	e008      	b.n	80057d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057c6:	4b08      	ldr	r3, [pc, #32]	@ (80057e8 <USBD_CDC_Init+0x1e8>)
 80057c8:	7819      	ldrb	r1, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057d0:	2340      	movs	r3, #64	@ 0x40
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f002 fb7e 	bl	8007ed4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000093 	.word	0x20000093
 80057e8:	20000094 	.word	0x20000094
 80057ec:	20000095 	.word	0x20000095

080057f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80057fc:	4b3a      	ldr	r3, [pc, #232]	@ (80058e8 <USBD_CDC_DeInit+0xf8>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f002 fa9d 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005808:	4b37      	ldr	r3, [pc, #220]	@ (80058e8 <USBD_CDC_DeInit+0xf8>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	3324      	adds	r3, #36	@ 0x24
 800581e:	2200      	movs	r2, #0
 8005820:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005822:	4b32      	ldr	r3, [pc, #200]	@ (80058ec <USBD_CDC_DeInit+0xfc>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f002 fa8a 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800582e:	4b2f      	ldr	r3, [pc, #188]	@ (80058ec <USBD_CDC_DeInit+0xfc>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 020f 	and.w	r2, r3, #15
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005846:	2200      	movs	r2, #0
 8005848:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800584a:	4b29      	ldr	r3, [pc, #164]	@ (80058f0 <USBD_CDC_DeInit+0x100>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f002 fa76 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005856:	4b26      	ldr	r3, [pc, #152]	@ (80058f0 <USBD_CDC_DeInit+0x100>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	f003 020f 	and.w	r2, r3, #15
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	3324      	adds	r3, #36	@ 0x24
 800586c:	2200      	movs	r2, #0
 800586e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005870:	4b1f      	ldr	r3, [pc, #124]	@ (80058f0 <USBD_CDC_DeInit+0x100>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 020f 	and.w	r2, r3, #15
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	3326      	adds	r3, #38	@ 0x26
 8005886:	2200      	movs	r2, #0
 8005888:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	32b0      	adds	r2, #176	@ 0xb0
 8005894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01f      	beq.n	80058dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	33b0      	adds	r3, #176	@ 0xb0
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	32b0      	adds	r2, #176	@ 0xb0
 80058ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058be:	4618      	mov	r0, r3
 80058c0:	f002 fb4a 	bl	8007f58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	32b0      	adds	r2, #176	@ 0xb0
 80058ce:	2100      	movs	r1, #0
 80058d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000093 	.word	0x20000093
 80058ec:	20000094 	.word	0x20000094
 80058f0:	20000095 	.word	0x20000095

080058f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	32b0      	adds	r2, #176	@ 0xb0
 8005908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005920:	2303      	movs	r3, #3
 8005922:	e0bf      	b.n	8005aa4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800592c:	2b00      	cmp	r3, #0
 800592e:	d050      	beq.n	80059d2 <USBD_CDC_Setup+0xde>
 8005930:	2b20      	cmp	r3, #32
 8005932:	f040 80af 	bne.w	8005a94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	88db      	ldrh	r3, [r3, #6]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d03a      	beq.n	80059b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	b25b      	sxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	da1b      	bge.n	8005980 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	33b0      	adds	r3, #176	@ 0xb0
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800595e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	88d2      	ldrh	r2, [r2, #6]
 8005964:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	88db      	ldrh	r3, [r3, #6]
 800596a:	2b07      	cmp	r3, #7
 800596c:	bf28      	it	cs
 800596e:	2307      	movcs	r3, #7
 8005970:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	89fa      	ldrh	r2, [r7, #14]
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 fd93 	bl	80074a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800597e:	e090      	b.n	8005aa2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	785a      	ldrb	r2, [r3, #1]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	88db      	ldrh	r3, [r3, #6]
 800598e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005990:	d803      	bhi.n	800599a <USBD_CDC_Setup+0xa6>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	88db      	ldrh	r3, [r3, #6]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	e000      	b.n	800599c <USBD_CDC_Setup+0xa8>
 800599a:	2240      	movs	r2, #64	@ 0x40
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80059a2:	6939      	ldr	r1, [r7, #16]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80059aa:	461a      	mov	r2, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fda5 	bl	80074fc <USBD_CtlPrepareRx>
      break;
 80059b2:	e076      	b.n	8005aa2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	33b0      	adds	r3, #176	@ 0xb0
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	7850      	ldrb	r0, [r2, #1]
 80059ca:	2200      	movs	r2, #0
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	4798      	blx	r3
      break;
 80059d0:	e067      	b.n	8005aa2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b0b      	cmp	r3, #11
 80059d8:	d851      	bhi.n	8005a7e <USBD_CDC_Setup+0x18a>
 80059da:	a201      	add	r2, pc, #4	@ (adr r2, 80059e0 <USBD_CDC_Setup+0xec>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a11 	.word	0x08005a11
 80059e4:	08005a8d 	.word	0x08005a8d
 80059e8:	08005a7f 	.word	0x08005a7f
 80059ec:	08005a7f 	.word	0x08005a7f
 80059f0:	08005a7f 	.word	0x08005a7f
 80059f4:	08005a7f 	.word	0x08005a7f
 80059f8:	08005a7f 	.word	0x08005a7f
 80059fc:	08005a7f 	.word	0x08005a7f
 8005a00:	08005a7f 	.word	0x08005a7f
 8005a04:	08005a7f 	.word	0x08005a7f
 8005a08:	08005a3b 	.word	0x08005a3b
 8005a0c:	08005a65 	.word	0x08005a65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d107      	bne.n	8005a2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a1c:	f107 030a 	add.w	r3, r7, #10
 8005a20:	2202      	movs	r2, #2
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 fd3d 	bl	80074a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a2a:	e032      	b.n	8005a92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fcbb 	bl	80073aa <USBD_CtlError>
            ret = USBD_FAIL;
 8005a34:	2303      	movs	r3, #3
 8005a36:	75fb      	strb	r3, [r7, #23]
          break;
 8005a38:	e02b      	b.n	8005a92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d107      	bne.n	8005a56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a46:	f107 030d 	add.w	r3, r7, #13
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 fd28 	bl	80074a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a54:	e01d      	b.n	8005a92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 fca6 	bl	80073aa <USBD_CtlError>
            ret = USBD_FAIL;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	75fb      	strb	r3, [r7, #23]
          break;
 8005a62:	e016      	b.n	8005a92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d00f      	beq.n	8005a90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 fc99 	bl	80073aa <USBD_CtlError>
            ret = USBD_FAIL;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a7c:	e008      	b.n	8005a90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 fc92 	bl	80073aa <USBD_CtlError>
          ret = USBD_FAIL;
 8005a86:	2303      	movs	r3, #3
 8005a88:	75fb      	strb	r3, [r7, #23]
          break;
 8005a8a:	e002      	b.n	8005a92 <USBD_CDC_Setup+0x19e>
          break;
 8005a8c:	bf00      	nop
 8005a8e:	e008      	b.n	8005aa2 <USBD_CDC_Setup+0x1ae>
          break;
 8005a90:	bf00      	nop
      }
      break;
 8005a92:	e006      	b.n	8005aa2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fc87 	bl	80073aa <USBD_CtlError>
      ret = USBD_FAIL;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005abe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	32b0      	adds	r2, #176	@ 0xb0
 8005aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e065      	b.n	8005ba2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	32b0      	adds	r2, #176	@ 0xb0
 8005ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	3318      	adds	r3, #24
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d02f      	beq.n	8005b60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	f003 020f 	and.w	r2, r3, #15
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	3318      	adds	r3, #24
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f003 010f 	and.w	r1, r3, #15
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	440b      	add	r3, r1
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4403      	add	r3, r0
 8005b28:	331c      	adds	r3, #28
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d112      	bne.n	8005b60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	f003 020f 	and.w	r2, r3, #15
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3318      	adds	r3, #24
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b52:	78f9      	ldrb	r1, [r7, #3]
 8005b54:	2300      	movs	r3, #0
 8005b56:	2200      	movs	r2, #0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f002 f99a 	bl	8007e92 <USBD_LL_Transmit>
 8005b5e:	e01f      	b.n	8005ba0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	33b0      	adds	r3, #176	@ 0xb0
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d010      	beq.n	8005ba0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	33b0      	adds	r3, #176	@ 0xb0
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005b9c:	78fa      	ldrb	r2, [r7, #3]
 8005b9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	32b0      	adds	r2, #176	@ 0xb0
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	32b0      	adds	r2, #176	@ 0xb0
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e01a      	b.n	8005c12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f002 f998 	bl	8007f16 <USBD_LL_GetRxDataSize>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	33b0      	adds	r3, #176	@ 0xb0
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	32b0      	adds	r2, #176	@ 0xb0
 8005c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e024      	b.n	8005c86 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	33b0      	adds	r3, #176	@ 0xb0
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d019      	beq.n	8005c84 <USBD_CDC_EP0_RxReady+0x6a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005c56:	2bff      	cmp	r3, #255	@ 0xff
 8005c58:	d014      	beq.n	8005c84 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	33b0      	adds	r3, #176	@ 0xb0
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005c72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	22ff      	movs	r2, #255	@ 0xff
 8005c80:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c98:	2182      	movs	r1, #130	@ 0x82
 8005c9a:	4818      	ldr	r0, [pc, #96]	@ (8005cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c9c:	f000 fd4f 	bl	800673e <USBD_GetEpDesc>
 8005ca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	4815      	ldr	r0, [pc, #84]	@ (8005cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ca6:	f000 fd4a 	bl	800673e <USBD_GetEpDesc>
 8005caa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cac:	2181      	movs	r1, #129	@ 0x81
 8005cae:	4813      	ldr	r0, [pc, #76]	@ (8005cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cb0:	f000 fd45 	bl	800673e <USBD_GetEpDesc>
 8005cb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2210      	movs	r2, #16
 8005cc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cd0:	711a      	strb	r2, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d006      	beq.n	8005cea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ce4:	711a      	strb	r2, [r3, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2243      	movs	r2, #67	@ 0x43
 8005cee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cf0:	4b02      	ldr	r3, [pc, #8]	@ (8005cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000050 	.word	0x20000050

08005d00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d08:	2182      	movs	r1, #130	@ 0x82
 8005d0a:	4818      	ldr	r0, [pc, #96]	@ (8005d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d0c:	f000 fd17 	bl	800673e <USBD_GetEpDesc>
 8005d10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d12:	2101      	movs	r1, #1
 8005d14:	4815      	ldr	r0, [pc, #84]	@ (8005d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d16:	f000 fd12 	bl	800673e <USBD_GetEpDesc>
 8005d1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d1c:	2181      	movs	r1, #129	@ 0x81
 8005d1e:	4813      	ldr	r0, [pc, #76]	@ (8005d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d20:	f000 fd0d 	bl	800673e <USBD_GetEpDesc>
 8005d24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2210      	movs	r2, #16
 8005d30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d006      	beq.n	8005d46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	711a      	strb	r2, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f042 0202 	orr.w	r2, r2, #2
 8005d44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d006      	beq.n	8005d5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	711a      	strb	r2, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f042 0202 	orr.w	r2, r2, #2
 8005d58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2243      	movs	r2, #67	@ 0x43
 8005d5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d60:	4b02      	ldr	r3, [pc, #8]	@ (8005d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000050 	.word	0x20000050

08005d70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d78:	2182      	movs	r1, #130	@ 0x82
 8005d7a:	4818      	ldr	r0, [pc, #96]	@ (8005ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d7c:	f000 fcdf 	bl	800673e <USBD_GetEpDesc>
 8005d80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d82:	2101      	movs	r1, #1
 8005d84:	4815      	ldr	r0, [pc, #84]	@ (8005ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d86:	f000 fcda 	bl	800673e <USBD_GetEpDesc>
 8005d8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d8c:	2181      	movs	r1, #129	@ 0x81
 8005d8e:	4813      	ldr	r0, [pc, #76]	@ (8005ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d90:	f000 fcd5 	bl	800673e <USBD_GetEpDesc>
 8005d94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d006      	beq.n	8005db6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db0:	711a      	strb	r2, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d006      	beq.n	8005dca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc4:	711a      	strb	r2, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2243      	movs	r2, #67	@ 0x43
 8005dce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005dd0:	4b02      	ldr	r3, [pc, #8]	@ (8005ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000050 	.word	0x20000050

08005de0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	220a      	movs	r2, #10
 8005dec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005dee:	4b03      	ldr	r3, [pc, #12]	@ (8005dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	2000000c 	.word	0x2000000c

08005e00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e009      	b.n	8005e28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	33b0      	adds	r3, #176	@ 0xb0
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	32b0      	adds	r2, #176	@ 0xb0
 8005e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e008      	b.n	8005e6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	32b0      	adds	r2, #176	@ 0xb0
 8005e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e004      	b.n	8005ea6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	32b0      	adds	r2, #176	@ 0xb0
 8005ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e025      	b.n	8005f26 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d11f      	bne.n	8005f24 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005eec:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <USBD_CDC_TransmitPacket+0x7c>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4403      	add	r3, r0
 8005f06:	3318      	adds	r3, #24
 8005f08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005f0a:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <USBD_CDC_TransmitPacket+0x7c>)
 8005f0c:	7819      	ldrb	r1, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 ffb9 	bl	8007e92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000093 	.word	0x20000093

08005f34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	32b0      	adds	r2, #176	@ 0xb0
 8005f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	32b0      	adds	r2, #176	@ 0xb0
 8005f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e018      	b.n	8005f94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	7c1b      	ldrb	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f9c <USBD_CDC_ReceivePacket+0x68>)
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 ffab 	bl	8007ed4 <USBD_LL_PrepareReceive>
 8005f7e:	e008      	b.n	8005f92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f80:	4b06      	ldr	r3, [pc, #24]	@ (8005f9c <USBD_CDC_ReceivePacket+0x68>)
 8005f82:	7819      	ldrb	r1, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f8a:	2340      	movs	r3, #64	@ 0x40
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 ffa1 	bl	8007ed4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000094 	.word	0x20000094

08005fa0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e01f      	b.n	8005ff8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	79fa      	ldrb	r2, [r7, #7]
 8005fea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f001 fe1b 	bl	8007c28 <USBD_LL_Init>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006014:	2303      	movs	r3, #3
 8006016:	e025      	b.n	8006064 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32ae      	adds	r2, #174	@ 0xae
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00f      	beq.n	8006054 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	32ae      	adds	r2, #174	@ 0xae
 800603e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	f107 020e 	add.w	r2, r7, #14
 8006048:	4610      	mov	r0, r2
 800604a:	4798      	blx	r3
 800604c:	4602      	mov	r2, r0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fe23 	bl	8007cc0 <USBD_LL_Start>
 800607a:	4603      	mov	r3, r0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800608c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	4611      	mov	r1, r2
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	4611      	mov	r1, r2
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80060f8:	2303      	movs	r3, #3
 80060fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f001 f90c 	bl	8007336 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800613a:	f003 031f 	and.w	r3, r3, #31
 800613e:	2b02      	cmp	r3, #2
 8006140:	d01a      	beq.n	8006178 <USBD_LL_SetupStage+0x72>
 8006142:	2b02      	cmp	r3, #2
 8006144:	d822      	bhi.n	800618c <USBD_LL_SetupStage+0x86>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <USBD_LL_SetupStage+0x4a>
 800614a:	2b01      	cmp	r3, #1
 800614c:	d00a      	beq.n	8006164 <USBD_LL_SetupStage+0x5e>
 800614e:	e01d      	b.n	800618c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb63 	bl	8006824 <USBD_StdDevReq>
 800615e:	4603      	mov	r3, r0
 8006160:	73fb      	strb	r3, [r7, #15]
      break;
 8006162:	e020      	b.n	80061a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fbcb 	bl	8006908 <USBD_StdItfReq>
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
      break;
 8006176:	e016      	b.n	80061a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fc2d 	bl	80069e0 <USBD_StdEPReq>
 8006186:	4603      	mov	r3, r0
 8006188:	73fb      	strb	r3, [r7, #15]
      break;
 800618a:	e00c      	b.n	80061a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006192:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006196:	b2db      	uxtb	r3, r3
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fdf0 	bl	8007d80 <USBD_LL_StallEP>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
      break;
 80061a4:	bf00      	nop
  }

  return ret;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	460b      	mov	r3, r1
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d16e      	bne.n	80062a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80061ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	f040 8098 	bne.w	800630c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d913      	bls.n	8006210 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	4293      	cmp	r3, r2
 8006200:	bf28      	it	cs
 8006202:	4613      	movcs	r3, r2
 8006204:	461a      	mov	r2, r3
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f001 f994 	bl	8007536 <USBD_CtlContinueRx>
 800620e:	e07d      	b.n	800630c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	2b02      	cmp	r3, #2
 800621c:	d014      	beq.n	8006248 <USBD_LL_DataOutStage+0x98>
 800621e:	2b02      	cmp	r3, #2
 8006220:	d81d      	bhi.n	800625e <USBD_LL_DataOutStage+0xae>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <USBD_LL_DataOutStage+0x7c>
 8006226:	2b01      	cmp	r3, #1
 8006228:	d003      	beq.n	8006232 <USBD_LL_DataOutStage+0x82>
 800622a:	e018      	b.n	800625e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	75bb      	strb	r3, [r7, #22]
            break;
 8006230:	e018      	b.n	8006264 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006238:	b2db      	uxtb	r3, r3
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fa64 	bl	800670a <USBD_CoreFindIF>
 8006242:	4603      	mov	r3, r0
 8006244:	75bb      	strb	r3, [r7, #22]
            break;
 8006246:	e00d      	b.n	8006264 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800624e:	b2db      	uxtb	r3, r3
 8006250:	4619      	mov	r1, r3
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fa66 	bl	8006724 <USBD_CoreFindEP>
 8006258:	4603      	mov	r3, r0
 800625a:	75bb      	strb	r3, [r7, #22]
            break;
 800625c:	e002      	b.n	8006264 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	75bb      	strb	r3, [r7, #22]
            break;
 8006262:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006264:	7dbb      	ldrb	r3, [r7, #22]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d119      	bne.n	800629e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b03      	cmp	r3, #3
 8006274:	d113      	bne.n	800629e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006276:	7dba      	ldrb	r2, [r7, #22]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	32ae      	adds	r2, #174	@ 0xae
 800627c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006286:	7dba      	ldrb	r2, [r7, #22]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800628e:	7dba      	ldrb	r2, [r7, #22]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	32ae      	adds	r2, #174	@ 0xae
 8006294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f001 f95a 	bl	8007558 <USBD_CtlSendStatus>
 80062a4:	e032      	b.n	800630c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80062a6:	7afb      	ldrb	r3, [r7, #11]
 80062a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	4619      	mov	r1, r3
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fa37 	bl	8006724 <USBD_CoreFindEP>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062ba:	7dbb      	ldrb	r3, [r7, #22]
 80062bc:	2bff      	cmp	r3, #255	@ 0xff
 80062be:	d025      	beq.n	800630c <USBD_LL_DataOutStage+0x15c>
 80062c0:	7dbb      	ldrb	r3, [r7, #22]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d122      	bne.n	800630c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d117      	bne.n	8006302 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80062d2:	7dba      	ldrb	r2, [r7, #22]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	32ae      	adds	r2, #174	@ 0xae
 80062d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00f      	beq.n	8006302 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80062e2:	7dba      	ldrb	r2, [r7, #22]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80062ea:	7dba      	ldrb	r2, [r7, #22]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	32ae      	adds	r2, #174	@ 0xae
 80062f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	7afa      	ldrb	r2, [r7, #11]
 80062f8:	4611      	mov	r1, r2
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	4798      	blx	r3
 80062fe:	4603      	mov	r3, r0
 8006300:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	e000      	b.n	800630e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	460b      	mov	r3, r1
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d16f      	bne.n	800640a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3314      	adds	r3, #20
 800632e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006336:	2b02      	cmp	r3, #2
 8006338:	d15a      	bne.n	80063f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	429a      	cmp	r2, r3
 8006344:	d914      	bls.n	8006370 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	461a      	mov	r2, r3
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f001 f8bc 	bl	80074da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f001 fdb3 	bl	8007ed4 <USBD_LL_PrepareReceive>
 800636e:	e03f      	b.n	80063f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	429a      	cmp	r2, r3
 800637a:	d11c      	bne.n	80063b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006384:	429a      	cmp	r2, r3
 8006386:	d316      	bcc.n	80063b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006392:	429a      	cmp	r2, r3
 8006394:	d20f      	bcs.n	80063b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006396:	2200      	movs	r2, #0
 8006398:	2100      	movs	r1, #0
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f001 f89d 	bl	80074da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063a8:	2300      	movs	r3, #0
 80063aa:	2200      	movs	r2, #0
 80063ac:	2100      	movs	r1, #0
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f001 fd90 	bl	8007ed4 <USBD_LL_PrepareReceive>
 80063b4:	e01c      	b.n	80063f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d10f      	bne.n	80063e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063e2:	2180      	movs	r1, #128	@ 0x80
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f001 fccb 	bl	8007d80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f001 f8c7 	bl	800757e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d03a      	beq.n	8006470 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff fe42 	bl	8006084 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006408:	e032      	b.n	8006470 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800640a:	7afb      	ldrb	r3, [r7, #11]
 800640c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006410:	b2db      	uxtb	r3, r3
 8006412:	4619      	mov	r1, r3
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f985 	bl	8006724 <USBD_CoreFindEP>
 800641a:	4603      	mov	r3, r0
 800641c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	2bff      	cmp	r3, #255	@ 0xff
 8006422:	d025      	beq.n	8006470 <USBD_LL_DataInStage+0x15a>
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d122      	bne.n	8006470 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b03      	cmp	r3, #3
 8006434:	d11c      	bne.n	8006470 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006436:	7dfa      	ldrb	r2, [r7, #23]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	32ae      	adds	r2, #174	@ 0xae
 800643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d014      	beq.n	8006470 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006446:	7dfa      	ldrb	r2, [r7, #23]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800644e:	7dfa      	ldrb	r2, [r7, #23]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	32ae      	adds	r2, #174	@ 0xae
 8006454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	7afa      	ldrb	r2, [r7, #11]
 800645c:	4611      	mov	r1, r2
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	4798      	blx	r3
 8006462:	4603      	mov	r3, r0
 8006464:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006466:	7dbb      	ldrb	r3, [r7, #22]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800646c:	7dbb      	ldrb	r3, [r7, #22]
 800646e:	e000      	b.n	8006472 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d014      	beq.n	80064e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00e      	beq.n	80064e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6852      	ldr	r2, [r2, #4]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	4611      	mov	r1, r2
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80064dc:	2303      	movs	r3, #3
 80064de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064e0:	2340      	movs	r3, #64	@ 0x40
 80064e2:	2200      	movs	r2, #0
 80064e4:	2100      	movs	r1, #0
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fc05 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2240      	movs	r2, #64	@ 0x40
 80064f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064fc:	2340      	movs	r3, #64	@ 0x40
 80064fe:	2200      	movs	r2, #0
 8006500:	2180      	movs	r1, #128	@ 0x80
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fbf7 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2240      	movs	r2, #64	@ 0x40
 8006512:	621a      	str	r2, [r3, #32]

  return ret;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b04      	cmp	r3, #4
 8006550:	d006      	beq.n	8006560 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006558:	b2da      	uxtb	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2204      	movs	r2, #4
 8006564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b04      	cmp	r3, #4
 8006588:	d106      	bne.n	8006598 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006590:	b2da      	uxtb	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d110      	bne.n	80065dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	32ae      	adds	r2, #174	@ 0xae
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006604:	2303      	movs	r3, #3
 8006606:	e01c      	b.n	8006642 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b03      	cmp	r3, #3
 8006612:	d115      	bne.n	8006640 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	32ae      	adds	r2, #174	@ 0xae
 800661e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	32ae      	adds	r2, #174	@ 0xae
 8006632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	4611      	mov	r1, r2
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	32ae      	adds	r2, #174	@ 0xae
 8006660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006668:	2303      	movs	r3, #3
 800666a:	e01c      	b.n	80066a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b03      	cmp	r3, #3
 8006676:	d115      	bne.n	80066a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	32ae      	adds	r2, #174	@ 0xae
 8006682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	32ae      	adds	r2, #174	@ 0xae
 8006696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669c:	78fa      	ldrb	r2, [r7, #3]
 800669e:	4611      	mov	r1, r2
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00e      	beq.n	8006700 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6852      	ldr	r2, [r2, #4]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	4611      	mov	r1, r2
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80066fc:	2303      	movs	r3, #3
 80066fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	460b      	mov	r3, r1
 8006714:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006716:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006730:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	885b      	ldrh	r3, [r3, #2]
 800675a:	b29b      	uxth	r3, r3
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	4293      	cmp	r3, r2
 8006762:	d91f      	bls.n	80067a4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800676a:	e013      	b.n	8006794 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800676c:	f107 030a 	add.w	r3, r7, #10
 8006770:	4619      	mov	r1, r3
 8006772:	6978      	ldr	r0, [r7, #20]
 8006774:	f000 f81b 	bl	80067ae <USBD_GetNextDesc>
 8006778:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b05      	cmp	r3, #5
 8006780:	d108      	bne.n	8006794 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	789b      	ldrb	r3, [r3, #2]
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	429a      	cmp	r2, r3
 800678e:	d008      	beq.n	80067a2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	885b      	ldrh	r3, [r3, #2]
 8006798:	b29a      	uxth	r2, r3
 800679a:	897b      	ldrh	r3, [r7, #10]
 800679c:	429a      	cmp	r2, r3
 800679e:	d8e5      	bhi.n	800676c <USBD_GetEpDesc+0x2e>
 80067a0:	e000      	b.n	80067a4 <USBD_GetEpDesc+0x66>
          break;
 80067a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80067a4:	693b      	ldr	r3, [r7, #16]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4413      	add	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80067d8:	68fb      	ldr	r3, [r7, #12]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b087      	sub	sp, #28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	3301      	adds	r3, #1
 80067fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006804:	8a3b      	ldrh	r3, [r7, #16]
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	b21a      	sxth	r2, r3
 800680a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800680e:	4313      	orrs	r3, r2
 8006810:	b21b      	sxth	r3, r3
 8006812:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006814:	89fb      	ldrh	r3, [r7, #14]
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800683a:	2b40      	cmp	r3, #64	@ 0x40
 800683c:	d005      	beq.n	800684a <USBD_StdDevReq+0x26>
 800683e:	2b40      	cmp	r3, #64	@ 0x40
 8006840:	d857      	bhi.n	80068f2 <USBD_StdDevReq+0xce>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00f      	beq.n	8006866 <USBD_StdDevReq+0x42>
 8006846:	2b20      	cmp	r3, #32
 8006848:	d153      	bne.n	80068f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	32ae      	adds	r2, #174	@ 0xae
 8006854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]
      break;
 8006864:	e04a      	b.n	80068fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	2b09      	cmp	r3, #9
 800686c:	d83b      	bhi.n	80068e6 <USBD_StdDevReq+0xc2>
 800686e:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <USBD_StdDevReq+0x50>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	080068c9 	.word	0x080068c9
 8006878:	080068dd 	.word	0x080068dd
 800687c:	080068e7 	.word	0x080068e7
 8006880:	080068d3 	.word	0x080068d3
 8006884:	080068e7 	.word	0x080068e7
 8006888:	080068a7 	.word	0x080068a7
 800688c:	0800689d 	.word	0x0800689d
 8006890:	080068e7 	.word	0x080068e7
 8006894:	080068bf 	.word	0x080068bf
 8006898:	080068b1 	.word	0x080068b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa3c 	bl	8006d1c <USBD_GetDescriptor>
          break;
 80068a4:	e024      	b.n	80068f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fba1 	bl	8006ff0 <USBD_SetAddress>
          break;
 80068ae:	e01f      	b.n	80068f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fbe0 	bl	8007078 <USBD_SetConfig>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
          break;
 80068bc:	e018      	b.n	80068f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fc83 	bl	80071cc <USBD_GetConfig>
          break;
 80068c6:	e013      	b.n	80068f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fcb4 	bl	8007238 <USBD_GetStatus>
          break;
 80068d0:	e00e      	b.n	80068f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fce3 	bl	80072a0 <USBD_SetFeature>
          break;
 80068da:	e009      	b.n	80068f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fd07 	bl	80072f2 <USBD_ClrFeature>
          break;
 80068e4:	e004      	b.n	80068f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fd5e 	bl	80073aa <USBD_CtlError>
          break;
 80068ee:	bf00      	nop
      }
      break;
 80068f0:	e004      	b.n	80068fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fd58 	bl	80073aa <USBD_CtlError>
      break;
 80068fa:	bf00      	nop
  }

  return ret;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop

08006908 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800691e:	2b40      	cmp	r3, #64	@ 0x40
 8006920:	d005      	beq.n	800692e <USBD_StdItfReq+0x26>
 8006922:	2b40      	cmp	r3, #64	@ 0x40
 8006924:	d852      	bhi.n	80069cc <USBD_StdItfReq+0xc4>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <USBD_StdItfReq+0x26>
 800692a:	2b20      	cmp	r3, #32
 800692c:	d14e      	bne.n	80069cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006934:	b2db      	uxtb	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	2b02      	cmp	r3, #2
 800693a:	d840      	bhi.n	80069be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	889b      	ldrh	r3, [r3, #4]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b01      	cmp	r3, #1
 8006944:	d836      	bhi.n	80069b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	889b      	ldrh	r3, [r3, #4]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff fedb 	bl	800670a <USBD_CoreFindIF>
 8006954:	4603      	mov	r3, r0
 8006956:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2bff      	cmp	r3, #255	@ 0xff
 800695c:	d01d      	beq.n	800699a <USBD_StdItfReq+0x92>
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d11a      	bne.n	800699a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006964:	7bba      	ldrb	r2, [r7, #14]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	32ae      	adds	r2, #174	@ 0xae
 800696a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00f      	beq.n	8006994 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006974:	7bba      	ldrb	r2, [r7, #14]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800697c:	7bba      	ldrb	r2, [r7, #14]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	32ae      	adds	r2, #174	@ 0xae
 8006982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
 800698e:	4603      	mov	r3, r0
 8006990:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006992:	e004      	b.n	800699e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006994:	2303      	movs	r3, #3
 8006996:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006998:	e001      	b.n	800699e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800699a:	2303      	movs	r3, #3
 800699c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	88db      	ldrh	r3, [r3, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d110      	bne.n	80069c8 <USBD_StdItfReq+0xc0>
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10d      	bne.n	80069c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fdd3 	bl	8007558 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069b2:	e009      	b.n	80069c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fcf7 	bl	80073aa <USBD_CtlError>
          break;
 80069bc:	e004      	b.n	80069c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fcf2 	bl	80073aa <USBD_CtlError>
          break;
 80069c6:	e000      	b.n	80069ca <USBD_StdItfReq+0xc2>
          break;
 80069c8:	bf00      	nop
      }
      break;
 80069ca:	e004      	b.n	80069d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fceb 	bl	80073aa <USBD_CtlError>
      break;
 80069d4:	bf00      	nop
  }

  return ret;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	889b      	ldrh	r3, [r3, #4]
 80069f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069fc:	2b40      	cmp	r3, #64	@ 0x40
 80069fe:	d007      	beq.n	8006a10 <USBD_StdEPReq+0x30>
 8006a00:	2b40      	cmp	r3, #64	@ 0x40
 8006a02:	f200 817f 	bhi.w	8006d04 <USBD_StdEPReq+0x324>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d02a      	beq.n	8006a60 <USBD_StdEPReq+0x80>
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	f040 817a 	bne.w	8006d04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fe85 	bl	8006724 <USBD_CoreFindEP>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a1e:	7b7b      	ldrb	r3, [r7, #13]
 8006a20:	2bff      	cmp	r3, #255	@ 0xff
 8006a22:	f000 8174 	beq.w	8006d0e <USBD_StdEPReq+0x32e>
 8006a26:	7b7b      	ldrb	r3, [r7, #13]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 8170 	bne.w	8006d0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a2e:	7b7a      	ldrb	r2, [r7, #13]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a36:	7b7a      	ldrb	r2, [r7, #13]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	32ae      	adds	r2, #174	@ 0xae
 8006a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8163 	beq.w	8006d0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a48:	7b7a      	ldrb	r2, [r7, #13]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	32ae      	adds	r2, #174	@ 0xae
 8006a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4798      	blx	r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a5e:	e156      	b.n	8006d0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d008      	beq.n	8006a7a <USBD_StdEPReq+0x9a>
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	f300 8145 	bgt.w	8006cf8 <USBD_StdEPReq+0x318>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 809b 	beq.w	8006baa <USBD_StdEPReq+0x1ca>
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d03c      	beq.n	8006af2 <USBD_StdEPReq+0x112>
 8006a78:	e13e      	b.n	8006cf8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d002      	beq.n	8006a8c <USBD_StdEPReq+0xac>
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d016      	beq.n	8006ab8 <USBD_StdEPReq+0xd8>
 8006a8a:	e02c      	b.n	8006ae6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <USBD_StdEPReq+0xce>
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	2b80      	cmp	r3, #128	@ 0x80
 8006a96:	d00a      	beq.n	8006aae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 f96f 	bl	8007d80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aa2:	2180      	movs	r1, #128	@ 0x80
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 f96b 	bl	8007d80 <USBD_LL_StallEP>
 8006aaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006aac:	e020      	b.n	8006af0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fc7a 	bl	80073aa <USBD_CtlError>
              break;
 8006ab6:	e01b      	b.n	8006af0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	885b      	ldrh	r3, [r3, #2]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10e      	bne.n	8006ade <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <USBD_StdEPReq+0xfe>
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b80      	cmp	r3, #128	@ 0x80
 8006aca:	d008      	beq.n	8006ade <USBD_StdEPReq+0xfe>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	88db      	ldrh	r3, [r3, #6]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f951 	bl	8007d80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fd3a 	bl	8007558 <USBD_CtlSendStatus>

              break;
 8006ae4:	e004      	b.n	8006af0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fc5e 	bl	80073aa <USBD_CtlError>
              break;
 8006aee:	bf00      	nop
          }
          break;
 8006af0:	e107      	b.n	8006d02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d002      	beq.n	8006b04 <USBD_StdEPReq+0x124>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d016      	beq.n	8006b30 <USBD_StdEPReq+0x150>
 8006b02:	e04b      	b.n	8006b9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <USBD_StdEPReq+0x146>
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b80      	cmp	r3, #128	@ 0x80
 8006b0e:	d00a      	beq.n	8006b26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f933 	bl	8007d80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b1a:	2180      	movs	r1, #128	@ 0x80
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f92f 	bl	8007d80 <USBD_LL_StallEP>
 8006b22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b24:	e040      	b.n	8006ba8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fc3e 	bl	80073aa <USBD_CtlError>
              break;
 8006b2e:	e03b      	b.n	8006ba8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	885b      	ldrh	r3, [r3, #2]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d136      	bne.n	8006ba6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d004      	beq.n	8006b4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b42:	7bbb      	ldrb	r3, [r7, #14]
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 f939 	bl	8007dbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fd03 	bl	8007558 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff fde4 	bl	8006724 <USBD_CoreFindEP>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b60:	7b7b      	ldrb	r3, [r7, #13]
 8006b62:	2bff      	cmp	r3, #255	@ 0xff
 8006b64:	d01f      	beq.n	8006ba6 <USBD_StdEPReq+0x1c6>
 8006b66:	7b7b      	ldrb	r3, [r7, #13]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d11c      	bne.n	8006ba6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b6c:	7b7a      	ldrb	r2, [r7, #13]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b74:	7b7a      	ldrb	r2, [r7, #13]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	32ae      	adds	r2, #174	@ 0xae
 8006b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d010      	beq.n	8006ba6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b84:	7b7a      	ldrb	r2, [r7, #13]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	32ae      	adds	r2, #174	@ 0xae
 8006b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b9a:	e004      	b.n	8006ba6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fc03 	bl	80073aa <USBD_CtlError>
              break;
 8006ba4:	e000      	b.n	8006ba8 <USBD_StdEPReq+0x1c8>
              break;
 8006ba6:	bf00      	nop
          }
          break;
 8006ba8:	e0ab      	b.n	8006d02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d002      	beq.n	8006bbc <USBD_StdEPReq+0x1dc>
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d032      	beq.n	8006c20 <USBD_StdEPReq+0x240>
 8006bba:	e097      	b.n	8006cec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <USBD_StdEPReq+0x1f2>
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	2b80      	cmp	r3, #128	@ 0x80
 8006bc6:	d004      	beq.n	8006bd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fbed 	bl	80073aa <USBD_CtlError>
                break;
 8006bd0:	e091      	b.n	8006cf6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	da0b      	bge.n	8006bf2 <USBD_StdEPReq+0x212>
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	3310      	adds	r3, #16
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	3304      	adds	r3, #4
 8006bf0:	e00b      	b.n	8006c0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4413      	add	r3, r2
 8006c08:	3304      	adds	r3, #4
 8006c0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2202      	movs	r2, #2
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fc43 	bl	80074a4 <USBD_CtlSendData>
              break;
 8006c1e:	e06a      	b.n	8006cf6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	da11      	bge.n	8006c4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	f003 020f 	and.w	r2, r3, #15
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	3324      	adds	r3, #36	@ 0x24
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d117      	bne.n	8006c72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fbb0 	bl	80073aa <USBD_CtlError>
                  break;
 8006c4a:	e054      	b.n	8006cf6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	f003 020f 	and.w	r2, r3, #15
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d104      	bne.n	8006c72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fb9d 	bl	80073aa <USBD_CtlError>
                  break;
 8006c70:	e041      	b.n	8006cf6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	da0b      	bge.n	8006c92 <USBD_StdEPReq+0x2b2>
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	3310      	adds	r3, #16
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3304      	adds	r3, #4
 8006c90:	e00b      	b.n	8006caa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3304      	adds	r3, #4
 8006caa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <USBD_StdEPReq+0x2d8>
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b80      	cmp	r3, #128	@ 0x80
 8006cb6:	d103      	bne.n	8006cc0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e00e      	b.n	8006cde <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f899 	bl	8007dfc <USBD_LL_IsStallEP>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	e002      	b.n	8006cde <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fbdd 	bl	80074a4 <USBD_CtlSendData>
              break;
 8006cea:	e004      	b.n	8006cf6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fb5b 	bl	80073aa <USBD_CtlError>
              break;
 8006cf4:	bf00      	nop
          }
          break;
 8006cf6:	e004      	b.n	8006d02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fb55 	bl	80073aa <USBD_CtlError>
          break;
 8006d00:	bf00      	nop
      }
      break;
 8006d02:	e005      	b.n	8006d10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fb4f 	bl	80073aa <USBD_CtlError>
      break;
 8006d0c:	e000      	b.n	8006d10 <USBD_StdEPReq+0x330>
      break;
 8006d0e:	bf00      	nop
  }

  return ret;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	885b      	ldrh	r3, [r3, #2]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	2b06      	cmp	r3, #6
 8006d3e:	f200 8128 	bhi.w	8006f92 <USBD_GetDescriptor+0x276>
 8006d42:	a201      	add	r2, pc, #4	@ (adr r2, 8006d48 <USBD_GetDescriptor+0x2c>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006dbd 	.word	0x08006dbd
 8006d54:	08006f93 	.word	0x08006f93
 8006d58:	08006f93 	.word	0x08006f93
 8006d5c:	08006f33 	.word	0x08006f33
 8006d60:	08006f5f 	.word	0x08006f5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	7c12      	ldrb	r2, [r2, #16]
 8006d70:	f107 0108 	add.w	r1, r7, #8
 8006d74:	4610      	mov	r0, r2
 8006d76:	4798      	blx	r3
 8006d78:	60f8      	str	r0, [r7, #12]
      break;
 8006d7a:	e112      	b.n	8006fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	7c1b      	ldrb	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10d      	bne.n	8006da0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8c:	f107 0208 	add.w	r2, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d9e:	e100      	b.n	8006fa2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	f107 0208 	add.w	r2, r7, #8
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
      break;
 8006dba:	e0f2      	b.n	8006fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	885b      	ldrh	r3, [r3, #2]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b05      	cmp	r3, #5
 8006dc4:	f200 80ac 	bhi.w	8006f20 <USBD_GetDescriptor+0x204>
 8006dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd0 <USBD_GetDescriptor+0xb4>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006de9 	.word	0x08006de9
 8006dd4:	08006e1d 	.word	0x08006e1d
 8006dd8:	08006e51 	.word	0x08006e51
 8006ddc:	08006e85 	.word	0x08006e85
 8006de0:	08006eb9 	.word	0x08006eb9
 8006de4:	08006eed 	.word	0x08006eed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	7c12      	ldrb	r2, [r2, #16]
 8006e00:	f107 0108 	add.w	r1, r7, #8
 8006e04:	4610      	mov	r0, r2
 8006e06:	4798      	blx	r3
 8006e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e0a:	e091      	b.n	8006f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 facb 	bl	80073aa <USBD_CtlError>
            err++;
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	3301      	adds	r3, #1
 8006e18:	72fb      	strb	r3, [r7, #11]
          break;
 8006e1a:	e089      	b.n	8006f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	7c12      	ldrb	r2, [r2, #16]
 8006e34:	f107 0108 	add.w	r1, r7, #8
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e3e:	e077      	b.n	8006f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fab1 	bl	80073aa <USBD_CtlError>
            err++;
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e4e:	e06f      	b.n	8006f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	7c12      	ldrb	r2, [r2, #16]
 8006e68:	f107 0108 	add.w	r1, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e72:	e05d      	b.n	8006f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa97 	bl	80073aa <USBD_CtlError>
            err++;
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	72fb      	strb	r3, [r7, #11]
          break;
 8006e82:	e055      	b.n	8006f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea6:	e043      	b.n	8006f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa7d 	bl	80073aa <USBD_CtlError>
            err++;
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006eb6:	e03b      	b.n	8006f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eda:	e029      	b.n	8006f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa63 	bl	80073aa <USBD_CtlError>
            err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eea:	e021      	b.n	8006f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0e:	e00f      	b.n	8006f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa49 	bl	80073aa <USBD_CtlError>
            err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1e:	e007      	b.n	8006f30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa41 	bl	80073aa <USBD_CtlError>
          err++;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f2e:	bf00      	nop
      }
      break;
 8006f30:	e037      	b.n	8006fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7c1b      	ldrb	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f42:	f107 0208 	add.w	r2, r7, #8
 8006f46:	4610      	mov	r0, r2
 8006f48:	4798      	blx	r3
 8006f4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f4c:	e029      	b.n	8006fa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa2a 	bl	80073aa <USBD_CtlError>
        err++;
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f5c:	e021      	b.n	8006fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7c1b      	ldrb	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10d      	bne.n	8006f82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	f107 0208 	add.w	r2, r7, #8
 8006f72:	4610      	mov	r0, r2
 8006f74:	4798      	blx	r3
 8006f76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	2207      	movs	r2, #7
 8006f7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f80:	e00f      	b.n	8006fa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fa10 	bl	80073aa <USBD_CtlError>
        err++;
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f90:	e007      	b.n	8006fa2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa08 	bl	80073aa <USBD_CtlError>
      err++;
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006fa0:	bf00      	nop
  }

  if (err != 0U)
 8006fa2:	7afb      	ldrb	r3, [r7, #11]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11e      	bne.n	8006fe6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	88db      	ldrh	r3, [r3, #6]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d016      	beq.n	8006fde <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fb0:	893b      	ldrh	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00e      	beq.n	8006fd4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	88da      	ldrh	r2, [r3, #6]
 8006fba:	893b      	ldrh	r3, [r7, #8]
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	bf28      	it	cs
 8006fc0:	4613      	movcs	r3, r2
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fc6:	893b      	ldrh	r3, [r7, #8]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fa69 	bl	80074a4 <USBD_CtlSendData>
 8006fd2:	e009      	b.n	8006fe8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9e7 	bl	80073aa <USBD_CtlError>
 8006fdc:	e004      	b.n	8006fe8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 faba 	bl	8007558 <USBD_CtlSendStatus>
 8006fe4:	e000      	b.n	8006fe8 <USBD_GetDescriptor+0x2cc>
    return;
 8006fe6:	bf00      	nop
  }
}
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop

08006ff0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	889b      	ldrh	r3, [r3, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d131      	bne.n	8007066 <USBD_SetAddress+0x76>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	88db      	ldrh	r3, [r3, #6]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d12d      	bne.n	8007066 <USBD_SetAddress+0x76>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	885b      	ldrh	r3, [r3, #2]
 800700e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007010:	d829      	bhi.n	8007066 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800701c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b03      	cmp	r3, #3
 8007028:	d104      	bne.n	8007034 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f9bc 	bl	80073aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007032:	e01d      	b.n	8007070 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7bfa      	ldrb	r2, [r7, #15]
 8007038:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 ff07 	bl	8007e54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa86 	bl	8007558 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800705a:	e009      	b.n	8007070 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007064:	e004      	b.n	8007070 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f99e 	bl	80073aa <USBD_CtlError>
  }
}
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	885b      	ldrh	r3, [r3, #2]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	4b4e      	ldr	r3, [pc, #312]	@ (80071c8 <USBD_SetConfig+0x150>)
 800708e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007090:	4b4d      	ldr	r3, [pc, #308]	@ (80071c8 <USBD_SetConfig+0x150>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d905      	bls.n	80070a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f985 	bl	80073aa <USBD_CtlError>
    return USBD_FAIL;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e08c      	b.n	80071be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d002      	beq.n	80070b6 <USBD_SetConfig+0x3e>
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d029      	beq.n	8007108 <USBD_SetConfig+0x90>
 80070b4:	e075      	b.n	80071a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070b6:	4b44      	ldr	r3, [pc, #272]	@ (80071c8 <USBD_SetConfig+0x150>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d020      	beq.n	8007100 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070be:	4b42      	ldr	r3, [pc, #264]	@ (80071c8 <USBD_SetConfig+0x150>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070c8:	4b3f      	ldr	r3, [pc, #252]	@ (80071c8 <USBD_SetConfig+0x150>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fe ffe3 	bl	800609a <USBD_SetClassConfig>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d008      	beq.n	80070f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f962 	bl	80073aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070ee:	e065      	b.n	80071bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa31 	bl	8007558 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2203      	movs	r2, #3
 80070fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80070fe:	e05d      	b.n	80071bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa29 	bl	8007558 <USBD_CtlSendStatus>
      break;
 8007106:	e059      	b.n	80071bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007108:	4b2f      	ldr	r3, [pc, #188]	@ (80071c8 <USBD_SetConfig+0x150>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d112      	bne.n	8007136 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007118:	4b2b      	ldr	r3, [pc, #172]	@ (80071c8 <USBD_SetConfig+0x150>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007122:	4b29      	ldr	r3, [pc, #164]	@ (80071c8 <USBD_SetConfig+0x150>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fe ffd2 	bl	80060d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa12 	bl	8007558 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007134:	e042      	b.n	80071bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007136:	4b24      	ldr	r3, [pc, #144]	@ (80071c8 <USBD_SetConfig+0x150>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d02a      	beq.n	800719a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fe ffc0 	bl	80060d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007152:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <USBD_SetConfig+0x150>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800715c:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <USBD_SetConfig+0x150>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fe ff99 	bl	800609a <USBD_SetClassConfig>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00f      	beq.n	8007192 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f918 	bl	80073aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fe ffa5 	bl	80060d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007190:	e014      	b.n	80071bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f9e0 	bl	8007558 <USBD_CtlSendStatus>
      break;
 8007198:	e010      	b.n	80071bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9dc 	bl	8007558 <USBD_CtlSendStatus>
      break;
 80071a0:	e00c      	b.n	80071bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f900 	bl	80073aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071aa:	4b07      	ldr	r3, [pc, #28]	@ (80071c8 <USBD_SetConfig+0x150>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fe ff8e 	bl	80060d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ba:	bf00      	nop
  }

  return ret;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000170 	.word	0x20000170

080071cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	88db      	ldrh	r3, [r3, #6]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d004      	beq.n	80071e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f8e2 	bl	80073aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071e6:	e023      	b.n	8007230 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	dc02      	bgt.n	80071fa <USBD_GetConfig+0x2e>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dc03      	bgt.n	8007200 <USBD_GetConfig+0x34>
 80071f8:	e015      	b.n	8007226 <USBD_GetConfig+0x5a>
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d00b      	beq.n	8007216 <USBD_GetConfig+0x4a>
 80071fe:	e012      	b.n	8007226 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3308      	adds	r3, #8
 800720a:	2201      	movs	r2, #1
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f948 	bl	80074a4 <USBD_CtlSendData>
        break;
 8007214:	e00c      	b.n	8007230 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3304      	adds	r3, #4
 800721a:	2201      	movs	r2, #1
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f940 	bl	80074a4 <USBD_CtlSendData>
        break;
 8007224:	e004      	b.n	8007230 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f8be 	bl	80073aa <USBD_CtlError>
        break;
 800722e:	bf00      	nop
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	2b02      	cmp	r3, #2
 800724e:	d81e      	bhi.n	800728e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	88db      	ldrh	r3, [r3, #6]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d004      	beq.n	8007262 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8a5 	bl	80073aa <USBD_CtlError>
        break;
 8007260:	e01a      	b.n	8007298 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f043 0202 	orr.w	r2, r3, #2
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	330c      	adds	r3, #12
 8007282:	2202      	movs	r2, #2
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f90c 	bl	80074a4 <USBD_CtlSendData>
      break;
 800728c:	e004      	b.n	8007298 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f88a 	bl	80073aa <USBD_CtlError>
      break;
 8007296:	bf00      	nop
  }
}
 8007298:	bf00      	nop
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d107      	bne.n	80072c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f94c 	bl	8007558 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072c0:	e013      	b.n	80072ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d10b      	bne.n	80072e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	889b      	ldrh	r3, [r3, #4]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f93c 	bl	8007558 <USBD_CtlSendStatus>
}
 80072e0:	e003      	b.n	80072ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f860 	bl	80073aa <USBD_CtlError>
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007302:	b2db      	uxtb	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	2b02      	cmp	r3, #2
 8007308:	d80b      	bhi.n	8007322 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d10c      	bne.n	800732c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f91c 	bl	8007558 <USBD_CtlSendStatus>
      }
      break;
 8007320:	e004      	b.n	800732c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f840 	bl	80073aa <USBD_CtlError>
      break;
 800732a:	e000      	b.n	800732e <USBD_ClrFeature+0x3c>
      break;
 800732c:	bf00      	nop
  }
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	781a      	ldrb	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7ff fa40 	bl	80067e6 <SWAPBYTE>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff fa33 	bl	80067e6 <SWAPBYTE>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3301      	adds	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff fa26 	bl	80067e6 <SWAPBYTE>
 800739a:	4603      	mov	r3, r0
 800739c:	461a      	mov	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	80da      	strh	r2, [r3, #6]
}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073b4:	2180      	movs	r1, #128	@ 0x80
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fce2 	bl	8007d80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fcde 	bl	8007d80 <USBD_LL_StallEP>
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d042      	beq.n	8007468 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80073e6:	6938      	ldr	r0, [r7, #16]
 80073e8:	f000 f842 	bl	8007470 <USBD_GetLen>
 80073ec:	4603      	mov	r3, r0
 80073ee:	3301      	adds	r3, #1
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073f6:	d808      	bhi.n	800740a <USBD_GetString+0x3e>
 80073f8:	6938      	ldr	r0, [r7, #16]
 80073fa:	f000 f839 	bl	8007470 <USBD_GetLen>
 80073fe:	4603      	mov	r3, r0
 8007400:	3301      	adds	r3, #1
 8007402:	b29b      	uxth	r3, r3
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	b29a      	uxth	r2, r3
 8007408:	e001      	b.n	800740e <USBD_GetString+0x42>
 800740a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4413      	add	r3, r2
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	7812      	ldrb	r2, [r2, #0]
 800741c:	701a      	strb	r2, [r3, #0]
  idx++;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	3301      	adds	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	4413      	add	r3, r2
 800742a:	2203      	movs	r2, #3
 800742c:	701a      	strb	r2, [r3, #0]
  idx++;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	3301      	adds	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007434:	e013      	b.n	800745e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	4413      	add	r3, r2
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	7812      	ldrb	r2, [r2, #0]
 8007440:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	3301      	adds	r3, #1
 8007446:	613b      	str	r3, [r7, #16]
    idx++;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	3301      	adds	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	4413      	add	r3, r2
 8007454:	2200      	movs	r2, #0
 8007456:	701a      	strb	r2, [r3, #0]
    idx++;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	3301      	adds	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e7      	bne.n	8007436 <USBD_GetString+0x6a>
 8007466:	e000      	b.n	800746a <USBD_GetString+0x9e>
    return;
 8007468:	bf00      	nop
  }
}
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007480:	e005      	b.n	800748e <USBD_GetLen+0x1e>
  {
    len++;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	3301      	adds	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	3301      	adds	r3, #1
 800748c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f5      	bne.n	8007482 <USBD_GetLen+0x12>
  }

  return len;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	2100      	movs	r1, #0
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fce1 	bl	8007e92 <USBD_LL_Transmit>

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	2100      	movs	r1, #0
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fcd0 	bl	8007e92 <USBD_LL_Transmit>

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2203      	movs	r2, #3
 800750c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	2100      	movs	r1, #0
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 fcd4 	bl	8007ed4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	2100      	movs	r1, #0
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fcc3 	bl	8007ed4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2204      	movs	r2, #4
 8007564:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007568:	2300      	movs	r3, #0
 800756a:	2200      	movs	r2, #0
 800756c:	2100      	movs	r1, #0
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fc8f 	bl	8007e92 <USBD_LL_Transmit>

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2205      	movs	r2, #5
 800758a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800758e:	2300      	movs	r3, #0
 8007590:	2200      	movs	r2, #0
 8007592:	2100      	movs	r1, #0
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fc9d 	bl	8007ed4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075a8:	2200      	movs	r2, #0
 80075aa:	4912      	ldr	r1, [pc, #72]	@ (80075f4 <MX_USB_DEVICE_Init+0x50>)
 80075ac:	4812      	ldr	r0, [pc, #72]	@ (80075f8 <MX_USB_DEVICE_Init+0x54>)
 80075ae:	f7fe fcf7 	bl	8005fa0 <USBD_Init>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075b8:	f7f9 fa36 	bl	8000a28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075bc:	490f      	ldr	r1, [pc, #60]	@ (80075fc <MX_USB_DEVICE_Init+0x58>)
 80075be:	480e      	ldr	r0, [pc, #56]	@ (80075f8 <MX_USB_DEVICE_Init+0x54>)
 80075c0:	f7fe fd1e 	bl	8006000 <USBD_RegisterClass>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075ca:	f7f9 fa2d 	bl	8000a28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075ce:	490c      	ldr	r1, [pc, #48]	@ (8007600 <MX_USB_DEVICE_Init+0x5c>)
 80075d0:	4809      	ldr	r0, [pc, #36]	@ (80075f8 <MX_USB_DEVICE_Init+0x54>)
 80075d2:	f7fe fc15 	bl	8005e00 <USBD_CDC_RegisterInterface>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075dc:	f7f9 fa24 	bl	8000a28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075e0:	4805      	ldr	r0, [pc, #20]	@ (80075f8 <MX_USB_DEVICE_Init+0x54>)
 80075e2:	f7fe fd43 	bl	800606c <USBD_Start>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075ec:	f7f9 fa1c 	bl	8000a28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075f0:	bf00      	nop
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	200000ac 	.word	0x200000ac
 80075f8:	20000174 	.word	0x20000174
 80075fc:	20000018 	.word	0x20000018
 8007600:	20000098 	.word	0x20000098

08007604 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007608:	2200      	movs	r2, #0
 800760a:	4905      	ldr	r1, [pc, #20]	@ (8007620 <CDC_Init_FS+0x1c>)
 800760c:	4805      	ldr	r0, [pc, #20]	@ (8007624 <CDC_Init_FS+0x20>)
 800760e:	f7fe fc11 	bl	8005e34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007612:	4905      	ldr	r1, [pc, #20]	@ (8007628 <CDC_Init_FS+0x24>)
 8007614:	4803      	ldr	r0, [pc, #12]	@ (8007624 <CDC_Init_FS+0x20>)
 8007616:	f7fe fc2f 	bl	8005e78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800761a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800761c:	4618      	mov	r0, r3
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000850 	.word	0x20000850
 8007624:	20000174 	.word	0x20000174
 8007628:	20000450 	.word	0x20000450

0800762c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007630:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007632:	4618      	mov	r0, r3
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	6039      	str	r1, [r7, #0]
 8007646:	71fb      	strb	r3, [r7, #7]
 8007648:	4613      	mov	r3, r2
 800764a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	2b23      	cmp	r3, #35	@ 0x23
 8007650:	d84a      	bhi.n	80076e8 <CDC_Control_FS+0xac>
 8007652:	a201      	add	r2, pc, #4	@ (adr r2, 8007658 <CDC_Control_FS+0x1c>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076e9 	.word	0x080076e9
 800765c:	080076e9 	.word	0x080076e9
 8007660:	080076e9 	.word	0x080076e9
 8007664:	080076e9 	.word	0x080076e9
 8007668:	080076e9 	.word	0x080076e9
 800766c:	080076e9 	.word	0x080076e9
 8007670:	080076e9 	.word	0x080076e9
 8007674:	080076e9 	.word	0x080076e9
 8007678:	080076e9 	.word	0x080076e9
 800767c:	080076e9 	.word	0x080076e9
 8007680:	080076e9 	.word	0x080076e9
 8007684:	080076e9 	.word	0x080076e9
 8007688:	080076e9 	.word	0x080076e9
 800768c:	080076e9 	.word	0x080076e9
 8007690:	080076e9 	.word	0x080076e9
 8007694:	080076e9 	.word	0x080076e9
 8007698:	080076e9 	.word	0x080076e9
 800769c:	080076e9 	.word	0x080076e9
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	080076e9 	.word	0x080076e9
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076e9 	.word	0x080076e9
 80076b4:	080076e9 	.word	0x080076e9
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	080076e9 	.word	0x080076e9
 80076c0:	080076e9 	.word	0x080076e9
 80076c4:	080076e9 	.word	0x080076e9
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	080076e9 	.word	0x080076e9
 80076d4:	080076e9 	.word	0x080076e9
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	080076e9 	.word	0x080076e9
 80076e0:	080076e9 	.word	0x080076e9
 80076e4:	080076e9 	.word	0x080076e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076e8:	bf00      	nop
  }

  return (USBD_OK);
 80076ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	4805      	ldr	r0, [pc, #20]	@ (800771c <CDC_Receive_FS+0x24>)
 8007706:	f7fe fbb7 	bl	8005e78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800770a:	4804      	ldr	r0, [pc, #16]	@ (800771c <CDC_Receive_FS+0x24>)
 800770c:	f7fe fc12 	bl	8005f34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007710:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000174 	.word	0x20000174

08007720 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007730:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <CDC_Transmit_FS+0x48>)
 8007732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007736:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007742:	2301      	movs	r3, #1
 8007744:	e00b      	b.n	800775e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007746:	887b      	ldrh	r3, [r7, #2]
 8007748:	461a      	mov	r2, r3
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	4806      	ldr	r0, [pc, #24]	@ (8007768 <CDC_Transmit_FS+0x48>)
 800774e:	f7fe fb71 	bl	8005e34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007752:	4805      	ldr	r0, [pc, #20]	@ (8007768 <CDC_Transmit_FS+0x48>)
 8007754:	f7fe fbae 	bl	8005eb4 <USBD_CDC_TransmitPacket>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000174 	.word	0x20000174

0800776c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800777e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007782:	4618      	mov	r0, r3
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2212      	movs	r2, #18
 80077a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	@ (80077b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	200000c8 	.word	0x200000c8

080077b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2204      	movs	r2, #4
 80077c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077c6:	4b03      	ldr	r3, [pc, #12]	@ (80077d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	200000dc 	.word	0x200000dc

080077d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	4907      	ldr	r1, [pc, #28]	@ (800780c <USBD_FS_ProductStrDescriptor+0x34>)
 80077ee:	4808      	ldr	r0, [pc, #32]	@ (8007810 <USBD_FS_ProductStrDescriptor+0x38>)
 80077f0:	f7ff fdec 	bl	80073cc <USBD_GetString>
 80077f4:	e004      	b.n	8007800 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	4904      	ldr	r1, [pc, #16]	@ (800780c <USBD_FS_ProductStrDescriptor+0x34>)
 80077fa:	4805      	ldr	r0, [pc, #20]	@ (8007810 <USBD_FS_ProductStrDescriptor+0x38>)
 80077fc:	f7ff fde6 	bl	80073cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007800:	4b02      	ldr	r3, [pc, #8]	@ (800780c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000c50 	.word	0x20000c50
 8007810:	0800817c 	.word	0x0800817c

08007814 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	4904      	ldr	r1, [pc, #16]	@ (8007834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007824:	4804      	ldr	r0, [pc, #16]	@ (8007838 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007826:	f7ff fdd1 	bl	80073cc <USBD_GetString>
  return USBD_StrDesc;
 800782a:	4b02      	ldr	r3, [pc, #8]	@ (8007834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000c50 	.word	0x20000c50
 8007838:	08008194 	.word	0x08008194

0800783c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	221a      	movs	r2, #26
 800784c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800784e:	f000 f843 	bl	80078d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007852:	4b02      	ldr	r3, [pc, #8]	@ (800785c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200000e0 	.word	0x200000e0

08007860 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	6039      	str	r1, [r7, #0]
 800786a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	4907      	ldr	r1, [pc, #28]	@ (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007876:	4808      	ldr	r0, [pc, #32]	@ (8007898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007878:	f7ff fda8 	bl	80073cc <USBD_GetString>
 800787c:	e004      	b.n	8007888 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	4904      	ldr	r1, [pc, #16]	@ (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007882:	4805      	ldr	r0, [pc, #20]	@ (8007898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007884:	f7ff fda2 	bl	80073cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007888:	4b02      	ldr	r3, [pc, #8]	@ (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000c50 	.word	0x20000c50
 8007898:	080081a8 	.word	0x080081a8

0800789c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d105      	bne.n	80078ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	4907      	ldr	r1, [pc, #28]	@ (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078b2:	4808      	ldr	r0, [pc, #32]	@ (80078d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078b4:	f7ff fd8a 	bl	80073cc <USBD_GetString>
 80078b8:	e004      	b.n	80078c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4904      	ldr	r1, [pc, #16]	@ (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078be:	4805      	ldr	r0, [pc, #20]	@ (80078d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078c0:	f7ff fd84 	bl	80073cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c4:	4b02      	ldr	r3, [pc, #8]	@ (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000c50 	.word	0x20000c50
 80078d4:	080081b4 	.word	0x080081b4

080078d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078de:	4b0f      	ldr	r3, [pc, #60]	@ (800791c <Get_SerialNum+0x44>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007920 <Get_SerialNum+0x48>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <Get_SerialNum+0x4c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078fe:	2208      	movs	r2, #8
 8007900:	4909      	ldr	r1, [pc, #36]	@ (8007928 <Get_SerialNum+0x50>)
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f814 	bl	8007930 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007908:	2204      	movs	r2, #4
 800790a:	4908      	ldr	r1, [pc, #32]	@ (800792c <Get_SerialNum+0x54>)
 800790c:	68b8      	ldr	r0, [r7, #8]
 800790e:	f000 f80f 	bl	8007930 <IntToUnicode>
  }
}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	1fff7a10 	.word	0x1fff7a10
 8007920:	1fff7a14 	.word	0x1fff7a14
 8007924:	1fff7a18 	.word	0x1fff7a18
 8007928:	200000e2 	.word	0x200000e2
 800792c:	200000f2 	.word	0x200000f2

08007930 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]
 8007946:	e027      	b.n	8007998 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	0f1b      	lsrs	r3, r3, #28
 800794c:	2b09      	cmp	r3, #9
 800794e:	d80b      	bhi.n	8007968 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	0f1b      	lsrs	r3, r3, #28
 8007954:	b2da      	uxtb	r2, r3
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	4619      	mov	r1, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	440b      	add	r3, r1
 8007960:	3230      	adds	r2, #48	@ 0x30
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e00a      	b.n	800797e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	0f1b      	lsrs	r3, r3, #28
 800796c:	b2da      	uxtb	r2, r3
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	4619      	mov	r1, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	440b      	add	r3, r1
 8007978:	3237      	adds	r2, #55	@ 0x37
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	3301      	adds	r3, #1
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	4413      	add	r3, r2
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	3301      	adds	r3, #1
 8007996:	75fb      	strb	r3, [r7, #23]
 8007998:	7dfa      	ldrb	r2, [r7, #23]
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	429a      	cmp	r2, r3
 800799e:	d3d3      	bcc.n	8007948 <IntToUnicode+0x18>
  }
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	@ 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	609a      	str	r2, [r3, #8]
 80079c4:	60da      	str	r2, [r3, #12]
 80079c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079d0:	d13a      	bne.n	8007a48 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a50 <HAL_PCD_MspInit+0xa0>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079da:	4a1d      	ldr	r2, [pc, #116]	@ (8007a50 <HAL_PCD_MspInit+0xa0>)
 80079dc:	f043 0301 	orr.w	r3, r3, #1
 80079e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80079e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a50 <HAL_PCD_MspInit+0xa0>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	613b      	str	r3, [r7, #16]
 80079ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80079f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f4:	2302      	movs	r3, #2
 80079f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079fc:	2303      	movs	r3, #3
 80079fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a00:	230a      	movs	r3, #10
 8007a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a04:	f107 0314 	add.w	r3, r7, #20
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4812      	ldr	r0, [pc, #72]	@ (8007a54 <HAL_PCD_MspInit+0xa4>)
 8007a0c:	f7f9 fa58 	bl	8000ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a10:	4b0f      	ldr	r3, [pc, #60]	@ (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a14:	4a0e      	ldr	r2, [pc, #56]	@ (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a1a:	6353      	str	r3, [r2, #52]	@ 0x34
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a24:	4a0a      	ldr	r2, [pc, #40]	@ (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a2c:	4b08      	ldr	r3, [pc, #32]	@ (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	2043      	movs	r0, #67	@ 0x43
 8007a3e:	f7f9 fa08 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a42:	2043      	movs	r0, #67	@ 0x43
 8007a44:	f7f9 fa21 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a48:	bf00      	nop
 8007a4a:	3728      	adds	r7, #40	@ 0x28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40023800 	.word	0x40023800
 8007a54:	40020000 	.word	0x40020000

08007a58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f7fe fb49 	bl	8006106 <USBD_LL_SetupStage>
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f7fe fb83 	bl	80061b0 <USBD_LL_DataOutStage>
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	3320      	adds	r3, #32
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f7fe fc1c 	bl	8006316 <USBD_LL_DataInStage>
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe fd56 	bl	80065a6 <USBD_LL_SOF>
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	79db      	ldrb	r3, [r3, #7]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d001      	beq.n	8007b1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b16:	f7f8 ff87 	bl	8000a28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b20:	7bfa      	ldrb	r2, [r7, #15]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fcfa 	bl	800651e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe fca2 	bl	800647a <USBD_LL_Reset>
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe fcf5 	bl	800653e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7adb      	ldrb	r3, [r3, #11]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <HAL_PCD_SuspendCallback+0x48>)
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	4a03      	ldr	r2, [pc, #12]	@ (8007b88 <HAL_PCD_SuspendCallback+0x48>)
 8007b7a:	f043 0306 	orr.w	r3, r3, #6
 8007b7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	e000ed00 	.word	0xe000ed00

08007b8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe fceb 	bl	8006576 <USBD_LL_Resume>
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fd43 	bl	800664a <USBD_LL_IsoOUTIncomplete>
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bde:	78fa      	ldrb	r2, [r7, #3]
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fcff 	bl	80065e6 <USBD_LL_IsoINIncomplete>
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fd55 	bl	80066ae <USBD_LL_DevConnected>
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fd52 	bl	80066c4 <USBD_LL_DevDisconnected>
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d13c      	bne.n	8007cb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c38:	4a20      	ldr	r2, [pc, #128]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a1e      	ldr	r2, [pc, #120]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c44:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c48:	4b1c      	ldr	r3, [pc, #112]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007c4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c50:	4b1a      	ldr	r3, [pc, #104]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c52:	2204      	movs	r2, #4
 8007c54:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c56:	4b19      	ldr	r3, [pc, #100]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c58:	2202      	movs	r2, #2
 8007c5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c5c:	4b17      	ldr	r3, [pc, #92]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c62:	4b16      	ldr	r3, [pc, #88]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c64:	2202      	movs	r2, #2
 8007c66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c68:	4b14      	ldr	r3, [pc, #80]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c6e:	4b13      	ldr	r3, [pc, #76]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c74:	4b11      	ldr	r3, [pc, #68]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c7a:	4b10      	ldr	r3, [pc, #64]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c80:	4b0e      	ldr	r3, [pc, #56]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c86:	480d      	ldr	r0, [pc, #52]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c88:	f7fa fadc 	bl	8002244 <HAL_PCD_Init>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c92:	f7f8 fec9 	bl	8000a28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c96:	2180      	movs	r1, #128	@ 0x80
 8007c98:	4808      	ldr	r0, [pc, #32]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007c9a:	f7fb fd08 	bl	80036ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c9e:	2240      	movs	r2, #64	@ 0x40
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4806      	ldr	r0, [pc, #24]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007ca4:	f7fb fcbc 	bl	8003620 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ca8:	2280      	movs	r2, #128	@ 0x80
 8007caa:	2101      	movs	r1, #1
 8007cac:	4803      	ldr	r0, [pc, #12]	@ (8007cbc <USBD_LL_Init+0x94>)
 8007cae:	f7fb fcb7 	bl	8003620 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	20000e50 	.word	0x20000e50

08007cc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fa fbc3 	bl	8002462 <HAL_PCD_Start>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f942 	bl	8007f6c <USBD_Get_USB_Status>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	461a      	mov	r2, r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	70fb      	strb	r3, [r7, #3]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70bb      	strb	r3, [r7, #2]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d1e:	78bb      	ldrb	r3, [r7, #2]
 8007d20:	883a      	ldrh	r2, [r7, #0]
 8007d22:	78f9      	ldrb	r1, [r7, #3]
 8007d24:	f7fb f897 	bl	8002e56 <HAL_PCD_EP_Open>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f91c 	bl	8007f6c <USBD_Get_USB_Status>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fb f8e2 	bl	8002f2a <HAL_PCD_EP_Close>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 f8fd 	bl	8007f6c <USBD_Get_USB_Status>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fb f99a 	bl	80030d8 <HAL_PCD_EP_SetStall>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f8de 	bl	8007f6c <USBD_Get_USB_Status>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fb f9de 	bl	800319e <HAL_PCD_EP_ClrStall>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f8bf 	bl	8007f6c <USBD_Get_USB_Status>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da0b      	bge.n	8007e30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e1e:	68f9      	ldr	r1, [r7, #12]
 8007e20:	4613      	mov	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	3316      	adds	r3, #22
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	e00b      	b.n	8007e48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007e46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fa ffcb 	bl	8002e0e <HAL_PCD_SetAddress>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f874 	bl	8007f6c <USBD_Get_USB_Status>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b086      	sub	sp, #24
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007eb0:	7af9      	ldrb	r1, [r7, #11]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	f7fb f8d5 	bl	8003064 <HAL_PCD_EP_Transmit>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 f853 	bl	8007f6c <USBD_Get_USB_Status>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eca:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ef2:	7af9      	ldrb	r1, [r7, #11]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	f7fb f861 	bl	8002fbe <HAL_PCD_EP_Receive>
 8007efc:	4603      	mov	r3, r0
 8007efe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 f832 	bl	8007f6c <USBD_Get_USB_Status>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fb f881 	bl	8003034 <HAL_PCD_EP_GetRxCount>
 8007f32:	4603      	mov	r3, r0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f44:	4b03      	ldr	r3, [pc, #12]	@ (8007f54 <USBD_static_malloc+0x18>)
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20001334 	.word	0x20001334

08007f58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d817      	bhi.n	8007fb0 <USBD_Get_USB_Status+0x44>
 8007f80:	a201      	add	r2, pc, #4	@ (adr r2, 8007f88 <USBD_Get_USB_Status+0x1c>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007f99 	.word	0x08007f99
 8007f8c:	08007f9f 	.word	0x08007f9f
 8007f90:	08007fa5 	.word	0x08007fa5
 8007f94:	08007fab 	.word	0x08007fab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9c:	e00b      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa2:	e008      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa8:	e005      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007faa:	2303      	movs	r3, #3
 8007fac:	73fb      	strb	r3, [r7, #15]
    break;
 8007fae:	e002      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb4:	bf00      	nop
  }
  return usb_status;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <__itoa>:
 8007fc4:	1e93      	subs	r3, r2, #2
 8007fc6:	2b22      	cmp	r3, #34	@ 0x22
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	460c      	mov	r4, r1
 8007fcc:	d904      	bls.n	8007fd8 <__itoa+0x14>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	700b      	strb	r3, [r1, #0]
 8007fd2:	461c      	mov	r4, r3
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	bd10      	pop	{r4, pc}
 8007fd8:	2a0a      	cmp	r2, #10
 8007fda:	d109      	bne.n	8007ff0 <__itoa+0x2c>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	da07      	bge.n	8007ff0 <__itoa+0x2c>
 8007fe0:	232d      	movs	r3, #45	@ 0x2d
 8007fe2:	700b      	strb	r3, [r1, #0]
 8007fe4:	4240      	negs	r0, r0
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	4421      	add	r1, r4
 8007fea:	f000 f805 	bl	8007ff8 <__utoa>
 8007fee:	e7f1      	b.n	8007fd4 <__itoa+0x10>
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	e7f9      	b.n	8007fe8 <__itoa+0x24>

08007ff4 <itoa>:
 8007ff4:	f7ff bfe6 	b.w	8007fc4 <__itoa>

08007ff8 <__utoa>:
 8007ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ffa:	4c1f      	ldr	r4, [pc, #124]	@ (8008078 <__utoa+0x80>)
 8007ffc:	b08b      	sub	sp, #44	@ 0x2c
 8007ffe:	4605      	mov	r5, r0
 8008000:	460b      	mov	r3, r1
 8008002:	466e      	mov	r6, sp
 8008004:	f104 0c20 	add.w	ip, r4, #32
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	6861      	ldr	r1, [r4, #4]
 800800c:	4637      	mov	r7, r6
 800800e:	c703      	stmia	r7!, {r0, r1}
 8008010:	3408      	adds	r4, #8
 8008012:	4564      	cmp	r4, ip
 8008014:	463e      	mov	r6, r7
 8008016:	d1f7      	bne.n	8008008 <__utoa+0x10>
 8008018:	7921      	ldrb	r1, [r4, #4]
 800801a:	7139      	strb	r1, [r7, #4]
 800801c:	1e91      	subs	r1, r2, #2
 800801e:	6820      	ldr	r0, [r4, #0]
 8008020:	6038      	str	r0, [r7, #0]
 8008022:	2922      	cmp	r1, #34	@ 0x22
 8008024:	f04f 0100 	mov.w	r1, #0
 8008028:	d904      	bls.n	8008034 <__utoa+0x3c>
 800802a:	7019      	strb	r1, [r3, #0]
 800802c:	460b      	mov	r3, r1
 800802e:	4618      	mov	r0, r3
 8008030:	b00b      	add	sp, #44	@ 0x2c
 8008032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008034:	1e58      	subs	r0, r3, #1
 8008036:	4684      	mov	ip, r0
 8008038:	fbb5 f7f2 	udiv	r7, r5, r2
 800803c:	fb02 5617 	mls	r6, r2, r7, r5
 8008040:	3628      	adds	r6, #40	@ 0x28
 8008042:	446e      	add	r6, sp
 8008044:	460c      	mov	r4, r1
 8008046:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800804a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800804e:	462e      	mov	r6, r5
 8008050:	42b2      	cmp	r2, r6
 8008052:	f101 0101 	add.w	r1, r1, #1
 8008056:	463d      	mov	r5, r7
 8008058:	d9ee      	bls.n	8008038 <__utoa+0x40>
 800805a:	2200      	movs	r2, #0
 800805c:	545a      	strb	r2, [r3, r1]
 800805e:	1919      	adds	r1, r3, r4
 8008060:	1aa5      	subs	r5, r4, r2
 8008062:	42aa      	cmp	r2, r5
 8008064:	dae3      	bge.n	800802e <__utoa+0x36>
 8008066:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800806a:	780e      	ldrb	r6, [r1, #0]
 800806c:	7006      	strb	r6, [r0, #0]
 800806e:	3201      	adds	r2, #1
 8008070:	f801 5901 	strb.w	r5, [r1], #-1
 8008074:	e7f4      	b.n	8008060 <__utoa+0x68>
 8008076:	bf00      	nop
 8008078:	080081dc 	.word	0x080081dc

0800807c <memset>:
 800807c:	4402      	add	r2, r0
 800807e:	4603      	mov	r3, r0
 8008080:	4293      	cmp	r3, r2
 8008082:	d100      	bne.n	8008086 <memset+0xa>
 8008084:	4770      	bx	lr
 8008086:	f803 1b01 	strb.w	r1, [r3], #1
 800808a:	e7f9      	b.n	8008080 <memset+0x4>

0800808c <__libc_init_array>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4d0d      	ldr	r5, [pc, #52]	@ (80080c4 <__libc_init_array+0x38>)
 8008090:	4c0d      	ldr	r4, [pc, #52]	@ (80080c8 <__libc_init_array+0x3c>)
 8008092:	1b64      	subs	r4, r4, r5
 8008094:	10a4      	asrs	r4, r4, #2
 8008096:	2600      	movs	r6, #0
 8008098:	42a6      	cmp	r6, r4
 800809a:	d109      	bne.n	80080b0 <__libc_init_array+0x24>
 800809c:	4d0b      	ldr	r5, [pc, #44]	@ (80080cc <__libc_init_array+0x40>)
 800809e:	4c0c      	ldr	r4, [pc, #48]	@ (80080d0 <__libc_init_array+0x44>)
 80080a0:	f000 f818 	bl	80080d4 <_init>
 80080a4:	1b64      	subs	r4, r4, r5
 80080a6:	10a4      	asrs	r4, r4, #2
 80080a8:	2600      	movs	r6, #0
 80080aa:	42a6      	cmp	r6, r4
 80080ac:	d105      	bne.n	80080ba <__libc_init_array+0x2e>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b4:	4798      	blx	r3
 80080b6:	3601      	adds	r6, #1
 80080b8:	e7ee      	b.n	8008098 <__libc_init_array+0xc>
 80080ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80080be:	4798      	blx	r3
 80080c0:	3601      	adds	r6, #1
 80080c2:	e7f2      	b.n	80080aa <__libc_init_array+0x1e>
 80080c4:	0800820c 	.word	0x0800820c
 80080c8:	0800820c 	.word	0x0800820c
 80080cc:	0800820c 	.word	0x0800820c
 80080d0:	08008210 	.word	0x08008210

080080d4 <_init>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr

080080e0 <_fini>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr
