
stm-accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f7c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08008110  08008110  00009110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008248  08008248  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008248  08008248  00009248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008250  08008250  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008250  08008250  00009250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008254  08008254  00009254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008258  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  200000fc  08008354  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  08008354  0000a554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106a3  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9a  00000000  00000000  0001a7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001d570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa4  00000000  00000000  0001e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018165  00000000  00000000  0001ee24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001353e  00000000  00000000  00036f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d54  00000000  00000000  0004a4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d321b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a3c  00000000  00000000  000d3260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d6c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080080f8 	.word	0x080080f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080080f8 	.word	0x080080f8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b0b4      	sub	sp, #208	@ 0xd0
 80004c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fb63 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f97b 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 fa13 	bl	80008fc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d6:	f007 f877 	bl	80075c8 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80004da:	f000 f9e1 	bl	80008a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[] = "      \r\n";
 80004de:	4aae      	ldr	r2, [pc, #696]	@ (8000798 <main+0x2d4>)
 80004e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80004e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e6:	c303      	stmia	r3!, {r0, r1}
 80004e8:	701a      	strb	r2, [r3, #0]
  uint8_t hello[] = "hello\r\n";
 80004ea:	4aac      	ldr	r2, [pc, #688]	@ (800079c <main+0x2d8>)
 80004ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80004f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f4:	e883 0003 	stmia.w	r3, {r0, r1}
  uint32_t delaytime = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  uint8_t result = 0x0;
 80004fe:	2300      	movs	r3, #0
 8000500:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &result, 1, 100);
 8000504:	2364      	movs	r3, #100	@ 0x64
 8000506:	9302      	str	r3, [sp, #8]
 8000508:	2301      	movs	r3, #1
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	f107 03a3 	add.w	r3, r7, #163	@ 0xa3
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	2275      	movs	r2, #117	@ 0x75
 8000516:	21d0      	movs	r1, #208	@ 0xd0
 8000518:	48a1      	ldr	r0, [pc, #644]	@ (80007a0 <main+0x2dc>)
 800051a:	f001 f8bf 	bl	800169c <HAL_I2C_Mem_Read>
  HAL_Delay (1000);
 800051e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000522:	f000 fba9 	bl	8000c78 <HAL_Delay>

  if (result == 0x68) {
 8000526:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800052a:	2b68      	cmp	r3, #104	@ 0x68
 800052c:	d15b      	bne.n	80005e6 <main+0x122>
	  uint8_t send[] = "the device was found\r\n";
 800052e:	4b9d      	ldr	r3, [pc, #628]	@ (80007a4 <main+0x2e0>)
 8000530:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8000534:	461d      	mov	r5, r3
 8000536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800053e:	6020      	str	r0, [r4, #0]
 8000540:	3404      	adds	r4, #4
 8000542:	8021      	strh	r1, [r4, #0]
 8000544:	3402      	adds	r4, #2
 8000546:	0c0b      	lsrs	r3, r1, #16
 8000548:	7023      	strb	r3, [r4, #0]
	  CDC_Transmit_FS (send, sizeof(send));
 800054a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800054e:	2117      	movs	r1, #23
 8000550:	4618      	mov	r0, r3
 8000552:	f007 f8f7 	bl	8007744 <CDC_Transmit_FS>
	  HAL_Delay (10);
 8000556:	200a      	movs	r0, #10
 8000558:	f000 fb8e 	bl	8000c78 <HAL_Delay>
	  uint8_t data;
	  data = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x6B, 1, &data, 1, 500); //initialize mpu clock
 8000562:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000566:	9302      	str	r3, [sp, #8]
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2301      	movs	r3, #1
 8000574:	226b      	movs	r2, #107	@ 0x6b
 8000576:	21d0      	movs	r1, #208	@ 0xd0
 8000578:	4889      	ldr	r0, [pc, #548]	@ (80007a0 <main+0x2dc>)
 800057a:	f000 ff95 	bl	80014a8 <HAL_I2C_Mem_Write>
	  data = 0x07;
 800057e:	2307      	movs	r3, #7
 8000580:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x19, 1, &data, 1, 500); //measurement poll rate of 1 khz
 8000584:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	2301      	movs	r3, #1
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2301      	movs	r3, #1
 8000596:	2219      	movs	r2, #25
 8000598:	21d0      	movs	r1, #208	@ 0xd0
 800059a:	4881      	ldr	r0, [pc, #516]	@ (80007a0 <main+0x2dc>)
 800059c:	f000 ff84 	bl	80014a8 <HAL_I2C_Mem_Write>
	  data = 0b00001000;
 80005a0:	2308      	movs	r3, #8
 80005a2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x1C, 1, &data, 1, 500); //accel set to [-4g, 4g]
 80005a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	2301      	movs	r3, #1
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	221c      	movs	r2, #28
 80005ba:	21d0      	movs	r1, #208	@ 0xd0
 80005bc:	4878      	ldr	r0, [pc, #480]	@ (80007a0 <main+0x2dc>)
 80005be:	f000 ff73 	bl	80014a8 <HAL_I2C_Mem_Write>
	  data = 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x1B, 1, &data, 1, 500); //gyro set to [-250degree/sec, 250degree/sec]
 80005c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005cc:	9302      	str	r3, [sp, #8]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	221b      	movs	r2, #27
 80005dc:	21d0      	movs	r1, #208	@ 0xd0
 80005de:	4870      	ldr	r0, [pc, #448]	@ (80007a0 <main+0x2dc>)
 80005e0:	f000 ff62 	bl	80014a8 <HAL_I2C_Mem_Write>
 80005e4:	e02e      	b.n	8000644 <main+0x180>
  } else {
	  uint8_t send[12] = "          \r\n";
 80005e6:	4a70      	ldr	r2, [pc, #448]	@ (80007a8 <main+0x2e4>)
 80005e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  itoa(result, (char*)send, 10);
 80005f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005fc:	220a      	movs	r2, #10
 80005fe:	4619      	mov	r1, r3
 8000600:	f007 fd0a 	bl	8008018 <itoa>
	  HAL_Delay (10);
 8000604:	200a      	movs	r0, #10
 8000606:	f000 fb37 	bl	8000c78 <HAL_Delay>
	  CDC_Transmit_FS (send, sizeof(send));
 800060a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800060e:	210c      	movs	r1, #12
 8000610:	4618      	mov	r0, r3
 8000612:	f007 f897 	bl	8007744 <CDC_Transmit_FS>
	  HAL_Delay (10);
 8000616:	200a      	movs	r0, #10
 8000618:	f000 fb2e 	bl	8000c78 <HAL_Delay>
	  uint8_t errormessage[] = "there was an error\r\n";
 800061c:	4b63      	ldr	r3, [pc, #396]	@ (80007ac <main+0x2e8>)
 800061e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0003 	ldmia.w	r5, {r0, r1}
 800062c:	6020      	str	r0, [r4, #0]
 800062e:	3404      	adds	r4, #4
 8000630:	7021      	strb	r1, [r4, #0]
	  CDC_Transmit_FS (errormessage, sizeof(errormessage));
 8000632:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000636:	2115      	movs	r1, #21
 8000638:	4618      	mov	r0, r3
 800063a:	f007 f883 	bl	8007744 <CDC_Transmit_FS>
	  HAL_Delay (10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 fb1a 	bl	8000c78 <HAL_Delay>





  uint8_t movingon[] = "moving on...\r\n";
 8000644:	4b5a      	ldr	r3, [pc, #360]	@ (80007b0 <main+0x2ec>)
 8000646:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 800064a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064c:	c407      	stmia	r4!, {r0, r1, r2}
 800064e:	8023      	strh	r3, [r4, #0]
 8000650:	3402      	adds	r4, #2
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS (movingon, sizeof(movingon));
 8000656:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800065a:	210f      	movs	r1, #15
 800065c:	4618      	mov	r0, r3
 800065e:	f007 f871 	bl	8007744 <CDC_Transmit_FS>
  HAL_Delay (10);
 8000662:	200a      	movs	r0, #10
 8000664:	f000 fb08 	bl	8000c78 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);

	  uint8_t acceldata[] = {0, 0, 0, 0, 0, 0};
 8000668:	4a52      	ldr	r2, [pc, #328]	@ (80007b4 <main+0x2f0>)
 800066a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800066e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000672:	6018      	str	r0, [r3, #0]
 8000674:	3304      	adds	r3, #4
 8000676:	8019      	strh	r1, [r3, #0]
	  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, acceldata, 6, 1000);
 8000678:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2306      	movs	r3, #6
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	223b      	movs	r2, #59	@ 0x3b
 800068c:	21d0      	movs	r1, #208	@ 0xd0
 800068e:	4844      	ldr	r0, [pc, #272]	@ (80007a0 <main+0x2dc>)
 8000690:	f001 f804 	bl	800169c <HAL_I2C_Mem_Read>
	  HAL_Delay(100);
 8000694:	2064      	movs	r0, #100	@ 0x64
 8000696:	f000 faef 	bl	8000c78 <HAL_Delay>
	  if ((acceldata[2] == 0) && (acceldata[3] == 0)) {
 800069a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d112      	bne.n	80006c8 <main+0x204>
 80006a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10e      	bne.n	80006c8 <main+0x204>
		  uint8_t erroraccel[] = "error getting data\r\n";
 80006aa:	4b43      	ldr	r3, [pc, #268]	@ (80007b8 <main+0x2f4>)
 80006ac:	1d3c      	adds	r4, r7, #4
 80006ae:	461d      	mov	r5, r3
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006b8:	6020      	str	r0, [r4, #0]
 80006ba:	3404      	adds	r4, #4
 80006bc:	7021      	strb	r1, [r4, #0]
		  CDC_Transmit_FS (erroraccel, sizeof(erroraccel));
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2115      	movs	r1, #21
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 f83e 	bl	8007744 <CDC_Transmit_FS>
	  }
	  int16_t rawx = (uint16_t)(acceldata[0] << 8 | acceldata[1]);
 80006c8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
	  int16_t rawy = (uint16_t)(acceldata[2] << 8 | acceldata[3]);
 80006dc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
	  int16_t rawz = (uint16_t)(acceldata[4] << 8 | acceldata[5]);
 80006f0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6

	  HAL_Delay(50);
 8000704:	2032      	movs	r0, #50	@ 0x32
 8000706:	f000 fab7 	bl	8000c78 <HAL_Delay>
	  uint8_t bufferx[] = "        : x\r\n";
 800070a:	4b2c      	ldr	r3, [pc, #176]	@ (80007bc <main+0x2f8>)
 800070c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000710:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000712:	c407      	stmia	r4!, {r0, r1, r2}
 8000714:	8023      	strh	r3, [r4, #0]
	  uint8_t buffery[] = "        : y\r\n";
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <main+0x2fc>)
 8000718:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800071c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800071e:	c407      	stmia	r4!, {r0, r1, r2}
 8000720:	8023      	strh	r3, [r4, #0]
	  uint8_t bufferz[] = "        : z\r\n\r\n";
 8000722:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <main+0x300>)
 8000724:	f107 041c 	add.w	r4, r7, #28
 8000728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  itoa(rawx, (char*)bufferx, 10);
 800072e:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	@ 0xba
 8000732:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000736:	220a      	movs	r2, #10
 8000738:	4618      	mov	r0, r3
 800073a:	f007 fc6d 	bl	8008018 <itoa>
	  itoa(rawy, (char*)buffery, 10);
 800073e:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8000742:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000746:	220a      	movs	r2, #10
 8000748:	4618      	mov	r0, r3
 800074a:	f007 fc65 	bl	8008018 <itoa>
	  itoa(rawz, (char*)bufferz, 10);
 800074e:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8000752:	f107 011c 	add.w	r1, r7, #28
 8000756:	220a      	movs	r2, #10
 8000758:	4618      	mov	r0, r3
 800075a:	f007 fc5d 	bl	8008018 <itoa>
	  CDC_Transmit_FS (bufferx, sizeof(bufferx));
 800075e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000762:	210e      	movs	r1, #14
 8000764:	4618      	mov	r0, r3
 8000766:	f006 ffed 	bl	8007744 <CDC_Transmit_FS>
	  HAL_Delay(2);
 800076a:	2002      	movs	r0, #2
 800076c:	f000 fa84 	bl	8000c78 <HAL_Delay>
	  CDC_Transmit_FS (buffery, sizeof(buffery));
 8000770:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000774:	210e      	movs	r1, #14
 8000776:	4618      	mov	r0, r3
 8000778:	f006 ffe4 	bl	8007744 <CDC_Transmit_FS>
	  HAL_Delay(2);
 800077c:	2002      	movs	r0, #2
 800077e:	f000 fa7b 	bl	8000c78 <HAL_Delay>
	  CDC_Transmit_FS (bufferz, sizeof(bufferz));
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2110      	movs	r1, #16
 8000788:	4618      	mov	r0, r3
 800078a:	f006 ffdb 	bl	8007744 <CDC_Transmit_FS>
	  HAL_Delay(2);
 800078e:	2002      	movs	r0, #2
 8000790:	f000 fa72 	bl	8000c78 <HAL_Delay>
  {
 8000794:	e768      	b.n	8000668 <main+0x1a4>
 8000796:	bf00      	nop
 8000798:	08008110 	.word	0x08008110
 800079c:	0800811c 	.word	0x0800811c
 80007a0:	20000118 	.word	0x20000118
 80007a4:	08008124 	.word	0x08008124
 80007a8:	0800813c 	.word	0x0800813c
 80007ac:	08008148 	.word	0x08008148
 80007b0:	08008160 	.word	0x08008160
 80007b4:	08008170 	.word	0x08008170
 80007b8:	08008178 	.word	0x08008178
 80007bc:	08008190 	.word	0x08008190
 80007c0:	080081a0 	.word	0x080081a0
 80007c4:	080081b0 	.word	0x080081b0

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	@ 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fc62 	bl	80080a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <SystemClock_Config+0xd0>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a28      	ldr	r2, [pc, #160]	@ (8000898 <SystemClock_Config+0xd0>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <SystemClock_Config+0xd0>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemClock_Config+0xd4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000814:	4a21      	ldr	r2, [pc, #132]	@ (800089c <SystemClock_Config+0xd4>)
 8000816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <SystemClock_Config+0xd4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800083c:	2319      	movs	r3, #25
 800083e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000840:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000844:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000846:	2304      	movs	r3, #4
 8000848:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800084a:	2307      	movs	r3, #7
 800084c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	4618      	mov	r0, r3
 8000854:	f002 ff5a 	bl	800370c <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800085e:	f000 f8ad 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2302      	movs	r3, #2
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000872:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2102      	movs	r1, #2
 800087e:	4618      	mov	r0, r3
 8000880:	f003 f9bc 	bl	8003bfc <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800088a:	f000 f897 	bl	80009bc <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	@ 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <MX_I2C1_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <MX_I2C1_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008de:	f000 fc9f 	bl	8001220 <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 f868 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000118 	.word	0x20000118
 80008f4:	40005400 	.word	0x40005400
 80008f8:	000186a0 	.word	0x000186a0

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a26      	ldr	r2, [pc, #152]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a1f      	ldr	r2, [pc, #124]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a18      	ldr	r2, [pc, #96]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a11      	ldr	r2, [pc, #68]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_GPIO_Init+0xb8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDLight_GPIO_Port, LEDLight_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000988:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <MX_GPIO_Init+0xbc>)
 800098a:	f000 fc2f 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDLight_Pin */
  GPIO_InitStruct.Pin = LEDLight_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDLight_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_GPIO_Init+0xbc>)
 80009a8:	f000 fa9c 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	@ 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020800 	.word	0x40020800

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_I2C_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <HAL_I2C_MspInit+0x8c>)
 8000a74:	f000 fa36 	bl	8000ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f89b 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <OTG_FS_IRQHandler+0x10>)
 8000b0e:	f001 fcef 	bl	80024f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000e50 	.word	0x20000e50

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b44:	f7ff ffea 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	@ (8000b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f007 fa9f 	bl	80080b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b72:	f7ff fca7 	bl	80004c4 <main>
  bx  lr    
 8000b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000b84:	08008258 	.word	0x08008258
  ldr r2, =_sbss
 8000b88:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000b8c:	20001554 	.word	0x20001554

08000b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <HAL_Init+0x40>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <HAL_Init+0x40>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <HAL_Init+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f94f 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f000 f808 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fefe 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_InitTick+0x54>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <HAL_InitTick+0x58>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f967 	bl	8000eca <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00e      	b.n	8000c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d80a      	bhi.n	8000c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f000 f92f 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4a06      	ldr	r2, [pc, #24]	@ (8000c34 <HAL_InitTick+0x5c>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	2000016c 	.word	0x2000016c

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000016c 	.word	0x2000016c

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	@ (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	@ 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff3e 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff31 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffa2 	bl	8000e1c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e159      	b.n	80011b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8148 	bne.w	80011ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a2 	beq.w	80011ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b57      	ldr	r3, [pc, #348]	@ (80011cc <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	4a56      	ldr	r2, [pc, #344]	@ (80011cc <HAL_GPIO_Init+0x2e8>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001078:	6453      	str	r3, [r2, #68]	@ 0x44
 800107a:	4b54      	ldr	r3, [pc, #336]	@ (80011cc <HAL_GPIO_Init+0x2e8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a52      	ldr	r2, [pc, #328]	@ (80011d0 <HAL_GPIO_Init+0x2ec>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a49      	ldr	r2, [pc, #292]	@ (80011d4 <HAL_GPIO_Init+0x2f0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x202>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a48      	ldr	r2, [pc, #288]	@ (80011d8 <HAL_GPIO_Init+0x2f4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x1fe>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a47      	ldr	r2, [pc, #284]	@ (80011dc <HAL_GPIO_Init+0x2f8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x1fa>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a46      	ldr	r2, [pc, #280]	@ (80011e0 <HAL_GPIO_Init+0x2fc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x1f6>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a45      	ldr	r2, [pc, #276]	@ (80011e4 <HAL_GPIO_Init+0x300>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x1f2>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	@ (80011d0 <HAL_GPIO_Init+0x2ec>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b38      	ldr	r3, [pc, #224]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a2f      	ldr	r2, [pc, #188]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a24      	ldr	r2, [pc, #144]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117e:	4a1a      	ldr	r2, [pc, #104]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f aea2 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	@ 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e12b      	b.n	800148a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fbe6 	bl	8000a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2224      	movs	r2, #36	@ 0x24
 8001250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001272:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001282:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001284:	f002 fe72 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 8001288:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4a81      	ldr	r2, [pc, #516]	@ (8001494 <HAL_I2C_Init+0x274>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d807      	bhi.n	80012a4 <HAL_I2C_Init+0x84>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4a80      	ldr	r2, [pc, #512]	@ (8001498 <HAL_I2C_Init+0x278>)
 8001298:	4293      	cmp	r3, r2
 800129a:	bf94      	ite	ls
 800129c:	2301      	movls	r3, #1
 800129e:	2300      	movhi	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	e006      	b.n	80012b2 <HAL_I2C_Init+0x92>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4a7d      	ldr	r2, [pc, #500]	@ (800149c <HAL_I2C_Init+0x27c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	bf94      	ite	ls
 80012ac:	2301      	movls	r3, #1
 80012ae:	2300      	movhi	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e0e7      	b.n	800148a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4a78      	ldr	r2, [pc, #480]	@ (80014a0 <HAL_I2C_Init+0x280>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0c9b      	lsrs	r3, r3, #18
 80012c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001494 <HAL_I2C_Init+0x274>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d802      	bhi.n	80012f4 <HAL_I2C_Init+0xd4>
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	3301      	adds	r3, #1
 80012f2:	e009      	b.n	8001308 <HAL_I2C_Init+0xe8>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012fa:	fb02 f303 	mul.w	r3, r2, r3
 80012fe:	4a69      	ldr	r2, [pc, #420]	@ (80014a4 <HAL_I2C_Init+0x284>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	099b      	lsrs	r3, r3, #6
 8001306:	3301      	adds	r3, #1
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	430b      	orrs	r3, r1
 800130e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800131a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	495c      	ldr	r1, [pc, #368]	@ (8001494 <HAL_I2C_Init+0x274>)
 8001324:	428b      	cmp	r3, r1
 8001326:	d819      	bhi.n	800135c <HAL_I2C_Init+0x13c>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1e59      	subs	r1, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fbb1 f3f3 	udiv	r3, r1, r3
 8001336:	1c59      	adds	r1, r3, #1
 8001338:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800133c:	400b      	ands	r3, r1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <HAL_I2C_Init+0x138>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1e59      	subs	r1, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001350:	3301      	adds	r3, #1
 8001352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001356:	e051      	b.n	80013fc <HAL_I2C_Init+0x1dc>
 8001358:	2304      	movs	r3, #4
 800135a:	e04f      	b.n	80013fc <HAL_I2C_Init+0x1dc>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d111      	bne.n	8001388 <HAL_I2C_Init+0x168>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1e58      	subs	r0, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	440b      	add	r3, r1
 8001372:	fbb0 f3f3 	udiv	r3, r0, r3
 8001376:	3301      	adds	r3, #1
 8001378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf0c      	ite	eq
 8001380:	2301      	moveq	r3, #1
 8001382:	2300      	movne	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	e012      	b.n	80013ae <HAL_I2C_Init+0x18e>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1e58      	subs	r0, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	0099      	lsls	r1, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	fbb0 f3f3 	udiv	r3, r0, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf0c      	ite	eq
 80013a8:	2301      	moveq	r3, #1
 80013aa:	2300      	movne	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_Init+0x196>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e022      	b.n	80013fc <HAL_I2C_Init+0x1dc>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10e      	bne.n	80013dc <HAL_I2C_Init+0x1bc>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1e58      	subs	r0, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6859      	ldr	r1, [r3, #4]
 80013c6:	460b      	mov	r3, r1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	440b      	add	r3, r1
 80013cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d0:	3301      	adds	r3, #1
 80013d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013da:	e00f      	b.n	80013fc <HAL_I2C_Init+0x1dc>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1e58      	subs	r0, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	0099      	lsls	r1, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	6809      	ldr	r1, [r1, #0]
 8001400:	4313      	orrs	r3, r2
 8001402:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800142a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6911      	ldr	r1, [r2, #16]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68d2      	ldr	r2, [r2, #12]
 8001436:	4311      	orrs	r1, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	430b      	orrs	r3, r1
 800143e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	000186a0 	.word	0x000186a0
 8001498:	001e847f 	.word	0x001e847f
 800149c:	003d08ff 	.word	0x003d08ff
 80014a0:	431bde83 	.word	0x431bde83
 80014a4:	10624dd3 	.word	0x10624dd3

080014a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	817b      	strh	r3, [r7, #10]
 80014ba:	460b      	mov	r3, r1
 80014bc:	813b      	strh	r3, [r7, #8]
 80014be:	4613      	mov	r3, r2
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014c2:	f7ff fbcd 	bl	8000c60 <HAL_GetTick>
 80014c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	f040 80d9 	bne.w	8001688 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2319      	movs	r3, #25
 80014dc:	2201      	movs	r2, #1
 80014de:	496d      	ldr	r1, [pc, #436]	@ (8001694 <HAL_I2C_Mem_Write+0x1ec>)
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 fc8b 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80014ec:	2302      	movs	r3, #2
 80014ee:	e0cc      	b.n	800168a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_I2C_Mem_Write+0x56>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e0c5      	b.n	800168a <HAL_I2C_Mem_Write+0x1e2>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d007      	beq.n	8001524 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2221      	movs	r2, #33	@ 0x21
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2240      	movs	r2, #64	@ 0x40
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a3a      	ldr	r2, [r7, #32]
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001554:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155a:	b29a      	uxth	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4a4d      	ldr	r2, [pc, #308]	@ (8001698 <HAL_I2C_Mem_Write+0x1f0>)
 8001564:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001566:	88f8      	ldrh	r0, [r7, #6]
 8001568:	893a      	ldrh	r2, [r7, #8]
 800156a:	8979      	ldrh	r1, [r7, #10]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4603      	mov	r3, r0
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fac2 	bl	8001b00 <I2C_RequestMemoryWrite>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d052      	beq.n	8001628 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e081      	b.n	800168a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 fd50 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00d      	beq.n	80015b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	2b04      	cmp	r3, #4
 800159c:	d107      	bne.n	80015ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e06b      	b.n	800168a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d11b      	bne.n	8001628 <HAL_I2C_Mem_Write+0x180>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d017      	beq.n	8001628 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001612:	3b01      	subs	r3, #1
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	3b01      	subs	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1aa      	bne.n	8001586 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fd43 	bl	80020c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00d      	beq.n	800165c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	2b04      	cmp	r3, #4
 8001646:	d107      	bne.n	8001658 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001656:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e016      	b.n	800168a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800166a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	e000      	b.n	800168a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001688:	2302      	movs	r3, #2
  }
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	00100002 	.word	0x00100002
 8001698:	ffff0000 	.word	0xffff0000

0800169c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	@ 0x30
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	817b      	strh	r3, [r7, #10]
 80016ae:	460b      	mov	r3, r1
 80016b0:	813b      	strh	r3, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016b6:	f7ff fad3 	bl	8000c60 <HAL_GetTick>
 80016ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	f040 8214 	bne.w	8001af2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2319      	movs	r3, #25
 80016d0:	2201      	movs	r2, #1
 80016d2:	497b      	ldr	r1, [pc, #492]	@ (80018c0 <HAL_I2C_Mem_Read+0x224>)
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fb91 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
 80016e2:	e207      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Mem_Read+0x56>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e200      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d007      	beq.n	8001718 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001726:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2222      	movs	r2, #34	@ 0x22
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	@ 0x40
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a5b      	ldr	r2, [pc, #364]	@ (80018c4 <HAL_I2C_Mem_Read+0x228>)
 8001758:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800175a:	88f8      	ldrh	r0, [r7, #6]
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4603      	mov	r3, r0
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fa5e 	bl	8001c2c <I2C_RequestMemoryRead>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1bc      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177e:	2b00      	cmp	r3, #0
 8001780:	d113      	bne.n	80017aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	623b      	str	r3, [r7, #32]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e190      	b.n	8001acc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d11b      	bne.n	80017ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e170      	b.n	8001acc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d11b      	bne.n	800182a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001800:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	e150      	b.n	8001acc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001840:	e144      	b.n	8001acc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001846:	2b03      	cmp	r3, #3
 8001848:	f200 80f1 	bhi.w	8001a2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001850:	2b01      	cmp	r3, #1
 8001852:	d123      	bne.n	800189c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001856:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 fc79 	bl	8002150 <I2C_WaitOnRXNEFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e145      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800189a:	e117      	b.n	8001acc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d14e      	bne.n	8001942 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018aa:	2200      	movs	r2, #0
 80018ac:	4906      	ldr	r1, [pc, #24]	@ (80018c8 <HAL_I2C_Mem_Read+0x22c>)
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 faa4 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d008      	beq.n	80018cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e11a      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
 80018be:	bf00      	nop
 80018c0:	00100002 	.word	0x00100002
 80018c4:	ffff0000 	.word	0xffff0000
 80018c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001940:	e0c4      	b.n	8001acc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001948:	2200      	movs	r2, #0
 800194a:	496c      	ldr	r1, [pc, #432]	@ (8001afc <HAL_I2C_Mem_Read+0x460>)
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fa55 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0cb      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800196a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019a4:	2200      	movs	r2, #0
 80019a6:	4955      	ldr	r1, [pc, #340]	@ (8001afc <HAL_I2C_Mem_Read+0x460>)
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fa27 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e09d      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a2c:	e04e      	b.n	8001acc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fb8c 	bl	8002150 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e058      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d124      	bne.n	8001acc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d107      	bne.n	8001a9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f aeb6 	bne.w	8001842 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3728      	adds	r7, #40	@ 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	00010004 	.word	0x00010004

08001b00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	817b      	strh	r3, [r7, #10]
 8001b12:	460b      	mov	r3, r1
 8001b14:	813b      	strh	r3, [r7, #8]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f960 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00d      	beq.n	8001b5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b50:	d103      	bne.n	8001b5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e05f      	b.n	8001c1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	6a3a      	ldr	r2, [r7, #32]
 8001b72:	492d      	ldr	r1, [pc, #180]	@ (8001c28 <I2C_RequestMemoryWrite+0x128>)
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 f9bb 	bl	8001ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e04c      	b.n	8001c1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9c:	6a39      	ldr	r1, [r7, #32]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa46 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d107      	bne.n	8001bc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e02b      	b.n	8001c1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bcc:	893b      	ldrh	r3, [r7, #8]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	e021      	b.n	8001c1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bd8:	893b      	ldrh	r3, [r7, #8]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be8:	6a39      	ldr	r1, [r7, #32]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fa20 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00d      	beq.n	8001c12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d107      	bne.n	8001c0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e005      	b.n	8001c1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c12:	893b      	ldrh	r3, [r7, #8]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	00010002 	.word	0x00010002

08001c2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	817b      	strh	r3, [r7, #10]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	813b      	strh	r3, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f8c2 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00d      	beq.n	8001c9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c8c:	d103      	bne.n	8001c96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0aa      	b.n	8001df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	6a3a      	ldr	r2, [r7, #32]
 8001cae:	4952      	ldr	r1, [pc, #328]	@ (8001df8 <I2C_RequestMemoryRead+0x1cc>)
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f91d 	bl	8001ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e097      	b.n	8001df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd8:	6a39      	ldr	r1, [r7, #32]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f9a8 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00d      	beq.n	8001d02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d107      	bne.n	8001cfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e076      	b.n	8001df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	e021      	b.n	8001d58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d14:	893b      	ldrh	r3, [r7, #8]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f982 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00d      	beq.n	8001d4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d107      	bne.n	8001d4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e050      	b.n	8001df0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d4e:	893b      	ldrh	r3, [r7, #8]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d5a:	6a39      	ldr	r1, [r7, #32]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f967 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00d      	beq.n	8001d84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d107      	bne.n	8001d80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e035      	b.n	8001df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f82b 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dba:	d103      	bne.n	8001dc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e013      	b.n	8001df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dc8:	897b      	ldrh	r3, [r7, #10]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	4906      	ldr	r1, [pc, #24]	@ (8001df8 <I2C_RequestMemoryRead+0x1cc>)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f886 	bl	8001ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	00010002 	.word	0x00010002

08001dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e0c:	e048      	b.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d044      	beq.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e16:	f7fe ff23 	bl	8000c60 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d302      	bcc.n	8001e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d139      	bne.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10d      	bne.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4013      	ands	r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	e00c      	b.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d116      	bne.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e023      	b.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	0c1b      	lsrs	r3, r3, #16
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10d      	bne.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	e00c      	b.n	8001ee0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d093      	beq.n	8001e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001efe:	e071      	b.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0e:	d123      	bne.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f043 0204 	orr.w	r2, r3, #4
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e067      	b.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5e:	d041      	beq.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f60:	f7fe fe7e 	bl	8000c60 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d302      	bcc.n	8001f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d136      	bne.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d10c      	bne.n	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bf14      	ite	ne
 8001f92:	2301      	movne	r3, #1
 8001f94:	2300      	moveq	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	e00b      	b.n	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e021      	b.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	0c1b      	lsrs	r3, r3, #16
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10c      	bne.n	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e00b      	b.n	8002020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4013      	ands	r3, r2
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f47f af6d 	bne.w	8001f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800203c:	e034      	b.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f8e3 	bl	800220a <I2C_IsAcknowledgeFailed>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e034      	b.n	80020b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d028      	beq.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002056:	f7fe fe03 	bl	8000c60 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d11d      	bne.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002076:	2b80      	cmp	r3, #128	@ 0x80
 8002078:	d016      	beq.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e007      	b.n	80020b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b2:	2b80      	cmp	r3, #128	@ 0x80
 80020b4:	d1c3      	bne.n	800203e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020cc:	e034      	b.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f89b 	bl	800220a <I2C_IsAcknowledgeFailed>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e034      	b.n	8002148 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d028      	beq.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7fe fdbb 	bl	8000c60 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d11d      	bne.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d016      	beq.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e007      	b.n	8002148 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d1c3      	bne.n	80020ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800215c:	e049      	b.n	80021f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b10      	cmp	r3, #16
 800216a:	d119      	bne.n	80021a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0210 	mvn.w	r2, #16
 8002174:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e030      	b.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a0:	f7fe fd5e 	bl	8000c60 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d302      	bcc.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d11d      	bne.n	80021f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c0:	2b40      	cmp	r3, #64	@ 0x40
 80021c2:	d016      	beq.n	80021f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e007      	b.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fc:	2b40      	cmp	r3, #64	@ 0x40
 80021fe:	d1ae      	bne.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002220:	d11b      	bne.n	800225a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800222a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af02      	add	r7, sp, #8
 800226e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e101      	b.n	800247e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f005 fb9d 	bl	80079d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a8:	d102      	bne.n	80022b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f001 ff84 	bl	80041c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7c1a      	ldrb	r2, [r3, #16]
 80022c2:	f88d 2000 	strb.w	r2, [sp]
 80022c6:	3304      	adds	r3, #4
 80022c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ca:	f001 fe63 	bl	8003f94 <USB_CoreInit>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0ce      	b.n	800247e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 ff7c 	bl	80041e4 <USB_SetCurrentMode>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0bf      	b.n	800247e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e04a      	b.n	800239a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3315      	adds	r3, #21
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	3314      	adds	r3, #20
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	b298      	uxth	r0, r3
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	332e      	adds	r3, #46	@ 0x2e
 8002340:	4602      	mov	r2, r0
 8002342:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3318      	adds	r3, #24
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	331c      	adds	r3, #28
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3320      	adds	r3, #32
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3324      	adds	r3, #36	@ 0x24
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	3301      	adds	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	791b      	ldrb	r3, [r3, #4]
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3af      	bcc.n	8002304 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e044      	b.n	8002434 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	3301      	adds	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	429a      	cmp	r2, r3
 800243c:	d3b5      	bcc.n	80023aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7c1a      	ldrb	r2, [r3, #16]
 8002446:	f88d 2000 	strb.w	r2, [sp]
 800244a:	3304      	adds	r3, #4
 800244c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244e:	f001 ff15 	bl	800427c <USB_DevInit>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e00c      	b.n	800247e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f002 ff5f 	bl	800533a <USB_DevDisconnect>

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_PCD_Start+0x1c>
 800249e:	2302      	movs	r3, #2
 80024a0:	e022      	b.n	80024e8 <HAL_PCD_Start+0x62>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f001 fe66 	bl	80041a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 ff0d 	bl	80052f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b08d      	sub	sp, #52	@ 0x34
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 ffcb 	bl	80054a2 <USB_GetMode>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 848c 	bne.w	8002e2c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f002 ff2f 	bl	800537c <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8482 	beq.w	8002e2a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f002 ff1c 	bl	800537c <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d107      	bne.n	800255e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f002 0202 	and.w	r2, r2, #2
 800255c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f002 ff0a 	bl	800537c <USB_ReadInterrupts>
 8002568:	4603      	mov	r3, r0
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b10      	cmp	r3, #16
 8002570:	d161      	bne.n	8002636 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0210 	bic.w	r2, r2, #16
 8002580:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f003 020f 	and.w	r2, r3, #15
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	3304      	adds	r3, #4
 80025a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	0c5b      	lsrs	r3, r3, #17
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d124      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d035      	beq.n	8002626 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	6a38      	ldr	r0, [r7, #32]
 80025ce:	f002 fd41 	bl	8005054 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025de:	441a      	add	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f0:	441a      	add	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	615a      	str	r2, [r3, #20]
 80025f6:	e016      	b.n	8002626 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	0c5b      	lsrs	r3, r3, #17
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	2b06      	cmp	r3, #6
 8002602:	d110      	bne.n	8002626 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800260a:	2208      	movs	r2, #8
 800260c:	4619      	mov	r1, r3
 800260e:	6a38      	ldr	r0, [r7, #32]
 8002610:	f002 fd20 	bl	8005054 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002620:	441a      	add	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0210 	orr.w	r2, r2, #16
 8002634:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f002 fe9e 	bl	800537c <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002646:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800264a:	f040 80a7 	bne.w	800279c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fea3 	bl	80053a2 <USB_ReadDevAllOutEpInterrupt>
 800265c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800265e:	e099      	b.n	8002794 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 808e 	beq.w	8002788 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fec7 	bl	800540a <USB_ReadDevOutEPInterrupt>
 800267c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002694:	461a      	mov	r2, r3
 8002696:	2301      	movs	r3, #1
 8002698:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800269a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fea3 	bl	80033e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b8:	461a      	mov	r2, r3
 80026ba:	2308      	movs	r3, #8
 80026bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 ff79 	bl	80035b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026dc:	461a      	mov	r2, r3
 80026de:	2310      	movs	r3, #16
 80026e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d030      	beq.n	800274e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f4:	2b80      	cmp	r3, #128	@ 0x80
 80026f6:	d109      	bne.n	800270c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002706:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800270a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800270c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	3304      	adds	r3, #4
 8002720:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	78db      	ldrb	r3, [r3, #3]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d108      	bne.n	800273c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2200      	movs	r2, #0
 800272e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f005 fa48 	bl	8007bcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002748:	461a      	mov	r2, r3
 800274a:	2302      	movs	r3, #2
 800274c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002764:	461a      	mov	r2, r3
 8002766:	2320      	movs	r3, #32
 8002768:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002780:	461a      	mov	r2, r3
 8002782:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002786:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	3301      	adds	r3, #1
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800278e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	f47f af62 	bne.w	8002660 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 fdeb 	bl	800537c <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027b0:	f040 80db 	bne.w	800296a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fe0c 	bl	80053d6 <USB_ReadDevAllInEpInterrupt>
 80027be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80027c4:	e0cd      	b.n	8002962 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80c2 	beq.w	8002956 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fe32 	bl	8005446 <USB_ReadDevInEPInterrupt>
 80027e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d057      	beq.n	800289e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	2201      	movs	r2, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43db      	mvns	r3, r3
 8002808:	69f9      	ldr	r1, [r7, #28]
 800280a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800280e:	4013      	ands	r3, r2
 8002810:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800281e:	461a      	mov	r2, r3
 8002820:	2301      	movs	r3, #1
 8002822:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	799b      	ldrb	r3, [r3, #6]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d132      	bne.n	8002892 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3320      	adds	r3, #32
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4403      	add	r3, r0
 800284c:	331c      	adds	r3, #28
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4419      	add	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4403      	add	r3, r0
 8002860:	3320      	adds	r3, #32
 8002862:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d113      	bne.n	8002892 <HAL_PCD_IRQHandler+0x3a2>
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3324      	adds	r3, #36	@ 0x24
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d108      	bne.n	8002892 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800288a:	461a      	mov	r2, r3
 800288c:	2101      	movs	r1, #1
 800288e:	f002 fe39 	bl	8005504 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	b2db      	uxtb	r3, r3
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f005 f91c 	bl	8007ad6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028b4:	461a      	mov	r2, r3
 80028b6:	2308      	movs	r3, #8
 80028b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028d0:	461a      	mov	r2, r3
 80028d2:	2310      	movs	r3, #16
 80028d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ec:	461a      	mov	r2, r3
 80028ee:	2340      	movs	r3, #64	@ 0x40
 80028f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d023      	beq.n	8002944 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028fe:	6a38      	ldr	r0, [r7, #32]
 8002900:	f001 fe20 	bl	8004544 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	3310      	adds	r3, #16
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	78db      	ldrb	r3, [r3, #3]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f005 f95f 	bl	8007bf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800293e:	461a      	mov	r2, r3
 8002940:	2302      	movs	r3, #2
 8002942:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800294e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fcbd 	bl	80032d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	3301      	adds	r3, #1
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	f47f af2e 	bne.w	80027c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fd04 	bl	800537c <USB_ReadInterrupts>
 8002974:	4603      	mov	r3, r0
 8002976:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800297a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800297e:	d122      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029a6:	2100      	movs	r1, #0
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fea3 	bl	80036f4 <HAL_PCDEx_LPM_Callback>
 80029ae:	e002      	b.n	80029b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f005 f8fd 	bl	8007bb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80029c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fcd6 	bl	800537c <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029da:	d112      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f005 f8b9 	bl	8007b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a00:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fcb8 	bl	800537c <USB_ReadInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a16:	f040 80b7 	bne.w	8002b88 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2110      	movs	r1, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 fd85 	bl	8004544 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a3e:	e046      	b.n	8002ace <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a80:	461a      	mov	r2, r3
 8002a82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a98:	0151      	lsls	r1, r2, #5
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002aa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002aa6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ac2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ac6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aca:	3301      	adds	r3, #1
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	791b      	ldrb	r3, [r3, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d3b2      	bcc.n	8002a40 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002aec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7bdb      	ldrb	r3, [r3, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b06:	f043 030b 	orr.w	r3, r3, #11
 8002b0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b1c:	f043 030b 	orr.w	r3, r3, #11
 8002b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b22:	e015      	b.n	8002b50 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b36:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b4a:	f043 030b 	orr.w	r3, r3, #11
 8002b4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b72:	461a      	mov	r2, r3
 8002b74:	f002 fcc6 	bl	8005504 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 fbf5 	bl	800537c <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b9c:	d123      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 fc8b 	bl	80054be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 fd42 	bl	8004636 <USB_GetDevSpeed>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681c      	ldr	r4, [r3, #0]
 8002bbe:	f001 f9c9 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8002bc2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f001 fa46 	bl	800405c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f004 ffa8 	bl	8007b26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 fbc6 	bl	800537c <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d10a      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f004 ff85 	bl	8007b0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f002 0208 	and.w	r2, r2, #8
 8002c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fbb1 	bl	800537c <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c20:	2b80      	cmp	r3, #128	@ 0x80
 8002c22:	d123      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c30:	2301      	movs	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c34:	e014      	b.n	8002c60 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d105      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fb0a 	bl	800326e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	791b      	ldrb	r3, [r3, #4]
 8002c64:	461a      	mov	r2, r3
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d3e4      	bcc.n	8002c36 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 fb83 	bl	800537c <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c80:	d13c      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c82:	2301      	movs	r3, #1
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c86:	e02b      	b.n	8002ce0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d115      	bne.n	8002cda <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da12      	bge.n	8002cda <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3317      	adds	r3, #23
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 faca 	bl	800326e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	3301      	adds	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	791b      	ldrb	r3, [r3, #4]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d3cd      	bcc.n	8002c88 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fb3b 	bl	800537c <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d10:	d156      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d12:	2301      	movs	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	e045      	b.n	8002da4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d12e      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da2b      	bge.n	8002d9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d121      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d9a:	6053      	str	r3, [r2, #4]
            break;
 8002d9c:	e008      	b.n	8002db0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	3301      	adds	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	791b      	ldrb	r3, [r3, #4]
 8002da8:	461a      	mov	r2, r3
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d3b3      	bcc.n	8002d18 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 fad9 	bl	800537c <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd4:	d10a      	bne.n	8002dec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f004 ff1c 	bl	8007c14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fac3 	bl	800537c <USB_ReadInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d115      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f004 ff0c 	bl	8007c30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	e000      	b.n	8002e2c <HAL_PCD_IRQHandler+0x93c>
      return;
 8002e2a:	bf00      	nop
    }
  }
}
 8002e2c:	3734      	adds	r7, #52	@ 0x34
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}

08002e32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_PCD_SetAddress+0x1a>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e012      	b.n	8002e72 <HAL_PCD_SetAddress+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f002 fa22 	bl	80052ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	4608      	mov	r0, r1
 8002e84:	4611      	mov	r1, r2
 8002e86:	461a      	mov	r2, r3
 8002e88:	4603      	mov	r3, r0
 8002e8a:	70fb      	strb	r3, [r7, #3]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	803b      	strh	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	da0f      	bge.n	8002ec0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	3310      	adds	r3, #16
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	705a      	strb	r2, [r3, #1]
 8002ebe:	e00f      	b.n	8002ee0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 020f 	and.w	r2, r3, #15
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002eec:	883b      	ldrh	r3, [r7, #0]
 8002eee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	78ba      	ldrb	r2, [r7, #2]
 8002efa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	785b      	ldrb	r3, [r3, #1]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f0e:	78bb      	ldrb	r3, [r7, #2]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d102      	bne.n	8002f1a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_PCD_EP_Open+0xae>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e00e      	b.n	8002f46 <HAL_PCD_EP_Open+0xcc>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68f9      	ldr	r1, [r7, #12]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 fba2 	bl	8004680 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f44:	7afb      	ldrb	r3, [r7, #11]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da0f      	bge.n	8002f82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	3310      	adds	r3, #16
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	705a      	strb	r2, [r3, #1]
 8002f80:	e00f      	b.n	8002fa2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 020f 	and.w	r2, r3, #15
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	3304      	adds	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_PCD_EP_Close+0x6e>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e00e      	b.n	8002fda <HAL_PCD_EP_Close+0x8c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68f9      	ldr	r1, [r7, #12]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 fbe0 	bl	8004790 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003024:	7afb      	ldrb	r3, [r7, #11]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	b2da      	uxtb	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	799b      	ldrb	r3, [r3, #6]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d102      	bne.n	800303e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	799b      	ldrb	r3, [r3, #6]
 8003046:	461a      	mov	r2, r3
 8003048:	6979      	ldr	r1, [r7, #20]
 800304a:	f001 fc7d 	bl	8004948 <USB_EPStartXfer>

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 020f 	and.w	r2, r3, #15
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	460b      	mov	r3, r1
 8003096:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	3310      	adds	r3, #16
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	3304      	adds	r3, #4
 80030ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2201      	movs	r2, #1
 80030c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c8:	7afb      	ldrb	r3, [r7, #11]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	799b      	ldrb	r3, [r3, #6]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d102      	bne.n	80030e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	799b      	ldrb	r3, [r3, #6]
 80030ea:	461a      	mov	r2, r3
 80030ec:	6979      	ldr	r1, [r7, #20]
 80030ee:	f001 fc2b 	bl	8004948 <USB_EPStartXfer>

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	7912      	ldrb	r2, [r2, #4]
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e04f      	b.n	80031ba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800311a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800311e:	2b00      	cmp	r3, #0
 8003120:	da0f      	bge.n	8003142 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	3310      	adds	r3, #16
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	3304      	adds	r3, #4
 8003138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	705a      	strb	r2, [r3, #1]
 8003140:	e00d      	b.n	800315e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_PCD_EP_SetStall+0x82>
 800317a:	2302      	movs	r3, #2
 800317c:	e01d      	b.n	80031ba <HAL_PCD_EP_SetStall+0xbe>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	4618      	mov	r0, r3
 800318e:	f001 ffb9 	bl	8005104 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7999      	ldrb	r1, [r3, #6]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031aa:	461a      	mov	r2, r3
 80031ac:	f002 f9aa 	bl	8005504 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	7912      	ldrb	r2, [r2, #4]
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e042      	b.n	8003266 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	da0f      	bge.n	8003208 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	3310      	adds	r3, #16
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	705a      	strb	r2, [r3, #1]
 8003206:	e00f      	b.n	8003228 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_PCD_EP_ClrStall+0x86>
 8003244:	2302      	movs	r3, #2
 8003246:	e00e      	b.n	8003266 <HAL_PCD_EP_ClrStall+0xa4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68f9      	ldr	r1, [r7, #12]
 8003256:	4618      	mov	r0, r3
 8003258:	f001 ffc2 	bl	80051e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800327a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	da0c      	bge.n	800329c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	3310      	adds	r3, #16
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	3304      	adds	r3, #4
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e00c      	b.n	80032b6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 020f 	and.w	r2, r3, #15
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fde1 	bl	8004e84 <USB_EPStopXfer>
 80032c2:	4603      	mov	r3, r0
 80032c4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032c6:	7afb      	ldrb	r3, [r7, #11]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	3310      	adds	r3, #16
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	3304      	adds	r3, #4
 80032f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d901      	bls.n	8003308 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e06b      	b.n	80033e0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	429a      	cmp	r2, r3
 800331c:	d902      	bls.n	8003324 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	3303      	adds	r3, #3
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800332c:	e02a      	b.n	8003384 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	429a      	cmp	r2, r3
 8003342:	d902      	bls.n	800334a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3303      	adds	r3, #3
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	6978      	ldr	r0, [r7, #20]
 8003368:	f001 fe36 	bl	8004fd8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	441a      	add	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	429a      	cmp	r2, r3
 8003398:	d809      	bhi.n	80033ae <PCD_WriteEmptyTxFifo+0xde>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d203      	bcs.n	80033ae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1bf      	bne.n	800332e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d811      	bhi.n	80033de <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	2201      	movs	r2, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033da:	4013      	ands	r3, r2
 80033dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	333c      	adds	r3, #60	@ 0x3c
 8003400:	3304      	adds	r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	799b      	ldrb	r3, [r3, #6]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d17b      	bne.n	8003516 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4a61      	ldr	r2, [pc, #388]	@ (80035b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	f240 80b9 	bls.w	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80b3 	beq.w	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800344a:	461a      	mov	r2, r3
 800344c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003450:	6093      	str	r3, [r2, #8]
 8003452:	e0a7      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	2320      	movs	r3, #32
 800346e:	6093      	str	r3, [r2, #8]
 8003470:	e098      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	f040 8093 	bne.w	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4a4b      	ldr	r2, [pc, #300]	@ (80035b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d90f      	bls.n	80034a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800349c:	461a      	mov	r2, r3
 800349e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a2:	6093      	str	r3, [r2, #8]
 80034a4:	e07e      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	0159      	lsls	r1, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	1ad2      	subs	r2, r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d114      	bne.n	8003508 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034f0:	461a      	mov	r2, r3
 80034f2:	2101      	movs	r1, #1
 80034f4:	f002 f806 	bl	8005504 <USB_EP0_OutStart>
 80034f8:	e006      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	441a      	add	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4619      	mov	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f004 fac6 	bl	8007aa0 <HAL_PCD_DataOutStageCallback>
 8003514:	e046      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4a26      	ldr	r2, [pc, #152]	@ (80035b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d124      	bne.n	8003568 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003534:	461a      	mov	r2, r3
 8003536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800353a:	6093      	str	r3, [r2, #8]
 800353c:	e032      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	2320      	movs	r3, #32
 8003558:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f004 fa9d 	bl	8007aa0 <HAL_PCD_DataOutStageCallback>
 8003566:	e01d      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <PCD_EP_OutXfrComplete_int+0x1b0>
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003590:	461a      	mov	r2, r3
 8003592:	2100      	movs	r1, #0
 8003594:	f001 ffb6 	bl	8005504 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 fa7e 	bl	8007aa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	4f54300a 	.word	0x4f54300a
 80035b4:	4f54310a 	.word	0x4f54310a

080035b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	333c      	adds	r3, #60	@ 0x3c
 80035d0:	3304      	adds	r3, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d90e      	bls.n	800360c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003604:	461a      	mov	r2, r3
 8003606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800360a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f004 fa35 	bl	8007a7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <PCD_EP_OutSetupPacket_int+0x88>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d90c      	bls.n	8003634 <PCD_EP_OutSetupPacket_int+0x7c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	799b      	ldrb	r3, [r3, #6]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d108      	bne.n	8003634 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800362c:	461a      	mov	r2, r3
 800362e:	2101      	movs	r1, #1
 8003630:	f001 ff68 	bl	8005504 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	4f54300a 	.word	0x4f54300a

08003644 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
 8003650:	4613      	mov	r3, r2
 8003652:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003662:	883b      	ldrh	r3, [r7, #0]
 8003664:	0419      	lsls	r1, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	430a      	orrs	r2, r1
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003670:	e028      	b.n	80036c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4413      	add	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e00d      	b.n	80036a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	3340      	adds	r3, #64	@ 0x40
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3301      	adds	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3ec      	bcc.n	8003686 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036ac:	883b      	ldrh	r3, [r7, #0]
 80036ae:	0418      	lsls	r0, r3, #16
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	4302      	orrs	r2, r0
 80036bc:	3340      	adds	r3, #64	@ 0x40
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e267      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d075      	beq.n	8003816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800372a:	4b88      	ldr	r3, [pc, #544]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b04      	cmp	r3, #4
 8003734:	d00c      	beq.n	8003750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003736:	4b85      	ldr	r3, [pc, #532]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800373e:	2b08      	cmp	r3, #8
 8003740:	d112      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4b82      	ldr	r3, [pc, #520]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800374e:	d10b      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	4b7e      	ldr	r3, [pc, #504]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05b      	beq.n	8003814 <HAL_RCC_OscConfig+0x108>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d157      	bne.n	8003814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e242      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d106      	bne.n	8003780 <HAL_RCC_OscConfig+0x74>
 8003772:	4b76      	ldr	r3, [pc, #472]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e01d      	b.n	80037bc <HAL_RCC_OscConfig+0xb0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x98>
 800378a:	4b70      	ldr	r3, [pc, #448]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6f      	ldr	r2, [pc, #444]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b6d      	ldr	r3, [pc, #436]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6c      	ldr	r2, [pc, #432]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0xb0>
 80037a4:	4b69      	ldr	r3, [pc, #420]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a68      	ldr	r2, [pc, #416]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b66      	ldr	r3, [pc, #408]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a65      	ldr	r2, [pc, #404]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fd fa4c 	bl	8000c60 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fd fa48 	bl	8000c60 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	@ 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e207      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b5b      	ldr	r3, [pc, #364]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0xc0>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fd fa38 	bl	8000c60 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fd fa34 	bl	8000c60 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	@ 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1f3      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	4b51      	ldr	r3, [pc, #324]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0xe8>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d063      	beq.n	80038ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003822:	4b4a      	ldr	r3, [pc, #296]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003836:	2b08      	cmp	r3, #8
 8003838:	d11c      	bne.n	8003874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b44      	ldr	r3, [pc, #272]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x152>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1c7      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4937      	ldr	r1, [pc, #220]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	e03a      	b.n	80038ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <HAL_RCC_OscConfig+0x244>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd f9ed 	bl	8000c60 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388a:	f7fd f9e9 	bl	8000c60 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1a8      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b28      	ldr	r3, [pc, #160]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4925      	ldr	r1, [pc, #148]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <HAL_RCC_OscConfig+0x244>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fd f9cc 	bl	8000c60 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fd f9c8 	bl	8000c60 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e187      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d036      	beq.n	8003964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_RCC_OscConfig+0x248>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd f9ac 	bl	8000c60 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fd f9a8 	bl	8000c60 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e167      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x200>
 800392a:	e01b      	b.n	8003964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_RCC_OscConfig+0x248>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7fd f995 	bl	8000c60 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00e      	b.n	8003958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393a:	f7fd f991 	bl	8000c60 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d907      	bls.n	8003958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e150      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	42470000 	.word	0x42470000
 8003954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b88      	ldr	r3, [pc, #544]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ea      	bne.n	800393a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8097 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b81      	ldr	r3, [pc, #516]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4b7d      	ldr	r3, [pc, #500]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	@ 0x40
 8003992:	4b7a      	ldr	r3, [pc, #488]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b77      	ldr	r3, [pc, #476]	@ (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b74      	ldr	r3, [pc, #464]	@ (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a73      	ldr	r2, [pc, #460]	@ (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fd f951 	bl	8000c60 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fd f94d 	bl	8000c60 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e10c      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x2ea>
 80039e8:	4b64      	ldr	r3, [pc, #400]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	4a63      	ldr	r2, [pc, #396]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0x324>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x30c>
 80039fe:	4b5f      	ldr	r3, [pc, #380]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	4a5e      	ldr	r2, [pc, #376]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0x324>
 8003a18:	4b58      	ldr	r3, [pc, #352]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1c:	4a57      	ldr	r2, [pc, #348]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a24:	4b55      	ldr	r3, [pc, #340]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a28:	4a54      	ldr	r2, [pc, #336]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f023 0304 	bic.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd f912 	bl	8000c60 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fd f90e 	bl	8000c60 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0cb      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a56:	4b49      	ldr	r3, [pc, #292]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ee      	beq.n	8003a40 <HAL_RCC_OscConfig+0x334>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fd f8fc 	bl	8000c60 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fd f8f8 	bl	8000c60 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0b5      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a82:	4b3e      	ldr	r3, [pc, #248]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ee      	bne.n	8003a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b39      	ldr	r3, [pc, #228]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	4a38      	ldr	r2, [pc, #224]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a1 	beq.w	8003bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aaa:	4b34      	ldr	r3, [pc, #208]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d05c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d141      	bne.n	8003b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b31      	ldr	r3, [pc, #196]	@ (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd f8cc 	bl	8000c60 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd f8c8 	bl	8000c60 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e087      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b27      	ldr	r3, [pc, #156]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	491b      	ldr	r1, [pc, #108]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fd f8a1 	bl	8000c60 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fd f89d 	bl	8000c60 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e05c      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b34:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x416>
 8003b40:	e054      	b.n	8003bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fd f88a 	bl	8000c60 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fd f886 	bl	8000c60 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e045      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x444>
 8003b6e:	e03d      	b.n	8003bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e038      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ec>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d028      	beq.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d121      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d11a      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d111      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0cc      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b68      	ldr	r3, [pc, #416]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d90c      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b65      	ldr	r3, [pc, #404]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b63      	ldr	r3, [pc, #396]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b8      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c50:	4b59      	ldr	r3, [pc, #356]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a58      	ldr	r2, [pc, #352]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c68:	4b53      	ldr	r3, [pc, #332]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a52      	ldr	r2, [pc, #328]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b50      	ldr	r3, [pc, #320]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	494d      	ldr	r1, [pc, #308]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d044      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b47      	ldr	r3, [pc, #284]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d119      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	4b3f      	ldr	r3, [pc, #252]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cca:	4b3b      	ldr	r3, [pc, #236]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e067      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b37      	ldr	r3, [pc, #220]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4934      	ldr	r1, [pc, #208]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cec:	f7fc ffb8 	bl	8000c60 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7fc ffb4 	bl	8000c60 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e04f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b25      	ldr	r3, [pc, #148]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d20c      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b20      	ldr	r3, [pc, #128]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e032      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4916      	ldr	r1, [pc, #88]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	490e      	ldr	r1, [pc, #56]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d82:	f000 f821 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	490a      	ldr	r1, [pc, #40]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	5ccb      	ldrb	r3, [r1, r3]
 8003d96:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9a:	4a09      	ldr	r2, [pc, #36]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d9e:	4b09      	ldr	r3, [pc, #36]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc ff18 	bl	8000bd8 <HAL_InitTick>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023c00 	.word	0x40023c00
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	08008208 	.word	0x08008208
 8003dc0:	20000000 	.word	0x20000000
 8003dc4:	20000004 	.word	0x20000004

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b090      	sub	sp, #64	@ 0x40
 8003dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de0:	4b59      	ldr	r3, [pc, #356]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d00d      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x40>
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	f200 80a1 	bhi.w	8003f34 <HAL_RCC_GetSysClockFreq+0x16c>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x34>
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d003      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dfa:	e09b      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b53      	ldr	r3, [pc, #332]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e00:	e09b      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e02:	4b53      	ldr	r3, [pc, #332]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e06:	e098      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e08:	4b4f      	ldr	r3, [pc, #316]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e12:	4b4d      	ldr	r3, [pc, #308]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	099b      	lsrs	r3, r3, #6
 8003e24:	2200      	movs	r2, #0
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e30:	2100      	movs	r1, #0
 8003e32:	4b47      	ldr	r3, [pc, #284]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e34:	fb03 f201 	mul.w	r2, r3, r1
 8003e38:	2300      	movs	r3, #0
 8003e3a:	fb00 f303 	mul.w	r3, r0, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a43      	ldr	r2, [pc, #268]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e42:	fba0 1202 	umull	r1, r2, r0, r2
 8003e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e48:	460a      	mov	r2, r1
 8003e4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e4e:	4413      	add	r3, r2
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	2200      	movs	r2, #0
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	61fa      	str	r2, [r7, #28]
 8003e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e62:	f7fc f9b7 	bl	80001d4 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e6e:	e053      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e70:	4b35      	ldr	r3, [pc, #212]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	2200      	movs	r2, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	617a      	str	r2, [r7, #20]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e82:	f04f 0b00 	mov.w	fp, #0
 8003e86:	4652      	mov	r2, sl
 8003e88:	465b      	mov	r3, fp
 8003e8a:	f04f 0000 	mov.w	r0, #0
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	0159      	lsls	r1, r3, #5
 8003e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e98:	0150      	lsls	r0, r2, #5
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003ea2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eba:	ebb2 0408 	subs.w	r4, r2, r8
 8003ebe:	eb63 0509 	sbc.w	r5, r3, r9
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	00eb      	lsls	r3, r5, #3
 8003ecc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed0:	00e2      	lsls	r2, r4, #3
 8003ed2:	4614      	mov	r4, r2
 8003ed4:	461d      	mov	r5, r3
 8003ed6:	eb14 030a 	adds.w	r3, r4, sl
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	eb45 030b 	adc.w	r3, r5, fp
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eee:	4629      	mov	r1, r5
 8003ef0:	028b      	lsls	r3, r1, #10
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef8:	4621      	mov	r1, r4
 8003efa:	028a      	lsls	r2, r1, #10
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f02:	2200      	movs	r2, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	60fa      	str	r2, [r7, #12]
 8003f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f0c:	f7fc f962 	bl	80001d4 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3740      	adds	r7, #64	@ 0x40
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	017d7840 	.word	0x017d7840

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000000 	.word	0x20000000

08003f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f70:	f7ff fff0 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	@ (8003f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08008218 	.word	0x08008218

08003f94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f94:	b084      	sub	sp, #16
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	f107 001c 	add.w	r0, r7, #28
 8003fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fa6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d123      	bne.n	8003ff6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d105      	bne.n	8003fea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f001 fae8 	bl	80055c0 <USB_CoreReset>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	73fb      	strb	r3, [r7, #15]
 8003ff4:	e01b      	b.n	800402e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f001 fadc 	bl	80055c0 <USB_CoreReset>
 8004008:	4603      	mov	r3, r0
 800400a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800400c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004020:	e005      	b.n	800402e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800402e:	7fbb      	ldrb	r3, [r7, #30]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10b      	bne.n	800404c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f043 0206 	orr.w	r2, r3, #6
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004058:	b004      	add	sp, #16
 800405a:	4770      	bx	lr

0800405c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d165      	bne.n	800413c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4a41      	ldr	r2, [pc, #260]	@ (8004178 <USB_SetTurnaroundTime+0x11c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d906      	bls.n	8004086 <USB_SetTurnaroundTime+0x2a>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a40      	ldr	r2, [pc, #256]	@ (800417c <USB_SetTurnaroundTime+0x120>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d202      	bcs.n	8004086 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004080:	230f      	movs	r3, #15
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e062      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4a3c      	ldr	r2, [pc, #240]	@ (800417c <USB_SetTurnaroundTime+0x120>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d306      	bcc.n	800409c <USB_SetTurnaroundTime+0x40>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4a3b      	ldr	r2, [pc, #236]	@ (8004180 <USB_SetTurnaroundTime+0x124>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d202      	bcs.n	800409c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004096:	230e      	movs	r3, #14
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e057      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a38      	ldr	r2, [pc, #224]	@ (8004180 <USB_SetTurnaroundTime+0x124>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d306      	bcc.n	80040b2 <USB_SetTurnaroundTime+0x56>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a37      	ldr	r2, [pc, #220]	@ (8004184 <USB_SetTurnaroundTime+0x128>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d202      	bcs.n	80040b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040ac:	230d      	movs	r3, #13
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e04c      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4a33      	ldr	r2, [pc, #204]	@ (8004184 <USB_SetTurnaroundTime+0x128>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d306      	bcc.n	80040c8 <USB_SetTurnaroundTime+0x6c>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4a32      	ldr	r2, [pc, #200]	@ (8004188 <USB_SetTurnaroundTime+0x12c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d802      	bhi.n	80040c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040c2:	230c      	movs	r3, #12
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e041      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004188 <USB_SetTurnaroundTime+0x12c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d906      	bls.n	80040de <USB_SetTurnaroundTime+0x82>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a2e      	ldr	r2, [pc, #184]	@ (800418c <USB_SetTurnaroundTime+0x130>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d802      	bhi.n	80040de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040d8:	230b      	movs	r3, #11
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e036      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4a2a      	ldr	r2, [pc, #168]	@ (800418c <USB_SetTurnaroundTime+0x130>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d906      	bls.n	80040f4 <USB_SetTurnaroundTime+0x98>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a29      	ldr	r2, [pc, #164]	@ (8004190 <USB_SetTurnaroundTime+0x134>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d802      	bhi.n	80040f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80040ee:	230a      	movs	r3, #10
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e02b      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a26      	ldr	r2, [pc, #152]	@ (8004190 <USB_SetTurnaroundTime+0x134>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d906      	bls.n	800410a <USB_SetTurnaroundTime+0xae>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a25      	ldr	r2, [pc, #148]	@ (8004194 <USB_SetTurnaroundTime+0x138>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d202      	bcs.n	800410a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004104:	2309      	movs	r3, #9
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	e020      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4a21      	ldr	r2, [pc, #132]	@ (8004194 <USB_SetTurnaroundTime+0x138>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d306      	bcc.n	8004120 <USB_SetTurnaroundTime+0xc4>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4a20      	ldr	r2, [pc, #128]	@ (8004198 <USB_SetTurnaroundTime+0x13c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d802      	bhi.n	8004120 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800411a:	2308      	movs	r3, #8
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e015      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a1d      	ldr	r2, [pc, #116]	@ (8004198 <USB_SetTurnaroundTime+0x13c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d906      	bls.n	8004136 <USB_SetTurnaroundTime+0xda>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a1c      	ldr	r2, [pc, #112]	@ (800419c <USB_SetTurnaroundTime+0x140>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d202      	bcs.n	8004136 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004130:	2307      	movs	r3, #7
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e00a      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004136:	2306      	movs	r3, #6
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	e007      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004142:	2309      	movs	r3, #9
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e001      	b.n	800414c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004148:	2309      	movs	r3, #9
 800414a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	029b      	lsls	r3, r3, #10
 8004160:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	00d8acbf 	.word	0x00d8acbf
 800417c:	00e4e1c0 	.word	0x00e4e1c0
 8004180:	00f42400 	.word	0x00f42400
 8004184:	01067380 	.word	0x01067380
 8004188:	011a499f 	.word	0x011a499f
 800418c:	01312cff 	.word	0x01312cff
 8004190:	014ca43f 	.word	0x014ca43f
 8004194:	016e3600 	.word	0x016e3600
 8004198:	01a6ab1f 	.word	0x01a6ab1f
 800419c:	01e84800 	.word	0x01e84800

080041a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d115      	bne.n	8004232 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004212:	200a      	movs	r0, #10
 8004214:	f7fc fd30 	bl	8000c78 <HAL_Delay>
      ms += 10U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	330a      	adds	r3, #10
 800421c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f001 f93f 	bl	80054a2 <USB_GetMode>
 8004224:	4603      	mov	r3, r0
 8004226:	2b01      	cmp	r3, #1
 8004228:	d01e      	beq.n	8004268 <USB_SetCurrentMode+0x84>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2bc7      	cmp	r3, #199	@ 0xc7
 800422e:	d9f0      	bls.n	8004212 <USB_SetCurrentMode+0x2e>
 8004230:	e01a      	b.n	8004268 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d115      	bne.n	8004264 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004244:	200a      	movs	r0, #10
 8004246:	f7fc fd17 	bl	8000c78 <HAL_Delay>
      ms += 10U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	330a      	adds	r3, #10
 800424e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f001 f926 	bl	80054a2 <USB_GetMode>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <USB_SetCurrentMode+0x84>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004260:	d9f0      	bls.n	8004244 <USB_SetCurrentMode+0x60>
 8004262:	e001      	b.n	8004268 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e005      	b.n	8004274 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2bc8      	cmp	r3, #200	@ 0xc8
 800426c:	d101      	bne.n	8004272 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800427c:	b084      	sub	sp, #16
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800428a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	e009      	b.n	80042b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3340      	adds	r3, #64	@ 0x40
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	3301      	adds	r3, #1
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b0e      	cmp	r3, #14
 80042b4:	d9f2      	bls.n	800429c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11c      	bne.n	80042f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80042f6:	e00b      	b.n	8004310 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004308:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004316:	461a      	mov	r2, r3
 8004318:	2300      	movs	r3, #0
 800431a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800431c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10d      	bne.n	8004340 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800432c:	2100      	movs	r1, #0
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f968 	bl	8004604 <USB_SetDevSpeed>
 8004334:	e008      	b.n	8004348 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004336:	2101      	movs	r1, #1
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f963 	bl	8004604 <USB_SetDevSpeed>
 800433e:	e003      	b.n	8004348 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004340:	2103      	movs	r1, #3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f95e 	bl	8004604 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004348:	2110      	movs	r1, #16
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8fa 	bl	8004544 <USB_FlushTxFifo>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f924 	bl	80045a8 <USB_FlushRxFifo>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004370:	461a      	mov	r2, r3
 8004372:	2300      	movs	r3, #0
 8004374:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800437c:	461a      	mov	r2, r3
 800437e:	2300      	movs	r3, #0
 8004380:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004388:	461a      	mov	r2, r3
 800438a:	2300      	movs	r3, #0
 800438c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	e043      	b.n	800441c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043aa:	d118      	bne.n	80043de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043be:	461a      	mov	r2, r3
 80043c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e013      	b.n	80043f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d4:	461a      	mov	r2, r3
 80043d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e008      	b.n	80043f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ea:	461a      	mov	r2, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043fc:	461a      	mov	r2, r3
 80043fe:	2300      	movs	r3, #0
 8004400:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800440e:	461a      	mov	r2, r3
 8004410:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004414:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	3301      	adds	r3, #1
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004420:	461a      	mov	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4293      	cmp	r3, r2
 8004426:	d3b5      	bcc.n	8004394 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e043      	b.n	80044b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004444:	d118      	bne.n	8004478 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004458:	461a      	mov	r2, r3
 800445a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e013      	b.n	800448a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446e:	461a      	mov	r2, r3
 8004470:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e008      	b.n	800448a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004484:	461a      	mov	r2, r3
 8004486:	2300      	movs	r3, #0
 8004488:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3301      	adds	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044ba:	461a      	mov	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4293      	cmp	r3, r2
 80044c0:	d3b5      	bcc.n	800442e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80044e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f043 0210 	orr.w	r2, r3, #16
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <USB_DevInit+0x2c4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004504:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f043 0208 	orr.w	r2, r3, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004518:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004530:	7dfb      	ldrb	r3, [r7, #23]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800453c:	b004      	add	sp, #16
 800453e:	4770      	bx	lr
 8004540:	803c3800 	.word	0x803c3800

08004544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3301      	adds	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800455e:	d901      	bls.n	8004564 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e01b      	b.n	800459c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	daf2      	bge.n	8004552 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	019b      	lsls	r3, r3, #6
 8004574:	f043 0220 	orr.w	r2, r3, #32
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004588:	d901      	bls.n	800458e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e006      	b.n	800459c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b20      	cmp	r3, #32
 8004598:	d0f0      	beq.n	800457c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045c0:	d901      	bls.n	80045c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e018      	b.n	80045f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	daf2      	bge.n	80045b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2210      	movs	r2, #16
 80045d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045e4:	d901      	bls.n	80045ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e006      	b.n	80045f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d0f0      	beq.n	80045d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004624:	4313      	orrs	r3, r2
 8004626:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004636:	b480      	push	{r7}
 8004638:	b087      	sub	sp, #28
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0306 	and.w	r3, r3, #6
 800464e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
 800465a:	e00a      	b.n	8004672 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d002      	beq.n	8004668 <USB_GetDevSpeed+0x32>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b06      	cmp	r3, #6
 8004666:	d102      	bne.n	800466e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004668:	2302      	movs	r3, #2
 800466a:	75fb      	strb	r3, [r7, #23]
 800466c:	e001      	b.n	8004672 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800466e:	230f      	movs	r3, #15
 8004670:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d13a      	bne.n	8004712 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d155      	bne.n	8004780 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	791b      	ldrb	r3, [r3, #4]
 80046ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	059b      	lsls	r3, r3, #22
 80046f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046f8:	4313      	orrs	r3, r2
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	0151      	lsls	r1, r2, #5
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	440a      	add	r2, r1
 8004702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e036      	b.n	8004780 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	2101      	movs	r1, #1
 8004724:	fa01 f303 	lsl.w	r3, r1, r3
 8004728:	041b      	lsls	r3, r3, #16
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004730:	4313      	orrs	r3, r2
 8004732:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11a      	bne.n	8004780 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	791b      	ldrb	r3, [r3, #4]
 8004764:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004766:	430b      	orrs	r3, r1
 8004768:	4313      	orrs	r3, r2
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d161      	bne.n	8004870 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047c2:	d11f      	bne.n	8004804 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80047e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004802:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800480a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	b29b      	uxth	r3, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004824:	4013      	ands	r3, r2
 8004826:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	b29b      	uxth	r3, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	68f9      	ldr	r1, [r7, #12]
 8004844:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004848:	4013      	ands	r3, r2
 800484a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	0159      	lsls	r1, r3, #5
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	440b      	add	r3, r1
 8004862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004866:	4619      	mov	r1, r3
 8004868:	4b35      	ldr	r3, [pc, #212]	@ (8004940 <USB_DeactivateEndpoint+0x1b0>)
 800486a:	4013      	ands	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
 800486e:	e060      	b.n	8004932 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004886:	d11f      	bne.n	80048c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	43db      	mvns	r3, r3
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048e8:	4013      	ands	r3, r2
 80048ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	2101      	movs	r1, #1
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	43db      	mvns	r3, r3
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800490c:	4013      	ands	r3, r2
 800490e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	0159      	lsls	r1, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	440b      	add	r3, r1
 8004926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492a:	4619      	mov	r1, r3
 800492c:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <USB_DeactivateEndpoint+0x1b4>)
 800492e:	4013      	ands	r3, r2
 8004930:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	ec337800 	.word	0xec337800
 8004944:	eff37800 	.word	0xeff37800

08004948 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	@ 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b01      	cmp	r3, #1
 8004966:	f040 817f 	bne.w	8004c68 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d132      	bne.n	80049d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800498c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004990:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004994:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	0151      	lsls	r1, r2, #5
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	440a      	add	r2, r1
 80049ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049d0:	0cdb      	lsrs	r3, r3, #19
 80049d2:	04db      	lsls	r3, r3, #19
 80049d4:	6113      	str	r3, [r2, #16]
 80049d6:	e097      	b.n	8004b08 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	0151      	lsls	r1, r2, #5
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	440a      	add	r2, r1
 80049ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049f2:	0cdb      	lsrs	r3, r3, #19
 80049f4:	04db      	lsls	r3, r3, #19
 80049f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a1a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d11a      	bne.n	8004a58 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d903      	bls.n	8004a36 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a54:	6113      	str	r3, [r2, #16]
 8004a56:	e044      	b.n	8004ae2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4413      	add	r3, r2
 8004a62:	1e5a      	subs	r2, r3, #1
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	8afb      	ldrh	r3, [r7, #22]
 8004a7e:	04d9      	lsls	r1, r3, #19
 8004a80:	4ba4      	ldr	r3, [pc, #656]	@ (8004d14 <USB_EPStartXfer+0x3cc>)
 8004a82:	400b      	ands	r3, r1
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	0148      	lsls	r0, r1, #5
 8004a88:	69f9      	ldr	r1, [r7, #28]
 8004a8a:	4401      	add	r1, r0
 8004a8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a90:	4313      	orrs	r3, r2
 8004a92:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	791b      	ldrb	r3, [r3, #4]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d122      	bne.n	8004ae2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004aba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	8afb      	ldrh	r3, [r7, #22]
 8004acc:	075b      	lsls	r3, r3, #29
 8004ace:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004ad2:	69b9      	ldr	r1, [r7, #24]
 8004ad4:	0148      	lsls	r0, r1, #5
 8004ad6:	69f9      	ldr	r1, [r7, #28]
 8004ad8:	4401      	add	r1, r0
 8004ada:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af8:	69b9      	ldr	r1, [r7, #24]
 8004afa:	0148      	lsls	r0, r1, #5
 8004afc:	69f9      	ldr	r1, [r7, #28]
 8004afe:	4401      	add	r1, r0
 8004b00:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b04:	4313      	orrs	r3, r2
 8004b06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d14b      	bne.n	8004ba6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b22:	461a      	mov	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	791b      	ldrb	r3, [r3, #4]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d128      	bne.n	8004b84 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d110      	bne.n	8004b64 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e00f      	b.n	8004b84 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	0151      	lsls	r1, r2, #5
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	440a      	add	r2, r1
 8004b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	0151      	lsls	r1, r2, #5
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	440a      	add	r2, r1
 8004b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b9e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e166      	b.n	8004e74 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bc0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004bc4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	791b      	ldrb	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d015      	beq.n	8004bfa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 814e 	beq.w	8004e74 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	2101      	movs	r1, #1
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	69f9      	ldr	r1, [r7, #28]
 8004bf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	634b      	str	r3, [r1, #52]	@ 0x34
 8004bf8:	e13c      	b.n	8004e74 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d110      	bne.n	8004c2c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e00f      	b.n	8004c4c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	68d9      	ldr	r1, [r3, #12]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	b298      	uxth	r0, r3
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	4603      	mov	r3, r0
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f9b9 	bl	8004fd8 <USB_WritePacket>
 8004c66:	e105      	b.n	8004e74 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c82:	0cdb      	lsrs	r3, r3, #19
 8004c84:	04db      	lsls	r3, r3, #19
 8004c86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ca2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ca6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004caa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d132      	bne.n	8004d18 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce0:	69b9      	ldr	r1, [r7, #24]
 8004ce2:	0148      	lsls	r0, r1, #5
 8004ce4:	69f9      	ldr	r1, [r7, #28]
 8004ce6:	4401      	add	r1, r0
 8004ce8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004cec:	4313      	orrs	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d0e:	6113      	str	r3, [r2, #16]
 8004d10:	e062      	b.n	8004dd8 <USB_EPStartXfer+0x490>
 8004d12:	bf00      	nop
 8004d14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d123      	bne.n	8004d68 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d36:	69b9      	ldr	r1, [r7, #24]
 8004d38:	0148      	lsls	r0, r1, #5
 8004d3a:	69f9      	ldr	r1, [r7, #28]
 8004d3c:	4401      	add	r1, r0
 8004d3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d42:	4313      	orrs	r3, r2
 8004d44:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d64:	6113      	str	r3, [r2, #16]
 8004d66:	e037      	b.n	8004dd8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	1e5a      	subs	r2, r3, #1
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	8afa      	ldrh	r2, [r7, #22]
 8004d84:	fb03 f202 	mul.w	r2, r3, r2
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	8afb      	ldrh	r3, [r7, #22]
 8004d9c:	04d9      	lsls	r1, r3, #19
 8004d9e:	4b38      	ldr	r3, [pc, #224]	@ (8004e80 <USB_EPStartXfer+0x538>)
 8004da0:	400b      	ands	r3, r1
 8004da2:	69b9      	ldr	r1, [r7, #24]
 8004da4:	0148      	lsls	r0, r1, #5
 8004da6:	69f9      	ldr	r1, [r7, #28]
 8004da8:	4401      	add	r1, r0
 8004daa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004dae:	4313      	orrs	r3, r2
 8004db0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc8:	69b9      	ldr	r1, [r7, #24]
 8004dca:	0148      	lsls	r0, r1, #5
 8004dcc:	69f9      	ldr	r1, [r7, #28]
 8004dce:	4401      	add	r1, r0
 8004dd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10d      	bne.n	8004dfa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68d9      	ldr	r1, [r3, #12]
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df6:	460a      	mov	r2, r1
 8004df8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	791b      	ldrb	r3, [r3, #4]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d128      	bne.n	8004e54 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e00f      	b.n	8004e54 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	1ff80000 	.word	0x1ff80000

08004e84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d14a      	bne.n	8004f38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eba:	f040 8086 	bne.w	8004fca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	0151      	lsls	r1, r2, #5
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	440a      	add	r2, r1
 8004ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004edc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ee0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d902      	bls.n	8004f1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
          break;
 8004f1a:	e056      	b.n	8004fca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f34:	d0e7      	beq.n	8004f06 <USB_EPStopXfer+0x82>
 8004f36:	e048      	b.n	8004fca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f50:	d13b      	bne.n	8004fca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d902      	bls.n	8004fb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
          break;
 8004fae:	e00c      	b.n	8004fca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fc8:	d0e7      	beq.n	8004f9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	@ 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	71fb      	strb	r3, [r7, #7]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d123      	bne.n	8005046 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ffe:	88bb      	ldrh	r3, [r7, #4]
 8005000:	3303      	adds	r3, #3
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e018      	b.n	800503e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	031a      	lsls	r2, r3, #12
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005018:	461a      	mov	r2, r3
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	3301      	adds	r3, #1
 8005024:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3301      	adds	r3, #1
 800502a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	3301      	adds	r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	3301      	adds	r3, #1
 8005036:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	3301      	adds	r3, #1
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	429a      	cmp	r2, r3
 8005044:	d3e2      	bcc.n	800500c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3724      	adds	r7, #36	@ 0x24
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005054:	b480      	push	{r7}
 8005056:	b08b      	sub	sp, #44	@ 0x2c
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	b29b      	uxth	r3, r3
 8005070:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800507a:	2300      	movs	r3, #0
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	e014      	b.n	80050aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	601a      	str	r2, [r3, #0]
    pDest++;
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	3301      	adds	r3, #1
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	3301      	adds	r3, #1
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	3301      	adds	r3, #1
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	3301      	adds	r3, #1
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	3301      	adds	r3, #1
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d3e6      	bcc.n	8005080 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050b2:	8bfb      	ldrh	r3, [r7, #30]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01e      	beq.n	80050f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050c2:	461a      	mov	r2, r3
 80050c4:	f107 0310 	add.w	r3, r7, #16
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	701a      	strb	r2, [r3, #0]
      i++;
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	3301      	adds	r3, #1
 80050e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	3301      	adds	r3, #1
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80050ea:	8bfb      	ldrh	r3, [r7, #30]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050f0:	8bfb      	ldrh	r3, [r7, #30]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1ea      	bne.n	80050cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	372c      	adds	r7, #44	@ 0x2c
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d12c      	bne.n	800517a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	db12      	blt.n	8005158 <USB_EPSetStall+0x54>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00f      	beq.n	8005158 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005152:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005156:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005172:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	e02b      	b.n	80051d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	db12      	blt.n	80051b2 <USB_EPSetStall+0xae>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00f      	beq.n	80051b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80051b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d128      	bne.n	800524e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005216:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800521a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	791b      	ldrb	r3, [r3, #4]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d003      	beq.n	800522c <USB_EPClearStall+0x4c>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	791b      	ldrb	r3, [r3, #4]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d138      	bne.n	800529e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e027      	b.n	800529e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005268:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800526c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	791b      	ldrb	r3, [r3, #4]
 8005272:	2b03      	cmp	r3, #3
 8005274:	d003      	beq.n	800527e <USB_EPClearStall+0x9e>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	791b      	ldrb	r3, [r3, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d10f      	bne.n	800529e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80052ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80052e0:	68f9      	ldr	r1, [r7, #12]
 80052e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005326:	f023 0302 	bic.w	r3, r3, #2
 800532a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005354:	f023 0303 	bic.w	r3, r3, #3
 8005358:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005368:	f043 0302 	orr.w	r3, r3, #2
 800536c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005394:	68fb      	ldr	r3, [r7, #12]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	4013      	ands	r3, r2
 80053c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	0c1b      	lsrs	r3, r3, #16
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	b29b      	uxth	r3, r3
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005438:	68bb      	ldr	r3, [r7, #8]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005446:	b480      	push	{r7}
 8005448:	b087      	sub	sp, #28
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005468:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	01db      	lsls	r3, r3, #7
 8005478:	b2db      	uxtb	r3, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4013      	ands	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005494:	68bb      	ldr	r3, [r7, #8]
}
 8005496:	4618      	mov	r0, r3
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0301 	and.w	r3, r3, #1
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	460b      	mov	r3, r1
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	333c      	adds	r3, #60	@ 0x3c
 800551a:	3304      	adds	r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4a26      	ldr	r2, [pc, #152]	@ (80055bc <USB_EP0_OutStart+0xb8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d90a      	bls.n	800553e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005534:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005538:	d101      	bne.n	800553e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e037      	b.n	80055ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005544:	461a      	mov	r2, r3
 8005546:	2300      	movs	r3, #0
 8005548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800555c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800556c:	f043 0318 	orr.w	r3, r3, #24
 8005570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005580:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005584:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005586:	7afb      	ldrb	r3, [r7, #11]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10f      	bne.n	80055ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005592:	461a      	mov	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80055aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	4f54300a 	.word	0x4f54300a

080055c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3301      	adds	r3, #1
 80055d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055d8:	d901      	bls.n	80055de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e01b      	b.n	8005616 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	daf2      	bge.n	80055cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f043 0201 	orr.w	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005602:	d901      	bls.n	8005608 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e006      	b.n	8005616 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	d0f0      	beq.n	80055f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005630:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005634:	f002 fc94 	bl	8007f60 <USBD_static_malloc>
 8005638:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	32b0      	adds	r2, #176	@ 0xb0
 800564a:	2100      	movs	r1, #0
 800564c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005650:	2302      	movs	r3, #2
 8005652:	e0d4      	b.n	80057fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005654:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005658:	2100      	movs	r1, #0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f002 fd20 	bl	80080a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	32b0      	adds	r2, #176	@ 0xb0
 800566a:	68f9      	ldr	r1, [r7, #12]
 800566c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	32b0      	adds	r2, #176	@ 0xb0
 800567a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7c1b      	ldrb	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d138      	bne.n	80056fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800568c:	4b5e      	ldr	r3, [pc, #376]	@ (8005808 <USBD_CDC_Init+0x1e4>)
 800568e:	7819      	ldrb	r1, [r3, #0]
 8005690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005694:	2202      	movs	r2, #2
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f002 fb3f 	bl	8007d1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800569c:	4b5a      	ldr	r3, [pc, #360]	@ (8005808 <USBD_CDC_Init+0x1e4>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	3324      	adds	r3, #36	@ 0x24
 80056b2:	2201      	movs	r2, #1
 80056b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80056b6:	4b55      	ldr	r3, [pc, #340]	@ (800580c <USBD_CDC_Init+0x1e8>)
 80056b8:	7819      	ldrb	r1, [r3, #0]
 80056ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056be:	2202      	movs	r2, #2
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f002 fb2a 	bl	8007d1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056c6:	4b51      	ldr	r3, [pc, #324]	@ (800580c <USBD_CDC_Init+0x1e8>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f003 020f 	and.w	r2, r3, #15
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056de:	2201      	movs	r2, #1
 80056e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005810 <USBD_CDC_Init+0x1ec>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	3326      	adds	r3, #38	@ 0x26
 80056f8:	2210      	movs	r2, #16
 80056fa:	801a      	strh	r2, [r3, #0]
 80056fc:	e035      	b.n	800576a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056fe:	4b42      	ldr	r3, [pc, #264]	@ (8005808 <USBD_CDC_Init+0x1e4>)
 8005700:	7819      	ldrb	r1, [r3, #0]
 8005702:	2340      	movs	r3, #64	@ 0x40
 8005704:	2202      	movs	r2, #2
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f002 fb07 	bl	8007d1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800570c:	4b3e      	ldr	r3, [pc, #248]	@ (8005808 <USBD_CDC_Init+0x1e4>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 020f 	and.w	r2, r3, #15
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	3324      	adds	r3, #36	@ 0x24
 8005722:	2201      	movs	r2, #1
 8005724:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005726:	4b39      	ldr	r3, [pc, #228]	@ (800580c <USBD_CDC_Init+0x1e8>)
 8005728:	7819      	ldrb	r1, [r3, #0]
 800572a:	2340      	movs	r3, #64	@ 0x40
 800572c:	2202      	movs	r2, #2
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f002 faf3 	bl	8007d1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005734:	4b35      	ldr	r3, [pc, #212]	@ (800580c <USBD_CDC_Init+0x1e8>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f003 020f 	and.w	r2, r3, #15
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800574c:	2201      	movs	r2, #1
 800574e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005750:	4b2f      	ldr	r3, [pc, #188]	@ (8005810 <USBD_CDC_Init+0x1ec>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	3326      	adds	r3, #38	@ 0x26
 8005766:	2210      	movs	r2, #16
 8005768:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800576a:	4b29      	ldr	r3, [pc, #164]	@ (8005810 <USBD_CDC_Init+0x1ec>)
 800576c:	7819      	ldrb	r1, [r3, #0]
 800576e:	2308      	movs	r3, #8
 8005770:	2203      	movs	r2, #3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f002 fad1 	bl	8007d1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005778:	4b25      	ldr	r3, [pc, #148]	@ (8005810 <USBD_CDC_Init+0x1ec>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f003 020f 	and.w	r2, r3, #15
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	3324      	adds	r3, #36	@ 0x24
 800578e:	2201      	movs	r2, #1
 8005790:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	33b0      	adds	r3, #176	@ 0xb0
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80057c8:	2302      	movs	r3, #2
 80057ca:	e018      	b.n	80057fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	7c1b      	ldrb	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057d4:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <USBD_CDC_Init+0x1e8>)
 80057d6:	7819      	ldrb	r1, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f002 fb88 	bl	8007ef8 <USBD_LL_PrepareReceive>
 80057e8:	e008      	b.n	80057fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057ea:	4b08      	ldr	r3, [pc, #32]	@ (800580c <USBD_CDC_Init+0x1e8>)
 80057ec:	7819      	ldrb	r1, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057f4:	2340      	movs	r3, #64	@ 0x40
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f002 fb7e 	bl	8007ef8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000093 	.word	0x20000093
 800580c:	20000094 	.word	0x20000094
 8005810:	20000095 	.word	0x20000095

08005814 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005820:	4b3a      	ldr	r3, [pc, #232]	@ (800590c <USBD_CDC_DeInit+0xf8>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f002 fa9d 	bl	8007d66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800582c:	4b37      	ldr	r3, [pc, #220]	@ (800590c <USBD_CDC_DeInit+0xf8>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	3324      	adds	r3, #36	@ 0x24
 8005842:	2200      	movs	r2, #0
 8005844:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005846:	4b32      	ldr	r3, [pc, #200]	@ (8005910 <USBD_CDC_DeInit+0xfc>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f002 fa8a 	bl	8007d66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005852:	4b2f      	ldr	r3, [pc, #188]	@ (8005910 <USBD_CDC_DeInit+0xfc>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800586a:	2200      	movs	r2, #0
 800586c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800586e:	4b29      	ldr	r3, [pc, #164]	@ (8005914 <USBD_CDC_DeInit+0x100>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f002 fa76 	bl	8007d66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800587a:	4b26      	ldr	r3, [pc, #152]	@ (8005914 <USBD_CDC_DeInit+0x100>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f003 020f 	and.w	r2, r3, #15
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	3324      	adds	r3, #36	@ 0x24
 8005890:	2200      	movs	r2, #0
 8005892:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005894:	4b1f      	ldr	r3, [pc, #124]	@ (8005914 <USBD_CDC_DeInit+0x100>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f003 020f 	and.w	r2, r3, #15
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	3326      	adds	r3, #38	@ 0x26
 80058aa:	2200      	movs	r2, #0
 80058ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	32b0      	adds	r2, #176	@ 0xb0
 80058b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01f      	beq.n	8005900 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	33b0      	adds	r3, #176	@ 0xb0
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	32b0      	adds	r2, #176	@ 0xb0
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f002 fb4a 	bl	8007f7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	32b0      	adds	r2, #176	@ 0xb0
 80058f2:	2100      	movs	r1, #0
 80058f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000093 	.word	0x20000093
 8005910:	20000094 	.word	0x20000094
 8005914:	20000095 	.word	0x20000095

08005918 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	32b0      	adds	r2, #176	@ 0xb0
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	e0bf      	b.n	8005ac8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005950:	2b00      	cmp	r3, #0
 8005952:	d050      	beq.n	80059f6 <USBD_CDC_Setup+0xde>
 8005954:	2b20      	cmp	r3, #32
 8005956:	f040 80af 	bne.w	8005ab8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	88db      	ldrh	r3, [r3, #6]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d03a      	beq.n	80059d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b25b      	sxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	da1b      	bge.n	80059a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	33b0      	adds	r3, #176	@ 0xb0
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005982:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	88d2      	ldrh	r2, [r2, #6]
 8005988:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	88db      	ldrh	r3, [r3, #6]
 800598e:	2b07      	cmp	r3, #7
 8005990:	bf28      	it	cs
 8005992:	2307      	movcs	r3, #7
 8005994:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	89fa      	ldrh	r2, [r7, #14]
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fd93 	bl	80074c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80059a2:	e090      	b.n	8005ac6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	785a      	ldrb	r2, [r3, #1]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	88db      	ldrh	r3, [r3, #6]
 80059b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80059b4:	d803      	bhi.n	80059be <USBD_CDC_Setup+0xa6>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	88db      	ldrh	r3, [r3, #6]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	e000      	b.n	80059c0 <USBD_CDC_Setup+0xa8>
 80059be:	2240      	movs	r2, #64	@ 0x40
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80059c6:	6939      	ldr	r1, [r7, #16]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80059ce:	461a      	mov	r2, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 fda5 	bl	8007520 <USBD_CtlPrepareRx>
      break;
 80059d6:	e076      	b.n	8005ac6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	33b0      	adds	r3, #176	@ 0xb0
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	7850      	ldrb	r0, [r2, #1]
 80059ee:	2200      	movs	r2, #0
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	4798      	blx	r3
      break;
 80059f4:	e067      	b.n	8005ac6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2b0b      	cmp	r3, #11
 80059fc:	d851      	bhi.n	8005aa2 <USBD_CDC_Setup+0x18a>
 80059fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005a04 <USBD_CDC_Setup+0xec>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a35 	.word	0x08005a35
 8005a08:	08005ab1 	.word	0x08005ab1
 8005a0c:	08005aa3 	.word	0x08005aa3
 8005a10:	08005aa3 	.word	0x08005aa3
 8005a14:	08005aa3 	.word	0x08005aa3
 8005a18:	08005aa3 	.word	0x08005aa3
 8005a1c:	08005aa3 	.word	0x08005aa3
 8005a20:	08005aa3 	.word	0x08005aa3
 8005a24:	08005aa3 	.word	0x08005aa3
 8005a28:	08005aa3 	.word	0x08005aa3
 8005a2c:	08005a5f 	.word	0x08005a5f
 8005a30:	08005a89 	.word	0x08005a89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d107      	bne.n	8005a50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a40:	f107 030a 	add.w	r3, r7, #10
 8005a44:	2202      	movs	r2, #2
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fd3d 	bl	80074c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a4e:	e032      	b.n	8005ab6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 fcbb 	bl	80073ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a5c:	e02b      	b.n	8005ab6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d107      	bne.n	8005a7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a6a:	f107 030d 	add.w	r3, r7, #13
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 fd28 	bl	80074c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a78:	e01d      	b.n	8005ab6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fca6 	bl	80073ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005a82:	2303      	movs	r3, #3
 8005a84:	75fb      	strb	r3, [r7, #23]
          break;
 8005a86:	e016      	b.n	8005ab6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d00f      	beq.n	8005ab4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fc99 	bl	80073ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005aa0:	e008      	b.n	8005ab4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 fc92 	bl	80073ce <USBD_CtlError>
          ret = USBD_FAIL;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	75fb      	strb	r3, [r7, #23]
          break;
 8005aae:	e002      	b.n	8005ab6 <USBD_CDC_Setup+0x19e>
          break;
 8005ab0:	bf00      	nop
 8005ab2:	e008      	b.n	8005ac6 <USBD_CDC_Setup+0x1ae>
          break;
 8005ab4:	bf00      	nop
      }
      break;
 8005ab6:	e006      	b.n	8005ac6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 fc87 	bl	80073ce <USBD_CtlError>
      ret = USBD_FAIL;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005ae2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	32b0      	adds	r2, #176	@ 0xb0
 8005aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e065      	b.n	8005bc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	32b0      	adds	r2, #176	@ 0xb0
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	f003 020f 	and.w	r2, r3, #15
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3318      	adds	r3, #24
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d02f      	beq.n	8005b84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	f003 020f 	and.w	r2, r3, #15
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	3318      	adds	r3, #24
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	f003 010f 	and.w	r1, r3, #15
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	460b      	mov	r3, r1
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	440b      	add	r3, r1
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4403      	add	r3, r0
 8005b4c:	331c      	adds	r3, #28
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b54:	fb01 f303 	mul.w	r3, r1, r3
 8005b58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d112      	bne.n	8005b84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	3318      	adds	r3, #24
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b76:	78f9      	ldrb	r1, [r7, #3]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f002 f99a 	bl	8007eb6 <USBD_LL_Transmit>
 8005b82:	e01f      	b.n	8005bc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	33b0      	adds	r3, #176	@ 0xb0
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d010      	beq.n	8005bc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	33b0      	adds	r3, #176	@ 0xb0
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	32b0      	adds	r2, #176	@ 0xb0
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	32b0      	adds	r2, #176	@ 0xb0
 8005bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e01a      	b.n	8005c36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f002 f998 	bl	8007f3a <USBD_LL_GetRxDataSize>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	33b0      	adds	r3, #176	@ 0xb0
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005c30:	4611      	mov	r1, r2
 8005c32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	32b0      	adds	r2, #176	@ 0xb0
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e024      	b.n	8005caa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	33b0      	adds	r3, #176	@ 0xb0
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d019      	beq.n	8005ca8 <USBD_CDC_EP0_RxReady+0x6a>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005c7a:	2bff      	cmp	r3, #255	@ 0xff
 8005c7c:	d014      	beq.n	8005ca8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	33b0      	adds	r3, #176	@ 0xb0
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005c96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	22ff      	movs	r2, #255	@ 0xff
 8005ca4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cbc:	2182      	movs	r1, #130	@ 0x82
 8005cbe:	4818      	ldr	r0, [pc, #96]	@ (8005d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cc0:	f000 fd4f 	bl	8006762 <USBD_GetEpDesc>
 8005cc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4815      	ldr	r0, [pc, #84]	@ (8005d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cca:	f000 fd4a 	bl	8006762 <USBD_GetEpDesc>
 8005cce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cd0:	2181      	movs	r1, #129	@ 0x81
 8005cd2:	4813      	ldr	r0, [pc, #76]	@ (8005d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cd4:	f000 fd45 	bl	8006762 <USBD_GetEpDesc>
 8005cd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cf4:	711a      	strb	r2, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d006      	beq.n	8005d0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d08:	711a      	strb	r2, [r3, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2243      	movs	r2, #67	@ 0x43
 8005d12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d14:	4b02      	ldr	r3, [pc, #8]	@ (8005d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000050 	.word	0x20000050

08005d24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d2c:	2182      	movs	r1, #130	@ 0x82
 8005d2e:	4818      	ldr	r0, [pc, #96]	@ (8005d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d30:	f000 fd17 	bl	8006762 <USBD_GetEpDesc>
 8005d34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d36:	2101      	movs	r1, #1
 8005d38:	4815      	ldr	r0, [pc, #84]	@ (8005d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d3a:	f000 fd12 	bl	8006762 <USBD_GetEpDesc>
 8005d3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d40:	2181      	movs	r1, #129	@ 0x81
 8005d42:	4813      	ldr	r0, [pc, #76]	@ (8005d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d44:	f000 fd0d 	bl	8006762 <USBD_GetEpDesc>
 8005d48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2210      	movs	r2, #16
 8005d54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d006      	beq.n	8005d6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	711a      	strb	r2, [r3, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f042 0202 	orr.w	r2, r2, #2
 8005d68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d006      	beq.n	8005d7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	711a      	strb	r2, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f042 0202 	orr.w	r2, r2, #2
 8005d7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2243      	movs	r2, #67	@ 0x43
 8005d82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d84:	4b02      	ldr	r3, [pc, #8]	@ (8005d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000050 	.word	0x20000050

08005d94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d9c:	2182      	movs	r1, #130	@ 0x82
 8005d9e:	4818      	ldr	r0, [pc, #96]	@ (8005e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005da0:	f000 fcdf 	bl	8006762 <USBD_GetEpDesc>
 8005da4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005da6:	2101      	movs	r1, #1
 8005da8:	4815      	ldr	r0, [pc, #84]	@ (8005e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005daa:	f000 fcda 	bl	8006762 <USBD_GetEpDesc>
 8005dae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005db0:	2181      	movs	r1, #129	@ 0x81
 8005db2:	4813      	ldr	r0, [pc, #76]	@ (8005e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005db4:	f000 fcd5 	bl	8006762 <USBD_GetEpDesc>
 8005db8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2210      	movs	r2, #16
 8005dc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d006      	beq.n	8005dda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dd4:	711a      	strb	r2, [r3, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005de8:	711a      	strb	r2, [r3, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2243      	movs	r2, #67	@ 0x43
 8005df2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005df4:	4b02      	ldr	r3, [pc, #8]	@ (8005e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000050 	.word	0x20000050

08005e04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	220a      	movs	r2, #10
 8005e10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e12:	4b03      	ldr	r3, [pc, #12]	@ (8005e20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	2000000c 	.word	0x2000000c

08005e24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e009      	b.n	8005e4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	33b0      	adds	r3, #176	@ 0xb0
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	32b0      	adds	r2, #176	@ 0xb0
 8005e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e008      	b.n	8005e90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	32b0      	adds	r2, #176	@ 0xb0
 8005eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e004      	b.n	8005eca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	32b0      	adds	r2, #176	@ 0xb0
 8005eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e025      	b.n	8005f4a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d11f      	bne.n	8005f48 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f10:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <USBD_CDC_TransmitPacket+0x7c>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f003 020f 	and.w	r2, r3, #15
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4403      	add	r3, r0
 8005f2a:	3318      	adds	r3, #24
 8005f2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005f2e:	4b09      	ldr	r3, [pc, #36]	@ (8005f54 <USBD_CDC_TransmitPacket+0x7c>)
 8005f30:	7819      	ldrb	r1, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 ffb9 	bl	8007eb6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000093 	.word	0x20000093

08005f58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	32b0      	adds	r2, #176	@ 0xb0
 8005f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	32b0      	adds	r2, #176	@ 0xb0
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e018      	b.n	8005fb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	7c1b      	ldrb	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <USBD_CDC_ReceivePacket+0x68>)
 8005f90:	7819      	ldrb	r1, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 ffab 	bl	8007ef8 <USBD_LL_PrepareReceive>
 8005fa2:	e008      	b.n	8005fb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fa4:	4b06      	ldr	r3, [pc, #24]	@ (8005fc0 <USBD_CDC_ReceivePacket+0x68>)
 8005fa6:	7819      	ldrb	r1, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fae:	2340      	movs	r3, #64	@ 0x40
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 ffa1 	bl	8007ef8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000094 	.word	0x20000094

08005fc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e01f      	b.n	800601c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	79fa      	ldrb	r2, [r7, #7]
 800600e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f001 fe1b 	bl	8007c4c <USBD_LL_Init>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]

  return ret;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006038:	2303      	movs	r3, #3
 800603a:	e025      	b.n	8006088 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	32ae      	adds	r2, #174	@ 0xae
 800604e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00f      	beq.n	8006078 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	32ae      	adds	r2, #174	@ 0xae
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	f107 020e 	add.w	r2, r7, #14
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
 8006070:	4602      	mov	r2, r0
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 fe23 	bl	8007ce4 <USBD_LL_Start>
 800609e:	4603      	mov	r3, r0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	4611      	mov	r1, r2
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	4611      	mov	r1, r2
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f001 f90c 	bl	800735a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2b02      	cmp	r3, #2
 8006164:	d01a      	beq.n	800619c <USBD_LL_SetupStage+0x72>
 8006166:	2b02      	cmp	r3, #2
 8006168:	d822      	bhi.n	80061b0 <USBD_LL_SetupStage+0x86>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <USBD_LL_SetupStage+0x4a>
 800616e:	2b01      	cmp	r3, #1
 8006170:	d00a      	beq.n	8006188 <USBD_LL_SetupStage+0x5e>
 8006172:	e01d      	b.n	80061b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fb63 	bl	8006848 <USBD_StdDevReq>
 8006182:	4603      	mov	r3, r0
 8006184:	73fb      	strb	r3, [r7, #15]
      break;
 8006186:	e020      	b.n	80061ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fbcb 	bl	800692c <USBD_StdItfReq>
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
      break;
 800619a:	e016      	b.n	80061ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fc2d 	bl	8006a04 <USBD_StdEPReq>
 80061aa:	4603      	mov	r3, r0
 80061ac:	73fb      	strb	r3, [r7, #15]
      break;
 80061ae:	e00c      	b.n	80061ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80061b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fdf0 	bl	8007da4 <USBD_LL_StallEP>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
      break;
 80061c8:	bf00      	nop
  }

  return ret;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	460b      	mov	r3, r1
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80061e6:	7afb      	ldrb	r3, [r7, #11]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d16e      	bne.n	80062ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80061f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	f040 8098 	bne.w	8006330 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	429a      	cmp	r2, r3
 800620a:	d913      	bls.n	8006234 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	4293      	cmp	r3, r2
 8006224:	bf28      	it	cs
 8006226:	4613      	movcs	r3, r2
 8006228:	461a      	mov	r2, r3
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f001 f994 	bl	800755a <USBD_CtlContinueRx>
 8006232:	e07d      	b.n	8006330 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2b02      	cmp	r3, #2
 8006240:	d014      	beq.n	800626c <USBD_LL_DataOutStage+0x98>
 8006242:	2b02      	cmp	r3, #2
 8006244:	d81d      	bhi.n	8006282 <USBD_LL_DataOutStage+0xae>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <USBD_LL_DataOutStage+0x7c>
 800624a:	2b01      	cmp	r3, #1
 800624c:	d003      	beq.n	8006256 <USBD_LL_DataOutStage+0x82>
 800624e:	e018      	b.n	8006282 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	75bb      	strb	r3, [r7, #22]
            break;
 8006254:	e018      	b.n	8006288 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800625c:	b2db      	uxtb	r3, r3
 800625e:	4619      	mov	r1, r3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 fa64 	bl	800672e <USBD_CoreFindIF>
 8006266:	4603      	mov	r3, r0
 8006268:	75bb      	strb	r3, [r7, #22]
            break;
 800626a:	e00d      	b.n	8006288 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006272:	b2db      	uxtb	r3, r3
 8006274:	4619      	mov	r1, r3
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fa66 	bl	8006748 <USBD_CoreFindEP>
 800627c:	4603      	mov	r3, r0
 800627e:	75bb      	strb	r3, [r7, #22]
            break;
 8006280:	e002      	b.n	8006288 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	75bb      	strb	r3, [r7, #22]
            break;
 8006286:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006288:	7dbb      	ldrb	r3, [r7, #22]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d119      	bne.n	80062c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b03      	cmp	r3, #3
 8006298:	d113      	bne.n	80062c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800629a:	7dba      	ldrb	r2, [r7, #22]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	32ae      	adds	r2, #174	@ 0xae
 80062a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80062aa:	7dba      	ldrb	r2, [r7, #22]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80062b2:	7dba      	ldrb	r2, [r7, #22]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	32ae      	adds	r2, #174	@ 0xae
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f001 f95a 	bl	800757c <USBD_CtlSendStatus>
 80062c8:	e032      	b.n	8006330 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	4619      	mov	r1, r3
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fa37 	bl	8006748 <USBD_CoreFindEP>
 80062da:	4603      	mov	r3, r0
 80062dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062de:	7dbb      	ldrb	r3, [r7, #22]
 80062e0:	2bff      	cmp	r3, #255	@ 0xff
 80062e2:	d025      	beq.n	8006330 <USBD_LL_DataOutStage+0x15c>
 80062e4:	7dbb      	ldrb	r3, [r7, #22]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d122      	bne.n	8006330 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d117      	bne.n	8006326 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80062f6:	7dba      	ldrb	r2, [r7, #22]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	32ae      	adds	r2, #174	@ 0xae
 80062fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00f      	beq.n	8006326 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006306:	7dba      	ldrb	r2, [r7, #22]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800630e:	7dba      	ldrb	r2, [r7, #22]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	32ae      	adds	r2, #174	@ 0xae
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	7afa      	ldrb	r2, [r7, #11]
 800631c:	4611      	mov	r1, r2
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	4798      	blx	r3
 8006322:	4603      	mov	r3, r0
 8006324:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	e000      	b.n	8006332 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	460b      	mov	r3, r1
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d16f      	bne.n	800642e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3314      	adds	r3, #20
 8006352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800635a:	2b02      	cmp	r3, #2
 800635c:	d15a      	bne.n	8006414 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	429a      	cmp	r2, r3
 8006368:	d914      	bls.n	8006394 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	1ad2      	subs	r2, r2, r3
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	461a      	mov	r2, r3
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f001 f8bc 	bl	80074fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006386:	2300      	movs	r3, #0
 8006388:	2200      	movs	r2, #0
 800638a:	2100      	movs	r1, #0
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f001 fdb3 	bl	8007ef8 <USBD_LL_PrepareReceive>
 8006392:	e03f      	b.n	8006414 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	d11c      	bne.n	80063da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d316      	bcc.n	80063da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d20f      	bcs.n	80063da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063ba:	2200      	movs	r2, #0
 80063bc:	2100      	movs	r1, #0
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f001 f89d 	bl	80074fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063cc:	2300      	movs	r3, #0
 80063ce:	2200      	movs	r2, #0
 80063d0:	2100      	movs	r1, #0
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f001 fd90 	bl	8007ef8 <USBD_LL_PrepareReceive>
 80063d8:	e01c      	b.n	8006414 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d10f      	bne.n	8006406 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006406:	2180      	movs	r1, #128	@ 0x80
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f001 fccb 	bl	8007da4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f001 f8c7 	bl	80075a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d03a      	beq.n	8006494 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fe42 	bl	80060a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800642c:	e032      	b.n	8006494 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800642e:	7afb      	ldrb	r3, [r7, #11]
 8006430:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006434:	b2db      	uxtb	r3, r3
 8006436:	4619      	mov	r1, r3
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f985 	bl	8006748 <USBD_CoreFindEP>
 800643e:	4603      	mov	r3, r0
 8006440:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	2bff      	cmp	r3, #255	@ 0xff
 8006446:	d025      	beq.n	8006494 <USBD_LL_DataInStage+0x15a>
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d122      	bne.n	8006494 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b03      	cmp	r3, #3
 8006458:	d11c      	bne.n	8006494 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800645a:	7dfa      	ldrb	r2, [r7, #23]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	32ae      	adds	r2, #174	@ 0xae
 8006460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d014      	beq.n	8006494 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800646a:	7dfa      	ldrb	r2, [r7, #23]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006472:	7dfa      	ldrb	r2, [r7, #23]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	32ae      	adds	r2, #174	@ 0xae
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	7afa      	ldrb	r2, [r7, #11]
 8006480:	4611      	mov	r1, r2
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3
 8006486:	4603      	mov	r3, r0
 8006488:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800648a:	7dbb      	ldrb	r3, [r7, #22]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006490:	7dbb      	ldrb	r3, [r7, #22]
 8006492:	e000      	b.n	8006496 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d014      	beq.n	8006504 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6852      	ldr	r2, [r2, #4]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	4611      	mov	r1, r2
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006500:	2303      	movs	r3, #3
 8006502:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006504:	2340      	movs	r3, #64	@ 0x40
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 fc05 	bl	8007d1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2240      	movs	r2, #64	@ 0x40
 800651c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006520:	2340      	movs	r3, #64	@ 0x40
 8006522:	2200      	movs	r2, #0
 8006524:	2180      	movs	r1, #128	@ 0x80
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fbf7 	bl	8007d1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2240      	movs	r2, #64	@ 0x40
 8006536:	621a      	str	r2, [r3, #32]

  return ret;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	460b      	mov	r3, r1
 800654c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b04      	cmp	r3, #4
 8006574:	d006      	beq.n	8006584 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800657c:	b2da      	uxtb	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2204      	movs	r2, #4
 8006588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d106      	bne.n	80065bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d110      	bne.n	8006600 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	32ae      	adds	r2, #174	@ 0xae
 8006620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	e01c      	b.n	8006666 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b03      	cmp	r3, #3
 8006636:	d115      	bne.n	8006664 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	32ae      	adds	r2, #174	@ 0xae
 8006642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32ae      	adds	r2, #174	@ 0xae
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	4611      	mov	r1, r2
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	32ae      	adds	r2, #174	@ 0xae
 8006684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800668c:	2303      	movs	r3, #3
 800668e:	e01c      	b.n	80066ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b03      	cmp	r3, #3
 800669a:	d115      	bne.n	80066c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	32ae      	adds	r2, #174	@ 0xae
 80066a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	32ae      	adds	r2, #174	@ 0xae
 80066ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c0:	78fa      	ldrb	r2, [r7, #3]
 80066c2:	4611      	mov	r1, r2
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00e      	beq.n	8006724 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6852      	ldr	r2, [r2, #4]
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	4611      	mov	r1, r2
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006720:	2303      	movs	r3, #3
 8006722:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800673a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006754:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b086      	sub	sp, #24
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	885b      	ldrh	r3, [r3, #2]
 800677e:	b29b      	uxth	r3, r3
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	4293      	cmp	r3, r2
 8006786:	d91f      	bls.n	80067c8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800678e:	e013      	b.n	80067b8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006790:	f107 030a 	add.w	r3, r7, #10
 8006794:	4619      	mov	r1, r3
 8006796:	6978      	ldr	r0, [r7, #20]
 8006798:	f000 f81b 	bl	80067d2 <USBD_GetNextDesc>
 800679c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	d108      	bne.n	80067b8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	789b      	ldrb	r3, [r3, #2]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d008      	beq.n	80067c6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	885b      	ldrh	r3, [r3, #2]
 80067bc:	b29a      	uxth	r2, r3
 80067be:	897b      	ldrh	r3, [r7, #10]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d8e5      	bhi.n	8006790 <USBD_GetEpDesc+0x2e>
 80067c4:	e000      	b.n	80067c8 <USBD_GetEpDesc+0x66>
          break;
 80067c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80067c8:	693b      	ldr	r3, [r7, #16]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	4413      	add	r3, r2
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4413      	add	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80067fc:	68fb      	ldr	r3, [r7, #12]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800680a:	b480      	push	{r7}
 800680c:	b087      	sub	sp, #28
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	3301      	adds	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006828:	8a3b      	ldrh	r3, [r7, #16]
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	b21a      	sxth	r2, r3
 800682e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006832:	4313      	orrs	r3, r2
 8006834:	b21b      	sxth	r3, r3
 8006836:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006838:	89fb      	ldrh	r3, [r7, #14]
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800685e:	2b40      	cmp	r3, #64	@ 0x40
 8006860:	d005      	beq.n	800686e <USBD_StdDevReq+0x26>
 8006862:	2b40      	cmp	r3, #64	@ 0x40
 8006864:	d857      	bhi.n	8006916 <USBD_StdDevReq+0xce>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00f      	beq.n	800688a <USBD_StdDevReq+0x42>
 800686a:	2b20      	cmp	r3, #32
 800686c:	d153      	bne.n	8006916 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	32ae      	adds	r2, #174	@ 0xae
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]
      break;
 8006888:	e04a      	b.n	8006920 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	785b      	ldrb	r3, [r3, #1]
 800688e:	2b09      	cmp	r3, #9
 8006890:	d83b      	bhi.n	800690a <USBD_StdDevReq+0xc2>
 8006892:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <USBD_StdDevReq+0x50>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006901 	.word	0x08006901
 80068a0:	0800690b 	.word	0x0800690b
 80068a4:	080068f7 	.word	0x080068f7
 80068a8:	0800690b 	.word	0x0800690b
 80068ac:	080068cb 	.word	0x080068cb
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	0800690b 	.word	0x0800690b
 80068b8:	080068e3 	.word	0x080068e3
 80068bc:	080068d5 	.word	0x080068d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fa3c 	bl	8006d40 <USBD_GetDescriptor>
          break;
 80068c8:	e024      	b.n	8006914 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fba1 	bl	8007014 <USBD_SetAddress>
          break;
 80068d2:	e01f      	b.n	8006914 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fbe0 	bl	800709c <USBD_SetConfig>
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
          break;
 80068e0:	e018      	b.n	8006914 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fc83 	bl	80071f0 <USBD_GetConfig>
          break;
 80068ea:	e013      	b.n	8006914 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fcb4 	bl	800725c <USBD_GetStatus>
          break;
 80068f4:	e00e      	b.n	8006914 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fce3 	bl	80072c4 <USBD_SetFeature>
          break;
 80068fe:	e009      	b.n	8006914 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fd07 	bl	8007316 <USBD_ClrFeature>
          break;
 8006908:	e004      	b.n	8006914 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fd5e 	bl	80073ce <USBD_CtlError>
          break;
 8006912:	bf00      	nop
      }
      break;
 8006914:	e004      	b.n	8006920 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fd58 	bl	80073ce <USBD_CtlError>
      break;
 800691e:	bf00      	nop
  }

  return ret;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop

0800692c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	d005      	beq.n	8006952 <USBD_StdItfReq+0x26>
 8006946:	2b40      	cmp	r3, #64	@ 0x40
 8006948:	d852      	bhi.n	80069f0 <USBD_StdItfReq+0xc4>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <USBD_StdItfReq+0x26>
 800694e:	2b20      	cmp	r3, #32
 8006950:	d14e      	bne.n	80069f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	2b02      	cmp	r3, #2
 800695e:	d840      	bhi.n	80069e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	889b      	ldrh	r3, [r3, #4]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	d836      	bhi.n	80069d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	889b      	ldrh	r3, [r3, #4]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff fedb 	bl	800672e <USBD_CoreFindIF>
 8006978:	4603      	mov	r3, r0
 800697a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800697c:	7bbb      	ldrb	r3, [r7, #14]
 800697e:	2bff      	cmp	r3, #255	@ 0xff
 8006980:	d01d      	beq.n	80069be <USBD_StdItfReq+0x92>
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11a      	bne.n	80069be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006988:	7bba      	ldrb	r2, [r7, #14]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	32ae      	adds	r2, #174	@ 0xae
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00f      	beq.n	80069b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006998:	7bba      	ldrb	r2, [r7, #14]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069a0:	7bba      	ldrb	r2, [r7, #14]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	32ae      	adds	r2, #174	@ 0xae
 80069a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	4798      	blx	r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069b6:	e004      	b.n	80069c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069bc:	e001      	b.n	80069c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069be:	2303      	movs	r3, #3
 80069c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	88db      	ldrh	r3, [r3, #6]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d110      	bne.n	80069ec <USBD_StdItfReq+0xc0>
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fdd3 	bl	800757c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069d6:	e009      	b.n	80069ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fcf7 	bl	80073ce <USBD_CtlError>
          break;
 80069e0:	e004      	b.n	80069ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fcf2 	bl	80073ce <USBD_CtlError>
          break;
 80069ea:	e000      	b.n	80069ee <USBD_StdItfReq+0xc2>
          break;
 80069ec:	bf00      	nop
      }
      break;
 80069ee:	e004      	b.n	80069fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fceb 	bl	80073ce <USBD_CtlError>
      break;
 80069f8:	bf00      	nop
  }

  return ret;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	889b      	ldrh	r3, [r3, #4]
 8006a16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a20:	2b40      	cmp	r3, #64	@ 0x40
 8006a22:	d007      	beq.n	8006a34 <USBD_StdEPReq+0x30>
 8006a24:	2b40      	cmp	r3, #64	@ 0x40
 8006a26:	f200 817f 	bhi.w	8006d28 <USBD_StdEPReq+0x324>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d02a      	beq.n	8006a84 <USBD_StdEPReq+0x80>
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	f040 817a 	bne.w	8006d28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff fe85 	bl	8006748 <USBD_CoreFindEP>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a42:	7b7b      	ldrb	r3, [r7, #13]
 8006a44:	2bff      	cmp	r3, #255	@ 0xff
 8006a46:	f000 8174 	beq.w	8006d32 <USBD_StdEPReq+0x32e>
 8006a4a:	7b7b      	ldrb	r3, [r7, #13]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f040 8170 	bne.w	8006d32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a52:	7b7a      	ldrb	r2, [r7, #13]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a5a:	7b7a      	ldrb	r2, [r7, #13]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	32ae      	adds	r2, #174	@ 0xae
 8006a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8163 	beq.w	8006d32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a6c:	7b7a      	ldrb	r2, [r7, #13]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	32ae      	adds	r2, #174	@ 0xae
 8006a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a82:	e156      	b.n	8006d32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d008      	beq.n	8006a9e <USBD_StdEPReq+0x9a>
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	f300 8145 	bgt.w	8006d1c <USBD_StdEPReq+0x318>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 809b 	beq.w	8006bce <USBD_StdEPReq+0x1ca>
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d03c      	beq.n	8006b16 <USBD_StdEPReq+0x112>
 8006a9c:	e13e      	b.n	8006d1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d002      	beq.n	8006ab0 <USBD_StdEPReq+0xac>
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d016      	beq.n	8006adc <USBD_StdEPReq+0xd8>
 8006aae:	e02c      	b.n	8006b0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <USBD_StdEPReq+0xce>
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	2b80      	cmp	r3, #128	@ 0x80
 8006aba:	d00a      	beq.n	8006ad2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 f96f 	bl	8007da4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ac6:	2180      	movs	r1, #128	@ 0x80
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 f96b 	bl	8007da4 <USBD_LL_StallEP>
 8006ace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ad0:	e020      	b.n	8006b14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fc7a 	bl	80073ce <USBD_CtlError>
              break;
 8006ada:	e01b      	b.n	8006b14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	885b      	ldrh	r3, [r3, #2]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10e      	bne.n	8006b02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <USBD_StdEPReq+0xfe>
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b80      	cmp	r3, #128	@ 0x80
 8006aee:	d008      	beq.n	8006b02 <USBD_StdEPReq+0xfe>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	88db      	ldrh	r3, [r3, #6]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f951 	bl	8007da4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fd3a 	bl	800757c <USBD_CtlSendStatus>

              break;
 8006b08:	e004      	b.n	8006b14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fc5e 	bl	80073ce <USBD_CtlError>
              break;
 8006b12:	bf00      	nop
          }
          break;
 8006b14:	e107      	b.n	8006d26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d002      	beq.n	8006b28 <USBD_StdEPReq+0x124>
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d016      	beq.n	8006b54 <USBD_StdEPReq+0x150>
 8006b26:	e04b      	b.n	8006bc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <USBD_StdEPReq+0x146>
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b80      	cmp	r3, #128	@ 0x80
 8006b32:	d00a      	beq.n	8006b4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 f933 	bl	8007da4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b3e:	2180      	movs	r1, #128	@ 0x80
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f92f 	bl	8007da4 <USBD_LL_StallEP>
 8006b46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b48:	e040      	b.n	8006bcc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fc3e 	bl	80073ce <USBD_CtlError>
              break;
 8006b52:	e03b      	b.n	8006bcc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	885b      	ldrh	r3, [r3, #2]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d136      	bne.n	8006bca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 f939 	bl	8007de2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fd03 	bl	800757c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff fde4 	bl	8006748 <USBD_CoreFindEP>
 8006b80:	4603      	mov	r3, r0
 8006b82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b84:	7b7b      	ldrb	r3, [r7, #13]
 8006b86:	2bff      	cmp	r3, #255	@ 0xff
 8006b88:	d01f      	beq.n	8006bca <USBD_StdEPReq+0x1c6>
 8006b8a:	7b7b      	ldrb	r3, [r7, #13]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d11c      	bne.n	8006bca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b90:	7b7a      	ldrb	r2, [r7, #13]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b98:	7b7a      	ldrb	r2, [r7, #13]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	32ae      	adds	r2, #174	@ 0xae
 8006b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d010      	beq.n	8006bca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ba8:	7b7a      	ldrb	r2, [r7, #13]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	32ae      	adds	r2, #174	@ 0xae
 8006bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006bbe:	e004      	b.n	8006bca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fc03 	bl	80073ce <USBD_CtlError>
              break;
 8006bc8:	e000      	b.n	8006bcc <USBD_StdEPReq+0x1c8>
              break;
 8006bca:	bf00      	nop
          }
          break;
 8006bcc:	e0ab      	b.n	8006d26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d002      	beq.n	8006be0 <USBD_StdEPReq+0x1dc>
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d032      	beq.n	8006c44 <USBD_StdEPReq+0x240>
 8006bde:	e097      	b.n	8006d10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <USBD_StdEPReq+0x1f2>
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b80      	cmp	r3, #128	@ 0x80
 8006bea:	d004      	beq.n	8006bf6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fbed 	bl	80073ce <USBD_CtlError>
                break;
 8006bf4:	e091      	b.n	8006d1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	da0b      	bge.n	8006c16 <USBD_StdEPReq+0x212>
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	3310      	adds	r3, #16
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	3304      	adds	r3, #4
 8006c14:	e00b      	b.n	8006c2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fc43 	bl	80074c8 <USBD_CtlSendData>
              break;
 8006c42:	e06a      	b.n	8006d1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	da11      	bge.n	8006c70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	f003 020f 	and.w	r2, r3, #15
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	3324      	adds	r3, #36	@ 0x24
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d117      	bne.n	8006c96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fbb0 	bl	80073ce <USBD_CtlError>
                  break;
 8006c6e:	e054      	b.n	8006d1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	f003 020f 	and.w	r2, r3, #15
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d104      	bne.n	8006c96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fb9d 	bl	80073ce <USBD_CtlError>
                  break;
 8006c94:	e041      	b.n	8006d1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da0b      	bge.n	8006cb6 <USBD_StdEPReq+0x2b2>
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	3310      	adds	r3, #16
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	e00b      	b.n	8006cce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	4413      	add	r3, r2
 8006ccc:	3304      	adds	r3, #4
 8006cce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <USBD_StdEPReq+0x2d8>
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b80      	cmp	r3, #128	@ 0x80
 8006cda:	d103      	bne.n	8006ce4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e00e      	b.n	8006d02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f899 	bl	8007e20 <USBD_LL_IsStallEP>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	e002      	b.n	8006d02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2202      	movs	r2, #2
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fbdd 	bl	80074c8 <USBD_CtlSendData>
              break;
 8006d0e:	e004      	b.n	8006d1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fb5b 	bl	80073ce <USBD_CtlError>
              break;
 8006d18:	bf00      	nop
          }
          break;
 8006d1a:	e004      	b.n	8006d26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fb55 	bl	80073ce <USBD_CtlError>
          break;
 8006d24:	bf00      	nop
      }
      break;
 8006d26:	e005      	b.n	8006d34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fb4f 	bl	80073ce <USBD_CtlError>
      break;
 8006d30:	e000      	b.n	8006d34 <USBD_StdEPReq+0x330>
      break;
 8006d32:	bf00      	nop
  }

  return ret;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	2b06      	cmp	r3, #6
 8006d62:	f200 8128 	bhi.w	8006fb6 <USBD_GetDescriptor+0x276>
 8006d66:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <USBD_GetDescriptor+0x2c>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006d89 	.word	0x08006d89
 8006d70:	08006da1 	.word	0x08006da1
 8006d74:	08006de1 	.word	0x08006de1
 8006d78:	08006fb7 	.word	0x08006fb7
 8006d7c:	08006fb7 	.word	0x08006fb7
 8006d80:	08006f57 	.word	0x08006f57
 8006d84:	08006f83 	.word	0x08006f83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	7c12      	ldrb	r2, [r2, #16]
 8006d94:	f107 0108 	add.w	r1, r7, #8
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4798      	blx	r3
 8006d9c:	60f8      	str	r0, [r7, #12]
      break;
 8006d9e:	e112      	b.n	8006fc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	7c1b      	ldrb	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10d      	bne.n	8006dc4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	f107 0208 	add.w	r2, r7, #8
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dc2:	e100      	b.n	8006fc6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	f107 0208 	add.w	r2, r7, #8
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	2202      	movs	r2, #2
 8006ddc:	701a      	strb	r2, [r3, #0]
      break;
 8006dde:	e0f2      	b.n	8006fc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	885b      	ldrh	r3, [r3, #2]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b05      	cmp	r3, #5
 8006de8:	f200 80ac 	bhi.w	8006f44 <USBD_GetDescriptor+0x204>
 8006dec:	a201      	add	r2, pc, #4	@ (adr r2, 8006df4 <USBD_GetDescriptor+0xb4>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e0d 	.word	0x08006e0d
 8006df8:	08006e41 	.word	0x08006e41
 8006dfc:	08006e75 	.word	0x08006e75
 8006e00:	08006ea9 	.word	0x08006ea9
 8006e04:	08006edd 	.word	0x08006edd
 8006e08:	08006f11 	.word	0x08006f11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7c12      	ldrb	r2, [r2, #16]
 8006e24:	f107 0108 	add.w	r1, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2e:	e091      	b.n	8006f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 facb 	bl	80073ce <USBD_CtlError>
            err++;
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3e:	e089      	b.n	8006f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7c12      	ldrb	r2, [r2, #16]
 8006e58:	f107 0108 	add.w	r1, r7, #8
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e62:	e077      	b.n	8006f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fab1 	bl	80073ce <USBD_CtlError>
            err++;
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	72fb      	strb	r3, [r7, #11]
          break;
 8006e72:	e06f      	b.n	8006f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7c12      	ldrb	r2, [r2, #16]
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e96:	e05d      	b.n	8006f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa97 	bl	80073ce <USBD_CtlError>
            err++;
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea6:	e055      	b.n	8006f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7c12      	ldrb	r2, [r2, #16]
 8006ec0:	f107 0108 	add.w	r1, r7, #8
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eca:	e043      	b.n	8006f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa7d 	bl	80073ce <USBD_CtlError>
            err++;
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eda:	e03b      	b.n	8006f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7c12      	ldrb	r2, [r2, #16]
 8006ef4:	f107 0108 	add.w	r1, r7, #8
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
 8006efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efe:	e029      	b.n	8006f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa63 	bl	80073ce <USBD_CtlError>
            err++;
 8006f08:	7afb      	ldrb	r3, [r7, #11]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0e:	e021      	b.n	8006f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	7c12      	ldrb	r2, [r2, #16]
 8006f28:	f107 0108 	add.w	r1, r7, #8
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
 8006f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f32:	e00f      	b.n	8006f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa49 	bl	80073ce <USBD_CtlError>
            err++;
 8006f3c:	7afb      	ldrb	r3, [r7, #11]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	72fb      	strb	r3, [r7, #11]
          break;
 8006f42:	e007      	b.n	8006f54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa41 	bl	80073ce <USBD_CtlError>
          err++;
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f52:	bf00      	nop
      }
      break;
 8006f54:	e037      	b.n	8006fc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	7c1b      	ldrb	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f66:	f107 0208 	add.w	r2, r7, #8
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4798      	blx	r3
 8006f6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f70:	e029      	b.n	8006fc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fa2a 	bl	80073ce <USBD_CtlError>
        err++;
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f80:	e021      	b.n	8006fc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	7c1b      	ldrb	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10d      	bne.n	8006fa6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f92:	f107 0208 	add.w	r2, r7, #8
 8006f96:	4610      	mov	r0, r2
 8006f98:	4798      	blx	r3
 8006f9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	2207      	movs	r2, #7
 8006fa2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa4:	e00f      	b.n	8006fc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa10 	bl	80073ce <USBD_CtlError>
        err++;
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb4:	e007      	b.n	8006fc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fa08 	bl	80073ce <USBD_CtlError>
      err++;
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fc4:	bf00      	nop
  }

  if (err != 0U)
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d11e      	bne.n	800700a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	88db      	ldrh	r3, [r3, #6]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d016      	beq.n	8007002 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fd4:	893b      	ldrh	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00e      	beq.n	8006ff8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	88da      	ldrh	r2, [r3, #6]
 8006fde:	893b      	ldrh	r3, [r7, #8]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	bf28      	it	cs
 8006fe4:	4613      	movcs	r3, r2
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fea:	893b      	ldrh	r3, [r7, #8]
 8006fec:	461a      	mov	r2, r3
 8006fee:	68f9      	ldr	r1, [r7, #12]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa69 	bl	80074c8 <USBD_CtlSendData>
 8006ff6:	e009      	b.n	800700c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f9e7 	bl	80073ce <USBD_CtlError>
 8007000:	e004      	b.n	800700c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 faba 	bl	800757c <USBD_CtlSendStatus>
 8007008:	e000      	b.n	800700c <USBD_GetDescriptor+0x2cc>
    return;
 800700a:	bf00      	nop
  }
}
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop

08007014 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	889b      	ldrh	r3, [r3, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d131      	bne.n	800708a <USBD_SetAddress+0x76>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d12d      	bne.n	800708a <USBD_SetAddress+0x76>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	2b7f      	cmp	r3, #127	@ 0x7f
 8007034:	d829      	bhi.n	800708a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	885b      	ldrh	r3, [r3, #2]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007040:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b03      	cmp	r3, #3
 800704c:	d104      	bne.n	8007058 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f9bc 	bl	80073ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007056:	e01d      	b.n	8007094 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7bfa      	ldrb	r2, [r7, #15]
 800705c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 ff07 	bl	8007e78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa86 	bl	800757c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707e:	e009      	b.n	8007094 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007088:	e004      	b.n	8007094 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f99e 	bl	80073ce <USBD_CtlError>
  }
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	885b      	ldrh	r3, [r3, #2]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	4b4e      	ldr	r3, [pc, #312]	@ (80071ec <USBD_SetConfig+0x150>)
 80070b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070b4:	4b4d      	ldr	r3, [pc, #308]	@ (80071ec <USBD_SetConfig+0x150>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d905      	bls.n	80070c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f985 	bl	80073ce <USBD_CtlError>
    return USBD_FAIL;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e08c      	b.n	80071e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d002      	beq.n	80070da <USBD_SetConfig+0x3e>
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d029      	beq.n	800712c <USBD_SetConfig+0x90>
 80070d8:	e075      	b.n	80071c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070da:	4b44      	ldr	r3, [pc, #272]	@ (80071ec <USBD_SetConfig+0x150>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d020      	beq.n	8007124 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070e2:	4b42      	ldr	r3, [pc, #264]	@ (80071ec <USBD_SetConfig+0x150>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070ec:	4b3f      	ldr	r3, [pc, #252]	@ (80071ec <USBD_SetConfig+0x150>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fe ffe3 	bl	80060be <USBD_SetClassConfig>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d008      	beq.n	8007114 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f962 	bl	80073ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2202      	movs	r2, #2
 800710e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007112:	e065      	b.n	80071e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fa31 	bl	800757c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2203      	movs	r2, #3
 800711e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007122:	e05d      	b.n	80071e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fa29 	bl	800757c <USBD_CtlSendStatus>
      break;
 800712a:	e059      	b.n	80071e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800712c:	4b2f      	ldr	r3, [pc, #188]	@ (80071ec <USBD_SetConfig+0x150>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d112      	bne.n	800715a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800713c:	4b2b      	ldr	r3, [pc, #172]	@ (80071ec <USBD_SetConfig+0x150>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007146:	4b29      	ldr	r3, [pc, #164]	@ (80071ec <USBD_SetConfig+0x150>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fe ffd2 	bl	80060f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa12 	bl	800757c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007158:	e042      	b.n	80071e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800715a:	4b24      	ldr	r3, [pc, #144]	@ (80071ec <USBD_SetConfig+0x150>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d02a      	beq.n	80071be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7fe ffc0 	bl	80060f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007176:	4b1d      	ldr	r3, [pc, #116]	@ (80071ec <USBD_SetConfig+0x150>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007180:	4b1a      	ldr	r3, [pc, #104]	@ (80071ec <USBD_SetConfig+0x150>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fe ff99 	bl	80060be <USBD_SetClassConfig>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00f      	beq.n	80071b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f918 	bl	80073ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fe ffa5 	bl	80060f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80071b4:	e014      	b.n	80071e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9e0 	bl	800757c <USBD_CtlSendStatus>
      break;
 80071bc:	e010      	b.n	80071e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f9dc 	bl	800757c <USBD_CtlSendStatus>
      break;
 80071c4:	e00c      	b.n	80071e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f900 	bl	80073ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ce:	4b07      	ldr	r3, [pc, #28]	@ (80071ec <USBD_SetConfig+0x150>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7fe ff8e 	bl	80060f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071da:	2303      	movs	r3, #3
 80071dc:	73fb      	strb	r3, [r7, #15]
      break;
 80071de:	bf00      	nop
  }

  return ret;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000170 	.word	0x20000170

080071f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	88db      	ldrh	r3, [r3, #6]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d004      	beq.n	800720c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f8e2 	bl	80073ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800720a:	e023      	b.n	8007254 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	dc02      	bgt.n	800721e <USBD_GetConfig+0x2e>
 8007218:	2b00      	cmp	r3, #0
 800721a:	dc03      	bgt.n	8007224 <USBD_GetConfig+0x34>
 800721c:	e015      	b.n	800724a <USBD_GetConfig+0x5a>
 800721e:	2b03      	cmp	r3, #3
 8007220:	d00b      	beq.n	800723a <USBD_GetConfig+0x4a>
 8007222:	e012      	b.n	800724a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3308      	adds	r3, #8
 800722e:	2201      	movs	r2, #1
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f948 	bl	80074c8 <USBD_CtlSendData>
        break;
 8007238:	e00c      	b.n	8007254 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3304      	adds	r3, #4
 800723e:	2201      	movs	r2, #1
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f940 	bl	80074c8 <USBD_CtlSendData>
        break;
 8007248:	e004      	b.n	8007254 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f8be 	bl	80073ce <USBD_CtlError>
        break;
 8007252:	bf00      	nop
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	2b02      	cmp	r3, #2
 8007272:	d81e      	bhi.n	80072b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	88db      	ldrh	r3, [r3, #6]
 8007278:	2b02      	cmp	r3, #2
 800727a:	d004      	beq.n	8007286 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f8a5 	bl	80073ce <USBD_CtlError>
        break;
 8007284:	e01a      	b.n	80072bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f043 0202 	orr.w	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	330c      	adds	r3, #12
 80072a6:	2202      	movs	r2, #2
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f90c 	bl	80074c8 <USBD_CtlSendData>
      break;
 80072b0:	e004      	b.n	80072bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f88a 	bl	80073ce <USBD_CtlError>
      break;
 80072ba:	bf00      	nop
  }
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	885b      	ldrh	r3, [r3, #2]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d107      	bne.n	80072e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f94c 	bl	800757c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072e4:	e013      	b.n	800730e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	885b      	ldrh	r3, [r3, #2]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d10b      	bne.n	8007306 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	889b      	ldrh	r3, [r3, #4]
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f93c 	bl	800757c <USBD_CtlSendStatus>
}
 8007304:	e003      	b.n	800730e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f860 	bl	80073ce <USBD_CtlError>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007326:	b2db      	uxtb	r3, r3
 8007328:	3b01      	subs	r3, #1
 800732a:	2b02      	cmp	r3, #2
 800732c:	d80b      	bhi.n	8007346 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	885b      	ldrh	r3, [r3, #2]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10c      	bne.n	8007350 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f91c 	bl	800757c <USBD_CtlSendStatus>
      }
      break;
 8007344:	e004      	b.n	8007350 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f840 	bl	80073ce <USBD_CtlError>
      break;
 800734e:	e000      	b.n	8007352 <USBD_ClrFeature+0x3c>
      break;
 8007350:	bf00      	nop
  }
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	781a      	ldrb	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff fa40 	bl	800680a <SWAPBYTE>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3301      	adds	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fa33 	bl	800680a <SWAPBYTE>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7ff fa26 	bl	800680a <SWAPBYTE>
 80073be:	4603      	mov	r3, r0
 80073c0:	461a      	mov	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	80da      	strh	r2, [r3, #6]
}
 80073c6:	bf00      	nop
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073d8:	2180      	movs	r1, #128	@ 0x80
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fce2 	bl	8007da4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073e0:	2100      	movs	r1, #0
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fcde 	bl	8007da4 <USBD_LL_StallEP>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d042      	beq.n	800748c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800740a:	6938      	ldr	r0, [r7, #16]
 800740c:	f000 f842 	bl	8007494 <USBD_GetLen>
 8007410:	4603      	mov	r3, r0
 8007412:	3301      	adds	r3, #1
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800741a:	d808      	bhi.n	800742e <USBD_GetString+0x3e>
 800741c:	6938      	ldr	r0, [r7, #16]
 800741e:	f000 f839 	bl	8007494 <USBD_GetLen>
 8007422:	4603      	mov	r3, r0
 8007424:	3301      	adds	r3, #1
 8007426:	b29b      	uxth	r3, r3
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	e001      	b.n	8007432 <USBD_GetString+0x42>
 800742e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	4413      	add	r3, r2
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	7812      	ldrb	r2, [r2, #0]
 8007440:	701a      	strb	r2, [r3, #0]
  idx++;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	3301      	adds	r3, #1
 8007446:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	2203      	movs	r2, #3
 8007450:	701a      	strb	r2, [r3, #0]
  idx++;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	3301      	adds	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007458:	e013      	b.n	8007482 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	4413      	add	r3, r2
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	3301      	adds	r3, #1
 800746a:	613b      	str	r3, [r7, #16]
    idx++;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	3301      	adds	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	4413      	add	r3, r2
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
    idx++;
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	3301      	adds	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e7      	bne.n	800745a <USBD_GetString+0x6a>
 800748a:	e000      	b.n	800748e <USBD_GetString+0x9e>
    return;
 800748c:	bf00      	nop
  }
}
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074a4:	e005      	b.n	80074b2 <USBD_GetLen+0x1e>
  {
    len++;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	3301      	adds	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f5      	bne.n	80074a6 <USBD_GetLen+0x12>
  }

  return len;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	2100      	movs	r1, #0
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fce1 	bl	8007eb6 <USBD_LL_Transmit>

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	2100      	movs	r1, #0
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fcd0 	bl	8007eb6 <USBD_LL_Transmit>

  return USBD_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2203      	movs	r2, #3
 8007530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	2100      	movs	r1, #0
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 fcd4 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	2100      	movs	r1, #0
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fcc3 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2204      	movs	r2, #4
 8007588:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800758c:	2300      	movs	r3, #0
 800758e:	2200      	movs	r2, #0
 8007590:	2100      	movs	r1, #0
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fc8f 	bl	8007eb6 <USBD_LL_Transmit>

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2205      	movs	r2, #5
 80075ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075b2:	2300      	movs	r3, #0
 80075b4:	2200      	movs	r2, #0
 80075b6:	2100      	movs	r1, #0
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc9d 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075cc:	2200      	movs	r2, #0
 80075ce:	4912      	ldr	r1, [pc, #72]	@ (8007618 <MX_USB_DEVICE_Init+0x50>)
 80075d0:	4812      	ldr	r0, [pc, #72]	@ (800761c <MX_USB_DEVICE_Init+0x54>)
 80075d2:	f7fe fcf7 	bl	8005fc4 <USBD_Init>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075dc:	f7f9 f9ee 	bl	80009bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075e0:	490f      	ldr	r1, [pc, #60]	@ (8007620 <MX_USB_DEVICE_Init+0x58>)
 80075e2:	480e      	ldr	r0, [pc, #56]	@ (800761c <MX_USB_DEVICE_Init+0x54>)
 80075e4:	f7fe fd1e 	bl	8006024 <USBD_RegisterClass>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075ee:	f7f9 f9e5 	bl	80009bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075f2:	490c      	ldr	r1, [pc, #48]	@ (8007624 <MX_USB_DEVICE_Init+0x5c>)
 80075f4:	4809      	ldr	r0, [pc, #36]	@ (800761c <MX_USB_DEVICE_Init+0x54>)
 80075f6:	f7fe fc15 	bl	8005e24 <USBD_CDC_RegisterInterface>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007600:	f7f9 f9dc 	bl	80009bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007604:	4805      	ldr	r0, [pc, #20]	@ (800761c <MX_USB_DEVICE_Init+0x54>)
 8007606:	f7fe fd43 	bl	8006090 <USBD_Start>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007610:	f7f9 f9d4 	bl	80009bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007614:	bf00      	nop
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200000ac 	.word	0x200000ac
 800761c:	20000174 	.word	0x20000174
 8007620:	20000018 	.word	0x20000018
 8007624:	20000098 	.word	0x20000098

08007628 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800762c:	2200      	movs	r2, #0
 800762e:	4905      	ldr	r1, [pc, #20]	@ (8007644 <CDC_Init_FS+0x1c>)
 8007630:	4805      	ldr	r0, [pc, #20]	@ (8007648 <CDC_Init_FS+0x20>)
 8007632:	f7fe fc11 	bl	8005e58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007636:	4905      	ldr	r1, [pc, #20]	@ (800764c <CDC_Init_FS+0x24>)
 8007638:	4803      	ldr	r0, [pc, #12]	@ (8007648 <CDC_Init_FS+0x20>)
 800763a:	f7fe fc2f 	bl	8005e9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800763e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007640:	4618      	mov	r0, r3
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20000850 	.word	0x20000850
 8007648:	20000174 	.word	0x20000174
 800764c:	20000450 	.word	0x20000450

08007650 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007654:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007656:	4618      	mov	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
 800766c:	4613      	mov	r3, r2
 800766e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	2b23      	cmp	r3, #35	@ 0x23
 8007674:	d84a      	bhi.n	800770c <CDC_Control_FS+0xac>
 8007676:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <CDC_Control_FS+0x1c>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	0800770d 	.word	0x0800770d
 8007680:	0800770d 	.word	0x0800770d
 8007684:	0800770d 	.word	0x0800770d
 8007688:	0800770d 	.word	0x0800770d
 800768c:	0800770d 	.word	0x0800770d
 8007690:	0800770d 	.word	0x0800770d
 8007694:	0800770d 	.word	0x0800770d
 8007698:	0800770d 	.word	0x0800770d
 800769c:	0800770d 	.word	0x0800770d
 80076a0:	0800770d 	.word	0x0800770d
 80076a4:	0800770d 	.word	0x0800770d
 80076a8:	0800770d 	.word	0x0800770d
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	0800770d 	.word	0x0800770d
 80076b4:	0800770d 	.word	0x0800770d
 80076b8:	0800770d 	.word	0x0800770d
 80076bc:	0800770d 	.word	0x0800770d
 80076c0:	0800770d 	.word	0x0800770d
 80076c4:	0800770d 	.word	0x0800770d
 80076c8:	0800770d 	.word	0x0800770d
 80076cc:	0800770d 	.word	0x0800770d
 80076d0:	0800770d 	.word	0x0800770d
 80076d4:	0800770d 	.word	0x0800770d
 80076d8:	0800770d 	.word	0x0800770d
 80076dc:	0800770d 	.word	0x0800770d
 80076e0:	0800770d 	.word	0x0800770d
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	0800770d 	.word	0x0800770d
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	0800770d 	.word	0x0800770d
 80076f8:	0800770d 	.word	0x0800770d
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	0800770d 	.word	0x0800770d
 8007704:	0800770d 	.word	0x0800770d
 8007708:	0800770d 	.word	0x0800770d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800770c:	bf00      	nop
  }

  return (USBD_OK);
 800770e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	4805      	ldr	r0, [pc, #20]	@ (8007740 <CDC_Receive_FS+0x24>)
 800772a:	f7fe fbb7 	bl	8005e9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800772e:	4804      	ldr	r0, [pc, #16]	@ (8007740 <CDC_Receive_FS+0x24>)
 8007730:	f7fe fc12 	bl	8005f58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007734:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000174 	.word	0x20000174

08007744 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007754:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <CDC_Transmit_FS+0x48>)
 8007756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800775a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007766:	2301      	movs	r3, #1
 8007768:	e00b      	b.n	8007782 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800776a:	887b      	ldrh	r3, [r7, #2]
 800776c:	461a      	mov	r2, r3
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4806      	ldr	r0, [pc, #24]	@ (800778c <CDC_Transmit_FS+0x48>)
 8007772:	f7fe fb71 	bl	8005e58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007776:	4805      	ldr	r0, [pc, #20]	@ (800778c <CDC_Transmit_FS+0x48>)
 8007778:	f7fe fbae 	bl	8005ed8 <USBD_CDC_TransmitPacket>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000174 	.word	0x20000174

08007790 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80077a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2212      	movs	r2, #18
 80077c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077c6:	4b03      	ldr	r3, [pc, #12]	@ (80077d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	200000c8 	.word	0x200000c8

080077d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2204      	movs	r2, #4
 80077e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077ea:	4b03      	ldr	r3, [pc, #12]	@ (80077f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	200000dc 	.word	0x200000dc

080077fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	6039      	str	r1, [r7, #0]
 8007806:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	4907      	ldr	r1, [pc, #28]	@ (8007830 <USBD_FS_ProductStrDescriptor+0x34>)
 8007812:	4808      	ldr	r0, [pc, #32]	@ (8007834 <USBD_FS_ProductStrDescriptor+0x38>)
 8007814:	f7ff fdec 	bl	80073f0 <USBD_GetString>
 8007818:	e004      	b.n	8007824 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	4904      	ldr	r1, [pc, #16]	@ (8007830 <USBD_FS_ProductStrDescriptor+0x34>)
 800781e:	4805      	ldr	r0, [pc, #20]	@ (8007834 <USBD_FS_ProductStrDescriptor+0x38>)
 8007820:	f7ff fde6 	bl	80073f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000c50 	.word	0x20000c50
 8007834:	080081c0 	.word	0x080081c0

08007838 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	4904      	ldr	r1, [pc, #16]	@ (8007858 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007848:	4804      	ldr	r0, [pc, #16]	@ (800785c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800784a:	f7ff fdd1 	bl	80073f0 <USBD_GetString>
  return USBD_StrDesc;
 800784e:	4b02      	ldr	r3, [pc, #8]	@ (8007858 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20000c50 	.word	0x20000c50
 800785c:	080081d8 	.word	0x080081d8

08007860 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	6039      	str	r1, [r7, #0]
 800786a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	221a      	movs	r2, #26
 8007870:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007872:	f000 f843 	bl	80078fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007876:	4b02      	ldr	r3, [pc, #8]	@ (8007880 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	200000e0 	.word	0x200000e0

08007884 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007890:	79fb      	ldrb	r3, [r7, #7]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	4907      	ldr	r1, [pc, #28]	@ (80078b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800789a:	4808      	ldr	r0, [pc, #32]	@ (80078bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800789c:	f7ff fda8 	bl	80073f0 <USBD_GetString>
 80078a0:	e004      	b.n	80078ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	4904      	ldr	r1, [pc, #16]	@ (80078b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078a6:	4805      	ldr	r0, [pc, #20]	@ (80078bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80078a8:	f7ff fda2 	bl	80073f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078ac:	4b02      	ldr	r3, [pc, #8]	@ (80078b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000c50 	.word	0x20000c50
 80078bc:	080081ec 	.word	0x080081ec

080078c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d105      	bne.n	80078de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4907      	ldr	r1, [pc, #28]	@ (80078f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078d6:	4808      	ldr	r0, [pc, #32]	@ (80078f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078d8:	f7ff fd8a 	bl	80073f0 <USBD_GetString>
 80078dc:	e004      	b.n	80078e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	4904      	ldr	r1, [pc, #16]	@ (80078f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078e2:	4805      	ldr	r0, [pc, #20]	@ (80078f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078e4:	f7ff fd84 	bl	80073f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078e8:	4b02      	ldr	r3, [pc, #8]	@ (80078f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000c50 	.word	0x20000c50
 80078f8:	080081f8 	.word	0x080081f8

080078fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007902:	4b0f      	ldr	r3, [pc, #60]	@ (8007940 <Get_SerialNum+0x44>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007908:	4b0e      	ldr	r3, [pc, #56]	@ (8007944 <Get_SerialNum+0x48>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800790e:	4b0e      	ldr	r3, [pc, #56]	@ (8007948 <Get_SerialNum+0x4c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007922:	2208      	movs	r2, #8
 8007924:	4909      	ldr	r1, [pc, #36]	@ (800794c <Get_SerialNum+0x50>)
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 f814 	bl	8007954 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800792c:	2204      	movs	r2, #4
 800792e:	4908      	ldr	r1, [pc, #32]	@ (8007950 <Get_SerialNum+0x54>)
 8007930:	68b8      	ldr	r0, [r7, #8]
 8007932:	f000 f80f 	bl	8007954 <IntToUnicode>
  }
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	1fff7a10 	.word	0x1fff7a10
 8007944:	1fff7a14 	.word	0x1fff7a14
 8007948:	1fff7a18 	.word	0x1fff7a18
 800794c:	200000e2 	.word	0x200000e2
 8007950:	200000f2 	.word	0x200000f2

08007954 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
 800796a:	e027      	b.n	80079bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	0f1b      	lsrs	r3, r3, #28
 8007970:	2b09      	cmp	r3, #9
 8007972:	d80b      	bhi.n	800798c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	0f1b      	lsrs	r3, r3, #28
 8007978:	b2da      	uxtb	r2, r3
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	4619      	mov	r1, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	440b      	add	r3, r1
 8007984:	3230      	adds	r2, #48	@ 0x30
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	e00a      	b.n	80079a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	0f1b      	lsrs	r3, r3, #28
 8007990:	b2da      	uxtb	r2, r3
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	4619      	mov	r1, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	440b      	add	r3, r1
 800799c:	3237      	adds	r2, #55	@ 0x37
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	3301      	adds	r3, #1
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	4413      	add	r3, r2
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	3301      	adds	r3, #1
 80079ba:	75fb      	strb	r3, [r7, #23]
 80079bc:	7dfa      	ldrb	r2, [r7, #23]
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d3d3      	bcc.n	800796c <IntToUnicode+0x18>
  }
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	@ 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079dc:	f107 0314 	add.w	r3, r7, #20
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079f4:	d13a      	bne.n	8007a6c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079f6:	2300      	movs	r3, #0
 80079f8:	613b      	str	r3, [r7, #16]
 80079fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007a74 <HAL_PCD_MspInit+0xa0>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fe:	4a1d      	ldr	r2, [pc, #116]	@ (8007a74 <HAL_PCD_MspInit+0xa0>)
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a06:	4b1b      	ldr	r3, [pc, #108]	@ (8007a74 <HAL_PCD_MspInit+0xa0>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a20:	2303      	movs	r3, #3
 8007a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a24:	230a      	movs	r3, #10
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4812      	ldr	r0, [pc, #72]	@ (8007a78 <HAL_PCD_MspInit+0xa4>)
 8007a30:	f7f9 fa58 	bl	8000ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a34:	4b0f      	ldr	r3, [pc, #60]	@ (8007a74 <HAL_PCD_MspInit+0xa0>)
 8007a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a38:	4a0e      	ldr	r2, [pc, #56]	@ (8007a74 <HAL_PCD_MspInit+0xa0>)
 8007a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <HAL_PCD_MspInit+0xa0>)
 8007a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a48:	4a0a      	ldr	r2, [pc, #40]	@ (8007a74 <HAL_PCD_MspInit+0xa0>)
 8007a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a50:	4b08      	ldr	r3, [pc, #32]	@ (8007a74 <HAL_PCD_MspInit+0xa0>)
 8007a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	2043      	movs	r0, #67	@ 0x43
 8007a62:	f7f9 fa08 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a66:	2043      	movs	r0, #67	@ 0x43
 8007a68:	f7f9 fa21 	bl	8000eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	3728      	adds	r7, #40	@ 0x28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	40023800 	.word	0x40023800
 8007a78:	40020000 	.word	0x40020000

08007a7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f7fe fb49 	bl	800612a <USBD_LL_SetupStage>
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f7fe fb83 	bl	80061d4 <USBD_LL_DataOutStage>
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	3320      	adds	r3, #32
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	4619      	mov	r1, r3
 8007afe:	f7fe fc1c 	bl	800633a <USBD_LL_DataInStage>
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fd56 	bl	80065ca <USBD_LL_SOF>
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	79db      	ldrb	r3, [r3, #7]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d001      	beq.n	8007b3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b3a:	f7f8 ff3f 	bl	80009bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b44:	7bfa      	ldrb	r2, [r7, #15]
 8007b46:	4611      	mov	r1, r2
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fcfa 	bl	8006542 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fca2 	bl	800649e <USBD_LL_Reset>
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fcf5 	bl	8006562 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	7adb      	ldrb	r3, [r3, #11]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b98:	4b04      	ldr	r3, [pc, #16]	@ (8007bac <HAL_PCD_SuspendCallback+0x48>)
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	4a03      	ldr	r2, [pc, #12]	@ (8007bac <HAL_PCD_SuspendCallback+0x48>)
 8007b9e:	f043 0306 	orr.w	r3, r3, #6
 8007ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	e000ed00 	.word	0xe000ed00

08007bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fceb 	bl	800659a <USBD_LL_Resume>
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bde:	78fa      	ldrb	r2, [r7, #3]
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fd43 	bl	800666e <USBD_LL_IsoOUTIncomplete>
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c02:	78fa      	ldrb	r2, [r7, #3]
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe fcff 	bl	800660a <USBD_LL_IsoINIncomplete>
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe fd55 	bl	80066d2 <USBD_LL_DevConnected>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fd52 	bl	80066e8 <USBD_LL_DevDisconnected>
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d13c      	bne.n	8007cd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c5c:	4a20      	ldr	r2, [pc, #128]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c68:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007c72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c74:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c76:	2204      	movs	r2, #4
 8007c78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c7a:	4b19      	ldr	r3, [pc, #100]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c80:	4b17      	ldr	r3, [pc, #92]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c86:	4b16      	ldr	r3, [pc, #88]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c88:	2202      	movs	r2, #2
 8007c8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c8c:	4b14      	ldr	r3, [pc, #80]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c92:	4b13      	ldr	r3, [pc, #76]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c98:	4b11      	ldr	r3, [pc, #68]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007caa:	480d      	ldr	r0, [pc, #52]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007cac:	f7fa fadc 	bl	8002268 <HAL_PCD_Init>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007cb6:	f7f8 fe81 	bl	80009bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cba:	2180      	movs	r1, #128	@ 0x80
 8007cbc:	4808      	ldr	r0, [pc, #32]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007cbe:	f7fb fd08 	bl	80036d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cc2:	2240      	movs	r2, #64	@ 0x40
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4806      	ldr	r0, [pc, #24]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007cc8:	f7fb fcbc 	bl	8003644 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ccc:	2280      	movs	r2, #128	@ 0x80
 8007cce:	2101      	movs	r1, #1
 8007cd0:	4803      	ldr	r0, [pc, #12]	@ (8007ce0 <USBD_LL_Init+0x94>)
 8007cd2:	f7fb fcb7 	bl	8003644 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000e50 	.word	0x20000e50

08007ce4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fa fbc3 	bl	8002486 <HAL_PCD_Start>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 f942 	bl	8007f90 <USBD_Get_USB_Status>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	4608      	mov	r0, r1
 8007d24:	4611      	mov	r1, r2
 8007d26:	461a      	mov	r2, r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	70fb      	strb	r3, [r7, #3]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70bb      	strb	r3, [r7, #2]
 8007d30:	4613      	mov	r3, r2
 8007d32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d42:	78bb      	ldrb	r3, [r7, #2]
 8007d44:	883a      	ldrh	r2, [r7, #0]
 8007d46:	78f9      	ldrb	r1, [r7, #3]
 8007d48:	f7fb f897 	bl	8002e7a <HAL_PCD_EP_Open>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f91c 	bl	8007f90 <USBD_Get_USB_Status>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fb f8e2 	bl	8002f4e <HAL_PCD_EP_Close>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f8fd 	bl	8007f90 <USBD_Get_USB_Status>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fb f99a 	bl	80030fc <HAL_PCD_EP_SetStall>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 f8de 	bl	8007f90 <USBD_Get_USB_Status>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007dfc:	78fa      	ldrb	r2, [r7, #3]
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fb f9de 	bl	80031c2 <HAL_PCD_EP_ClrStall>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 f8bf 	bl	8007f90 <USBD_Get_USB_Status>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da0b      	bge.n	8007e54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	4613      	mov	r3, r2
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	3316      	adds	r3, #22
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	e00b      	b.n	8007e6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007e6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	4611      	mov	r1, r2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fa ffcb 	bl	8002e32 <HAL_PCD_SetAddress>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 f874 	bl	8007f90 <USBD_Get_USB_Status>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b086      	sub	sp, #24
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ed4:	7af9      	ldrb	r1, [r7, #11]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	f7fb f8d5 	bl	8003088 <HAL_PCD_EP_Transmit>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f853 	bl	8007f90 <USBD_Get_USB_Status>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eee:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	460b      	mov	r3, r1
 8007f06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007f16:	7af9      	ldrb	r1, [r7, #11]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	f7fb f861 	bl	8002fe2 <HAL_PCD_EP_Receive>
 8007f20:	4603      	mov	r3, r0
 8007f22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 f832 	bl	8007f90 <USBD_Get_USB_Status>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f30:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	4611      	mov	r1, r2
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fb f881 	bl	8003058 <HAL_PCD_EP_GetRxCount>
 8007f56:	4603      	mov	r3, r0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f68:	4b03      	ldr	r3, [pc, #12]	@ (8007f78 <USBD_static_malloc+0x18>)
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20001334 	.word	0x20001334

08007f7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]

}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d817      	bhi.n	8007fd4 <USBD_Get_USB_Status+0x44>
 8007fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <USBD_Get_USB_Status+0x1c>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fc3 	.word	0x08007fc3
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fcf 	.word	0x08007fcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc0:	e00b      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc6:	e008      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	73fb      	strb	r3, [r7, #15]
    break;
 8007fcc:	e005      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd2:	e002      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd8:	bf00      	nop
  }
  return usb_status;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <__itoa>:
 8007fe8:	1e93      	subs	r3, r2, #2
 8007fea:	2b22      	cmp	r3, #34	@ 0x22
 8007fec:	b510      	push	{r4, lr}
 8007fee:	460c      	mov	r4, r1
 8007ff0:	d904      	bls.n	8007ffc <__itoa+0x14>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	700b      	strb	r3, [r1, #0]
 8007ff6:	461c      	mov	r4, r3
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	bd10      	pop	{r4, pc}
 8007ffc:	2a0a      	cmp	r2, #10
 8007ffe:	d109      	bne.n	8008014 <__itoa+0x2c>
 8008000:	2800      	cmp	r0, #0
 8008002:	da07      	bge.n	8008014 <__itoa+0x2c>
 8008004:	232d      	movs	r3, #45	@ 0x2d
 8008006:	700b      	strb	r3, [r1, #0]
 8008008:	4240      	negs	r0, r0
 800800a:	2101      	movs	r1, #1
 800800c:	4421      	add	r1, r4
 800800e:	f000 f805 	bl	800801c <__utoa>
 8008012:	e7f1      	b.n	8007ff8 <__itoa+0x10>
 8008014:	2100      	movs	r1, #0
 8008016:	e7f9      	b.n	800800c <__itoa+0x24>

08008018 <itoa>:
 8008018:	f7ff bfe6 	b.w	8007fe8 <__itoa>

0800801c <__utoa>:
 800801c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801e:	4c1f      	ldr	r4, [pc, #124]	@ (800809c <__utoa+0x80>)
 8008020:	b08b      	sub	sp, #44	@ 0x2c
 8008022:	4605      	mov	r5, r0
 8008024:	460b      	mov	r3, r1
 8008026:	466e      	mov	r6, sp
 8008028:	f104 0c20 	add.w	ip, r4, #32
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	6861      	ldr	r1, [r4, #4]
 8008030:	4637      	mov	r7, r6
 8008032:	c703      	stmia	r7!, {r0, r1}
 8008034:	3408      	adds	r4, #8
 8008036:	4564      	cmp	r4, ip
 8008038:	463e      	mov	r6, r7
 800803a:	d1f7      	bne.n	800802c <__utoa+0x10>
 800803c:	7921      	ldrb	r1, [r4, #4]
 800803e:	7139      	strb	r1, [r7, #4]
 8008040:	1e91      	subs	r1, r2, #2
 8008042:	6820      	ldr	r0, [r4, #0]
 8008044:	6038      	str	r0, [r7, #0]
 8008046:	2922      	cmp	r1, #34	@ 0x22
 8008048:	f04f 0100 	mov.w	r1, #0
 800804c:	d904      	bls.n	8008058 <__utoa+0x3c>
 800804e:	7019      	strb	r1, [r3, #0]
 8008050:	460b      	mov	r3, r1
 8008052:	4618      	mov	r0, r3
 8008054:	b00b      	add	sp, #44	@ 0x2c
 8008056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008058:	1e58      	subs	r0, r3, #1
 800805a:	4684      	mov	ip, r0
 800805c:	fbb5 f7f2 	udiv	r7, r5, r2
 8008060:	fb02 5617 	mls	r6, r2, r7, r5
 8008064:	3628      	adds	r6, #40	@ 0x28
 8008066:	446e      	add	r6, sp
 8008068:	460c      	mov	r4, r1
 800806a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800806e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008072:	462e      	mov	r6, r5
 8008074:	42b2      	cmp	r2, r6
 8008076:	f101 0101 	add.w	r1, r1, #1
 800807a:	463d      	mov	r5, r7
 800807c:	d9ee      	bls.n	800805c <__utoa+0x40>
 800807e:	2200      	movs	r2, #0
 8008080:	545a      	strb	r2, [r3, r1]
 8008082:	1919      	adds	r1, r3, r4
 8008084:	1aa5      	subs	r5, r4, r2
 8008086:	42aa      	cmp	r2, r5
 8008088:	dae3      	bge.n	8008052 <__utoa+0x36>
 800808a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800808e:	780e      	ldrb	r6, [r1, #0]
 8008090:	7006      	strb	r6, [r0, #0]
 8008092:	3201      	adds	r2, #1
 8008094:	f801 5901 	strb.w	r5, [r1], #-1
 8008098:	e7f4      	b.n	8008084 <__utoa+0x68>
 800809a:	bf00      	nop
 800809c:	08008220 	.word	0x08008220

080080a0 <memset>:
 80080a0:	4402      	add	r2, r0
 80080a2:	4603      	mov	r3, r0
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d100      	bne.n	80080aa <memset+0xa>
 80080a8:	4770      	bx	lr
 80080aa:	f803 1b01 	strb.w	r1, [r3], #1
 80080ae:	e7f9      	b.n	80080a4 <memset+0x4>

080080b0 <__libc_init_array>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	4d0d      	ldr	r5, [pc, #52]	@ (80080e8 <__libc_init_array+0x38>)
 80080b4:	4c0d      	ldr	r4, [pc, #52]	@ (80080ec <__libc_init_array+0x3c>)
 80080b6:	1b64      	subs	r4, r4, r5
 80080b8:	10a4      	asrs	r4, r4, #2
 80080ba:	2600      	movs	r6, #0
 80080bc:	42a6      	cmp	r6, r4
 80080be:	d109      	bne.n	80080d4 <__libc_init_array+0x24>
 80080c0:	4d0b      	ldr	r5, [pc, #44]	@ (80080f0 <__libc_init_array+0x40>)
 80080c2:	4c0c      	ldr	r4, [pc, #48]	@ (80080f4 <__libc_init_array+0x44>)
 80080c4:	f000 f818 	bl	80080f8 <_init>
 80080c8:	1b64      	subs	r4, r4, r5
 80080ca:	10a4      	asrs	r4, r4, #2
 80080cc:	2600      	movs	r6, #0
 80080ce:	42a6      	cmp	r6, r4
 80080d0:	d105      	bne.n	80080de <__libc_init_array+0x2e>
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d8:	4798      	blx	r3
 80080da:	3601      	adds	r6, #1
 80080dc:	e7ee      	b.n	80080bc <__libc_init_array+0xc>
 80080de:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e2:	4798      	blx	r3
 80080e4:	3601      	adds	r6, #1
 80080e6:	e7f2      	b.n	80080ce <__libc_init_array+0x1e>
 80080e8:	08008250 	.word	0x08008250
 80080ec:	08008250 	.word	0x08008250
 80080f0:	08008250 	.word	0x08008250
 80080f4:	08008254 	.word	0x08008254

080080f8 <_init>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr

08008104 <_fini>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	bf00      	nop
 8008108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810a:	bc08      	pop	{r3}
 800810c:	469e      	mov	lr, r3
 800810e:	4770      	bx	lr
