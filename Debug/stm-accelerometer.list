
stm-accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800844c  0800844c  0000944c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008564  08008564  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008564  08008564  00009564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800856c  0800856c  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800856c  0800856c  0000956c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008570  08008570  00009570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008574  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001508  200000fc  08008670  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001604  08008670  0000a604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012aef  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003443  00000000  00000000  0001cc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00020060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c53  00000000  00000000  000210a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cb0  00000000  00000000  00021cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001874b  00000000  00000000  0003a9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008acdf  00000000  00000000  000530f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dddd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004314  00000000  00000000  000dde18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e212c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008434 	.word	0x08008434

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08008434 	.word	0x08008434

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	4b3b      	ldr	r3, [pc, #236]	@ (80005cc <MX_GPIO_Init+0x108>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a3a      	ldr	r2, [pc, #232]	@ (80005cc <MX_GPIO_Init+0x108>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b38      	ldr	r3, [pc, #224]	@ (80005cc <MX_GPIO_Init+0x108>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b34      	ldr	r3, [pc, #208]	@ (80005cc <MX_GPIO_Init+0x108>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a33      	ldr	r2, [pc, #204]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
 8000506:	4b31      	ldr	r3, [pc, #196]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b2d      	ldr	r3, [pc, #180]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	4a2c      	ldr	r2, [pc, #176]	@ (80005cc <MX_GPIO_Init+0x108>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	6313      	str	r3, [r2, #48]	@ 0x30
 8000522:	4b2a      	ldr	r3, [pc, #168]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b26      	ldr	r3, [pc, #152]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a25      	ldr	r2, [pc, #148]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b23      	ldr	r3, [pc, #140]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDLight_GPIO_Port, LEDLight_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000550:	481f      	ldr	r0, [pc, #124]	@ (80005d0 <MX_GPIO_Init+0x10c>)
 8000552:	f000 ff45 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800055c:	481d      	ldr	r0, [pc, #116]	@ (80005d4 <MX_GPIO_Init+0x110>)
 800055e:	f000 ff3f 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2140      	movs	r1, #64	@ 0x40
 8000566:	481c      	ldr	r0, [pc, #112]	@ (80005d8 <MX_GPIO_Init+0x114>)
 8000568:	f000 ff3a 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDLight_Pin */
  GPIO_InitStruct.Pin = LEDLight_Pin;
 800056c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDLight_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	4812      	ldr	r0, [pc, #72]	@ (80005d0 <MX_GPIO_Init+0x10c>)
 8000586:	f000 fda7 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800058a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <MX_GPIO_Init+0x110>)
 80005a4:	f000 fd98 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005a8:	2340      	movs	r3, #64	@ 0x40
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <MX_GPIO_Init+0x114>)
 80005c0:	f000 fd8a 	bl	80010d8 <HAL_GPIO_Init>

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	@ 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020800 	.word	0x40020800
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40020400 	.word	0x40020400

080005dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <MX_I2C1_Init+0x50>)
 800061a:	f000 ff15 	bl	8001448 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 fa24 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000118 	.word	0x20000118
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <HAL_I2C_MspInit+0x84>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d12c      	bne.n	80006b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <HAL_I2C_MspInit+0x88>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <HAL_I2C_MspInit+0x88>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <HAL_I2C_MspInit+0x88>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000676:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800067a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067c:	2312      	movs	r3, #18
 800067e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000688:	2304      	movs	r3, #4
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <HAL_I2C_MspInit+0x8c>)
 8000694:	f000 fd20 	bl	80010d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <HAL_I2C_MspInit+0x88>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <HAL_I2C_MspInit+0x88>)
 80006a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <HAL_I2C_MspInit+0x88>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020400 	.word	0x40020400

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b5b0      	push	{r4, r5, r7, lr}
 80006ca:	b0aa      	sub	sp, #168	@ 0xa8
 80006cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fb5b 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f961 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f7ff fef5 	bl	80004c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006da:	f7ff ff7f 	bl	80005dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80006de:	f000 f9cd 	bl	8000a7c <MX_SPI1_Init>
  MX_SPI2_Init();
 80006e2:	f000 fa01 	bl	8000ae8 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80006e6:	f007 f90d 	bl	8007904 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t result = 0x0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &result, 1, 100);
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2301      	movs	r3, #1
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	f107 0391 	add.w	r3, r7, #145	@ 0x91
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2301      	movs	r3, #1
 8000700:	2275      	movs	r2, #117	@ 0x75
 8000702:	21d0      	movs	r1, #208	@ 0xd0
 8000704:	489a      	ldr	r0, [pc, #616]	@ (8000970 <main+0x2a8>)
 8000706:	f001 f8dd 	bl	80018c4 <HAL_I2C_Mem_Read>
  HAL_Delay (1000);
 800070a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070e:	f000 fbad 	bl	8000e6c <HAL_Delay>

  if (result == 0x68) {
 8000712:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8000716:	2b68      	cmp	r3, #104	@ 0x68
 8000718:	d15b      	bne.n	80007d2 <main+0x10a>
	  uint8_t send[] = "the device was found\r\n";
 800071a:	4b96      	ldr	r3, [pc, #600]	@ (8000974 <main+0x2ac>)
 800071c:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000720:	461d      	mov	r5, r3
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 0003 	ldmia.w	r5, {r0, r1}
 800072a:	6020      	str	r0, [r4, #0]
 800072c:	3404      	adds	r4, #4
 800072e:	8021      	strh	r1, [r4, #0]
 8000730:	3402      	adds	r4, #2
 8000732:	0c0b      	lsrs	r3, r1, #16
 8000734:	7023      	strb	r3, [r4, #0]
	  CDC_Transmit_FS (send, (uint16_t)sizeof(send));
 8000736:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800073a:	2117      	movs	r1, #23
 800073c:	4618      	mov	r0, r3
 800073e:	f007 f99f 	bl	8007a80 <CDC_Transmit_FS>
	  HAL_Delay (10);
 8000742:	200a      	movs	r0, #10
 8000744:	f000 fb92 	bl	8000e6c <HAL_Delay>
	  uint8_t data;
	  data = 0x00;
 8000748:	2300      	movs	r3, #0
 800074a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x6B, 1, &data, 1, 500); //initialize mpu clock
 800074e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	226b      	movs	r2, #107	@ 0x6b
 8000762:	21d0      	movs	r1, #208	@ 0xd0
 8000764:	4882      	ldr	r0, [pc, #520]	@ (8000970 <main+0x2a8>)
 8000766:	f000 ffb3 	bl	80016d0 <HAL_I2C_Mem_Write>
	  data = 0x07;
 800076a:	2307      	movs	r3, #7
 800076c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x19, 1, &data, 1, 500); //measurement poll rate of 1 khz
 8000770:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2301      	movs	r3, #1
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	2219      	movs	r2, #25
 8000784:	21d0      	movs	r1, #208	@ 0xd0
 8000786:	487a      	ldr	r0, [pc, #488]	@ (8000970 <main+0x2a8>)
 8000788:	f000 ffa2 	bl	80016d0 <HAL_I2C_Mem_Write>
	  data = 0b00001000;
 800078c:	2308      	movs	r3, #8
 800078e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x1C, 1, &data, 1, 500); //accel set to [-4g, 4g]
 8000792:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	2301      	movs	r3, #1
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	221c      	movs	r2, #28
 80007a6:	21d0      	movs	r1, #208	@ 0xd0
 80007a8:	4871      	ldr	r0, [pc, #452]	@ (8000970 <main+0x2a8>)
 80007aa:	f000 ff91 	bl	80016d0 <HAL_I2C_Mem_Write>
	  data = 0x00;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, 0x1B, 1, &data, 1, 500); //gyro set to [-250degree/sec, 250degree/sec]
 80007b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007b8:	9302      	str	r3, [sp, #8]
 80007ba:	2301      	movs	r3, #1
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	221b      	movs	r2, #27
 80007c8:	21d0      	movs	r1, #208	@ 0xd0
 80007ca:	4869      	ldr	r0, [pc, #420]	@ (8000970 <main+0x2a8>)
 80007cc:	f000 ff80 	bl	80016d0 <HAL_I2C_Mem_Write>
 80007d0:	e02e      	b.n	8000830 <main+0x168>
  } else {
	  uint8_t send[] = "          \r\n";
 80007d2:	4b69      	ldr	r3, [pc, #420]	@ (8000978 <main+0x2b0>)
 80007d4:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 80007d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007da:	c407      	stmia	r4!, {r0, r1, r2}
 80007dc:	7023      	strb	r3, [r4, #0]
	  itoa(result, (char*)send, 10);
 80007de:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80007e2:	4618      	mov	r0, r3
 80007e4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80007e8:	220a      	movs	r2, #10
 80007ea:	4619      	mov	r1, r3
 80007ec:	f007 fdb2 	bl	8008354 <itoa>
	  HAL_Delay (10);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fb3b 	bl	8000e6c <HAL_Delay>
	  CDC_Transmit_FS (send, sizeof(send));
 80007f6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80007fa:	210d      	movs	r1, #13
 80007fc:	4618      	mov	r0, r3
 80007fe:	f007 f93f 	bl	8007a80 <CDC_Transmit_FS>
	  HAL_Delay (10);
 8000802:	200a      	movs	r0, #10
 8000804:	f000 fb32 	bl	8000e6c <HAL_Delay>
	  uint8_t errormessage[] = "there was an error\r\n";
 8000808:	4b5c      	ldr	r3, [pc, #368]	@ (800097c <main+0x2b4>)
 800080a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000818:	6020      	str	r0, [r4, #0]
 800081a:	3404      	adds	r4, #4
 800081c:	7021      	strb	r1, [r4, #0]
	  CDC_Transmit_FS (errormessage, sizeof(errormessage));
 800081e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000822:	2115      	movs	r1, #21
 8000824:	4618      	mov	r0, r3
 8000826:	f007 f92b 	bl	8007a80 <CDC_Transmit_FS>
	  HAL_Delay (10);
 800082a:	200a      	movs	r0, #10
 800082c:	f000 fb1e 	bl	8000e6c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8000830:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000834:	4852      	ldr	r0, [pc, #328]	@ (8000980 <main+0x2b8>)
 8000836:	f000 fdec 	bl	8001412 <HAL_GPIO_TogglePin>
	  HAL_Delay (150);
 800083a:	2096      	movs	r0, #150	@ 0x96
 800083c:	f000 fb16 	bl	8000e6c <HAL_Delay>

	  uint8_t acceldata[] = {0, 0, 0, 0, 0, 0};
 8000840:	4a50      	ldr	r2, [pc, #320]	@ (8000984 <main+0x2bc>)
 8000842:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084a:	6018      	str	r0, [r3, #0]
 800084c:	3304      	adds	r3, #4
 800084e:	8019      	strh	r1, [r3, #0]
	  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, acceldata, 6, 1000);
 8000850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	2306      	movs	r3, #6
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2301      	movs	r3, #1
 8000862:	223b      	movs	r2, #59	@ 0x3b
 8000864:	21d0      	movs	r1, #208	@ 0xd0
 8000866:	4842      	ldr	r0, [pc, #264]	@ (8000970 <main+0x2a8>)
 8000868:	f001 f82c 	bl	80018c4 <HAL_I2C_Mem_Read>
	  HAL_Delay(100);
 800086c:	2064      	movs	r0, #100	@ 0x64
 800086e:	f000 fafd 	bl	8000e6c <HAL_Delay>
	  if ((acceldata[2] == 0) && (acceldata[3] == 0)) {
 8000872:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000876:	2b00      	cmp	r3, #0
 8000878:	d112      	bne.n	80008a0 <main+0x1d8>
 800087a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800087e:	2b00      	cmp	r3, #0
 8000880:	d10e      	bne.n	80008a0 <main+0x1d8>
		  uint8_t erroraccel[] = "error getting data\r\n";
 8000882:	4b41      	ldr	r3, [pc, #260]	@ (8000988 <main+0x2c0>)
 8000884:	463c      	mov	r4, r7
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000890:	6020      	str	r0, [r4, #0]
 8000892:	3404      	adds	r4, #4
 8000894:	7021      	strb	r1, [r4, #0]
		  CDC_Transmit_FS (erroraccel, sizeof(erroraccel));
 8000896:	463b      	mov	r3, r7
 8000898:	2115      	movs	r1, #21
 800089a:	4618      	mov	r0, r3
 800089c:	f007 f8f0 	bl	8007a80 <CDC_Transmit_FS>
	  }
	  int16_t rawx = (uint16_t)(acceldata[0] << 8 | acceldata[1]);
 80008a0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	  int16_t rawy = (uint16_t)(acceldata[2] << 8 | acceldata[3]);
 80008b4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	  int16_t rawz = (uint16_t)(acceldata[4] << 8 | acceldata[5]);
 80008c8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
	  HAL_Delay(50);
 80008dc:	2032      	movs	r0, #50	@ 0x32
 80008de:	f000 fac5 	bl	8000e6c <HAL_Delay>
	  uint8_t bufferx[] = "        : x\r\n";
 80008e2:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <main+0x2c4>)
 80008e4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80008e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ea:	c407      	stmia	r4!, {r0, r1, r2}
 80008ec:	8023      	strh	r3, [r4, #0]
	  uint8_t buffery[] = "        : y\r\n";
 80008ee:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <main+0x2c8>)
 80008f0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80008f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f6:	c407      	stmia	r4!, {r0, r1, r2}
 80008f8:	8023      	strh	r3, [r4, #0]
	  uint8_t bufferz[] = "        : z\r\n\r\n";
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <main+0x2cc>)
 80008fc:	f107 0418 	add.w	r4, r7, #24
 8000900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  itoa(rawx, (char*)bufferx, 10);
 8000906:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 800090a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800090e:	220a      	movs	r2, #10
 8000910:	4618      	mov	r0, r3
 8000912:	f007 fd1f 	bl	8008354 <itoa>
	  itoa(rawy, (char*)buffery, 10);
 8000916:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 800091a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800091e:	220a      	movs	r2, #10
 8000920:	4618      	mov	r0, r3
 8000922:	f007 fd17 	bl	8008354 <itoa>
	  itoa(rawz, (char*)bufferz, 10);
 8000926:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 800092a:	f107 0118 	add.w	r1, r7, #24
 800092e:	220a      	movs	r2, #10
 8000930:	4618      	mov	r0, r3
 8000932:	f007 fd0f 	bl	8008354 <itoa>
	  CDC_Transmit_FS (bufferx, sizeof(bufferx));
 8000936:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800093a:	210e      	movs	r1, #14
 800093c:	4618      	mov	r0, r3
 800093e:	f007 f89f 	bl	8007a80 <CDC_Transmit_FS>
	  HAL_Delay(2);
 8000942:	2002      	movs	r0, #2
 8000944:	f000 fa92 	bl	8000e6c <HAL_Delay>
	  CDC_Transmit_FS (buffery, sizeof(buffery));
 8000948:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800094c:	210e      	movs	r1, #14
 800094e:	4618      	mov	r0, r3
 8000950:	f007 f896 	bl	8007a80 <CDC_Transmit_FS>
	  HAL_Delay(2);
 8000954:	2002      	movs	r0, #2
 8000956:	f000 fa89 	bl	8000e6c <HAL_Delay>
	  CDC_Transmit_FS (bufferz, sizeof(bufferz));
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	2110      	movs	r1, #16
 8000960:	4618      	mov	r0, r3
 8000962:	f007 f88d 	bl	8007a80 <CDC_Transmit_FS>
	  HAL_Delay(20);
 8000966:	2014      	movs	r0, #20
 8000968:	f000 fa80 	bl	8000e6c <HAL_Delay>
  {
 800096c:	e760      	b.n	8000830 <main+0x168>
 800096e:	bf00      	nop
 8000970:	20000118 	.word	0x20000118
 8000974:	0800844c 	.word	0x0800844c
 8000978:	08008464 	.word	0x08008464
 800097c:	08008474 	.word	0x08008474
 8000980:	40020800 	.word	0x40020800
 8000984:	0800848c 	.word	0x0800848c
 8000988:	08008494 	.word	0x08008494
 800098c:	080084ac 	.word	0x080084ac
 8000990:	080084bc 	.word	0x080084bc
 8000994:	080084cc 	.word	0x080084cc

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b094      	sub	sp, #80	@ 0x50
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2230      	movs	r2, #48	@ 0x30
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f007 fd18 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <SystemClock_Config+0xd0>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <SystemClock_Config+0xd0>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <SystemClock_Config+0xd0>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <SystemClock_Config+0xd4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009e4:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <SystemClock_Config+0xd4>)
 80009e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <SystemClock_Config+0xd4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a02:	2302      	movs	r3, #2
 8000a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a0c:	2319      	movs	r3, #25
 8000a0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a10:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a16:	2304      	movs	r3, #4
 8000a18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 ff86 	bl	8003934 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a2e:	f000 f81f 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	230f      	movs	r3, #15
 8000a34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2302      	movs	r3, #2
 8000a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 f9e8 	bl	8003e24 <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a5a:	f000 f809 	bl	8000a70 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3750      	adds	r7, #80	@ 0x50
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40007000 	.word	0x40007000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000a82:	4a18      	ldr	r2, [pc, #96]	@ (8000ae4 <MX_SPI1_Init+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a86:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000a88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000aa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000ac8:	220a      	movs	r2, #10
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_SPI1_Init+0x64>)
 8000ace:	f003 fb75 	bl	80041bc <HAL_SPI_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ad8:	f7ff ffca 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000016c 	.word	0x2000016c
 8000ae4:	40013000 	.word	0x40013000

08000ae8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000aee:	4a18      	ldr	r2, [pc, #96]	@ (8000b50 <MX_SPI2_Init+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000af4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000af8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b34:	220a      	movs	r2, #10
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_SPI2_Init+0x64>)
 8000b3a:	f003 fb3f 	bl	80041bc <HAL_SPI_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b44:	f7ff ff94 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200001c4 	.word	0x200001c4
 8000b50:	40003800 	.word	0x40003800

08000b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	@ 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a32      	ldr	r2, [pc, #200]	@ (8000c3c <HAL_SPI_MspInit+0xe8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12c      	bne.n	8000bd0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	4b31      	ldr	r3, [pc, #196]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	4a30      	ldr	r2, [pc, #192]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b86:	4b2e      	ldr	r3, [pc, #184]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a29      	ldr	r2, [pc, #164]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bae:	2338      	movs	r3, #56	@ 0x38
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481e      	ldr	r0, [pc, #120]	@ (8000c44 <HAL_SPI_MspInit+0xf0>)
 8000bca:	f000 fa85 	bl	80010d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bce:	e031      	b.n	8000c34 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <HAL_SPI_MspInit+0xf4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12c      	bne.n	8000c34 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_SPI_MspInit+0xec>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c12:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c24:	2305      	movs	r3, #5
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <HAL_SPI_MspInit+0xf0>)
 8000c30:	f000 fa52 	bl	80010d8 <HAL_GPIO_Init>
}
 8000c34:	bf00      	nop
 8000c36:	3730      	adds	r7, #48	@ 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40013000 	.word	0x40013000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40003800 	.word	0x40003800

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf2:	f000 f89b 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <OTG_FS_IRQHandler+0x10>)
 8000d02:	f001 fd09 	bl	8002718 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000f00 	.word	0x20000f00

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d38:	f7ff ffea 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	@ (8000d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f007 fb43 	bl	80083ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fcaf 	bl	80006c8 <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000d78:	08008574 	.word	0x08008574
  ldr r2, =_sbss
 8000d7c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000d80:	20001604 	.word	0x20001604

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <HAL_Init+0x40>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_Init+0x40>)
 8000d9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	@ (8000dc8 <HAL_Init+0x40>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f94f 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	200f      	movs	r0, #15
 8000db8:	f000 f808 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff ff46 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023c00 	.word	0x40023c00

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_InitTick+0x54>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_InitTick+0x58>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f967 	bl	80010be <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00e      	b.n	8000e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d80a      	bhi.n	8000e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f000 f92f 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4a06      	ldr	r2, [pc, #24]	@ (8000e28 <HAL_InitTick+0x5c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	2000021c 	.word	0x2000021c

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	2000021c 	.word	0x2000021c

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff ffee 	bl	8000e54 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffde 	bl	8000e54 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff29 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff3e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff31 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e159      	b.n	80013a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8148 	bne.w	80013a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d005      	beq.n	800112a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	2b02      	cmp	r3, #2
 8001128:	d130      	bne.n	800118c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f003 0201 	and.w	r2, r3, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b03      	cmp	r3, #3
 8001196:	d017      	beq.n	80011c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d123      	bne.n	800121c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	69b9      	ldr	r1, [r7, #24]
 8001218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0203 	and.w	r2, r3, #3
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80a2 	beq.w	80013a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a56      	ldr	r2, [pc, #344]	@ (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b54      	ldr	r3, [pc, #336]	@ (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127a:	4a52      	ldr	r2, [pc, #328]	@ (80013c4 <HAL_GPIO_Init+0x2ec>)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a49      	ldr	r2, [pc, #292]	@ (80013c8 <HAL_GPIO_Init+0x2f0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x202>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a48      	ldr	r2, [pc, #288]	@ (80013cc <HAL_GPIO_Init+0x2f4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x1fe>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a47      	ldr	r2, [pc, #284]	@ (80013d0 <HAL_GPIO_Init+0x2f8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a46      	ldr	r2, [pc, #280]	@ (80013d4 <HAL_GPIO_Init+0x2fc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x1f6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a45      	ldr	r2, [pc, #276]	@ (80013d8 <HAL_GPIO_Init+0x300>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x1f2>
 80012c6:	2304      	movs	r3, #4
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012ca:	2307      	movs	r3, #7
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	@ (80013c4 <HAL_GPIO_Init+0x2ec>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b38      	ldr	r3, [pc, #224]	@ (80013dc <HAL_GPIO_Init+0x304>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a2f      	ldr	r2, [pc, #188]	@ (80013dc <HAL_GPIO_Init+0x304>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <HAL_GPIO_Init+0x304>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a24      	ldr	r2, [pc, #144]	@ (80013dc <HAL_GPIO_Init+0x304>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134e:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <HAL_GPIO_Init+0x304>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001372:	4a1a      	ldr	r2, [pc, #104]	@ (80013dc <HAL_GPIO_Init+0x304>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <HAL_GPIO_Init+0x304>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139c:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <HAL_GPIO_Init+0x304>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f aea2 	bls.w	80010f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001424:	887a      	ldrh	r2, [r7, #2]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	041a      	lsls	r2, r3, #16
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43d9      	mvns	r1, r3
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	400b      	ands	r3, r1
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e12b      	b.n	80016b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff f8e2 	bl	8000638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2224      	movs	r2, #36	@ 0x24
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800149a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014ac:	f002 fe72 	bl	8004194 <HAL_RCC_GetPCLK1Freq>
 80014b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a81      	ldr	r2, [pc, #516]	@ (80016bc <HAL_I2C_Init+0x274>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d807      	bhi.n	80014cc <HAL_I2C_Init+0x84>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a80      	ldr	r2, [pc, #512]	@ (80016c0 <HAL_I2C_Init+0x278>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	bf94      	ite	ls
 80014c4:	2301      	movls	r3, #1
 80014c6:	2300      	movhi	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e006      	b.n	80014da <HAL_I2C_Init+0x92>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4a7d      	ldr	r2, [pc, #500]	@ (80016c4 <HAL_I2C_Init+0x27c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	bf94      	ite	ls
 80014d4:	2301      	movls	r3, #1
 80014d6:	2300      	movhi	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0e7      	b.n	80016b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4a78      	ldr	r2, [pc, #480]	@ (80016c8 <HAL_I2C_Init+0x280>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9b      	lsrs	r3, r3, #18
 80014ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a6a      	ldr	r2, [pc, #424]	@ (80016bc <HAL_I2C_Init+0x274>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d802      	bhi.n	800151c <HAL_I2C_Init+0xd4>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3301      	adds	r3, #1
 800151a:	e009      	b.n	8001530 <HAL_I2C_Init+0xe8>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	4a69      	ldr	r2, [pc, #420]	@ (80016cc <HAL_I2C_Init+0x284>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	3301      	adds	r3, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	430b      	orrs	r3, r1
 8001536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001542:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	495c      	ldr	r1, [pc, #368]	@ (80016bc <HAL_I2C_Init+0x274>)
 800154c:	428b      	cmp	r3, r1
 800154e:	d819      	bhi.n	8001584 <HAL_I2C_Init+0x13c>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1e59      	subs	r1, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fbb1 f3f3 	udiv	r3, r1, r3
 800155e:	1c59      	adds	r1, r3, #1
 8001560:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001564:	400b      	ands	r3, r1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <HAL_I2C_Init+0x138>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e59      	subs	r1, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fbb1 f3f3 	udiv	r3, r1, r3
 8001578:	3301      	adds	r3, #1
 800157a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157e:	e051      	b.n	8001624 <HAL_I2C_Init+0x1dc>
 8001580:	2304      	movs	r3, #4
 8001582:	e04f      	b.n	8001624 <HAL_I2C_Init+0x1dc>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d111      	bne.n	80015b0 <HAL_I2C_Init+0x168>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	440b      	add	r3, r1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	e012      	b.n	80015d6 <HAL_I2C_Init+0x18e>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1e58      	subs	r0, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	0099      	lsls	r1, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_Init+0x196>
 80015da:	2301      	movs	r3, #1
 80015dc:	e022      	b.n	8001624 <HAL_I2C_Init+0x1dc>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10e      	bne.n	8001604 <HAL_I2C_Init+0x1bc>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1e58      	subs	r0, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6859      	ldr	r1, [r3, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	440b      	add	r3, r1
 80015f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001602:	e00f      	b.n	8001624 <HAL_I2C_Init+0x1dc>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1e58      	subs	r0, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	0099      	lsls	r1, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	fbb0 f3f3 	udiv	r3, r0, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	6809      	ldr	r1, [r1, #0]
 8001628:	4313      	orrs	r3, r2
 800162a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001652:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6911      	ldr	r1, [r2, #16]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68d2      	ldr	r2, [r2, #12]
 800165e:	4311      	orrs	r1, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	430b      	orrs	r3, r1
 8001666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	000186a0 	.word	0x000186a0
 80016c0:	001e847f 	.word	0x001e847f
 80016c4:	003d08ff 	.word	0x003d08ff
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	10624dd3 	.word	0x10624dd3

080016d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	817b      	strh	r3, [r7, #10]
 80016e2:	460b      	mov	r3, r1
 80016e4:	813b      	strh	r3, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016ea:	f7ff fbb3 	bl	8000e54 <HAL_GetTick>
 80016ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	f040 80d9 	bne.w	80018b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2319      	movs	r3, #25
 8001704:	2201      	movs	r2, #1
 8001706:	496d      	ldr	r1, [pc, #436]	@ (80018bc <HAL_I2C_Mem_Write+0x1ec>)
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fc8b 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001714:	2302      	movs	r3, #2
 8001716:	e0cc      	b.n	80018b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_I2C_Mem_Write+0x56>
 8001722:	2302      	movs	r3, #2
 8001724:	e0c5      	b.n	80018b2 <HAL_I2C_Mem_Write+0x1e2>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	d007      	beq.n	800174c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800175a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2221      	movs	r2, #33	@ 0x21
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2240      	movs	r2, #64	@ 0x40
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a3a      	ldr	r2, [r7, #32]
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800177c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4a4d      	ldr	r2, [pc, #308]	@ (80018c0 <HAL_I2C_Mem_Write+0x1f0>)
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800178e:	88f8      	ldrh	r0, [r7, #6]
 8001790:	893a      	ldrh	r2, [r7, #8]
 8001792:	8979      	ldrh	r1, [r7, #10]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	4603      	mov	r3, r0
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fac2 	bl	8001d28 <I2C_RequestMemoryWrite>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d052      	beq.n	8001850 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e081      	b.n	80018b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 fd50 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00d      	beq.n	80017da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d107      	bne.n	80017d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e06b      	b.n	80018b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001800:	b29b      	uxth	r3, r3
 8001802:	3b01      	subs	r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b04      	cmp	r3, #4
 8001816:	d11b      	bne.n	8001850 <HAL_I2C_Mem_Write+0x180>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d017      	beq.n	8001850 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183a:	3b01      	subs	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1aa      	bne.n	80017ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 fd43 	bl	80022e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00d      	beq.n	8001884 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	2b04      	cmp	r3, #4
 800186e:	d107      	bne.n	8001880 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e016      	b.n	80018b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018b0:	2302      	movs	r3, #2
  }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	00100002 	.word	0x00100002
 80018c0:	ffff0000 	.word	0xffff0000

080018c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	@ 0x30
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	817b      	strh	r3, [r7, #10]
 80018d6:	460b      	mov	r3, r1
 80018d8:	813b      	strh	r3, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018de:	f7ff fab9 	bl	8000e54 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	f040 8214 	bne.w	8001d1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2319      	movs	r3, #25
 80018f8:	2201      	movs	r2, #1
 80018fa:	497b      	ldr	r1, [pc, #492]	@ (8001ae8 <HAL_I2C_Mem_Read+0x224>)
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fb91 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001908:	2302      	movs	r3, #2
 800190a:	e207      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_I2C_Mem_Read+0x56>
 8001916:	2302      	movs	r3, #2
 8001918:	e200      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d007      	beq.n	8001940 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800194e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2222      	movs	r2, #34	@ 0x22
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2240      	movs	r2, #64	@ 0x40
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a5b      	ldr	r2, [pc, #364]	@ (8001aec <HAL_I2C_Mem_Read+0x228>)
 8001980:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001982:	88f8      	ldrh	r0, [r7, #6]
 8001984:	893a      	ldrh	r2, [r7, #8]
 8001986:	8979      	ldrh	r1, [r7, #10]
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4603      	mov	r3, r0
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fa5e 	bl	8001e54 <I2C_RequestMemoryRead>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1bc      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d113      	bne.n	80019d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	623b      	str	r3, [r7, #32]
 80019be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e190      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d11b      	bne.n	8001a12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e170      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d11b      	bne.n	8001a52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	e150      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a68:	e144      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	f200 80f1 	bhi.w	8001c56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d123      	bne.n	8001ac4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fc79 	bl	8002378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e145      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ac2:	e117      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d14e      	bne.n	8001b6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4906      	ldr	r1, [pc, #24]	@ (8001af0 <HAL_I2C_Mem_Read+0x22c>)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 faa4 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e11a      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
 8001ae6:	bf00      	nop
 8001ae8:	00100002 	.word	0x00100002
 8001aec:	ffff0000 	.word	0xffff0000
 8001af0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b68:	e0c4      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b70:	2200      	movs	r2, #0
 8001b72:	496c      	ldr	r1, [pc, #432]	@ (8001d24 <HAL_I2C_Mem_Read+0x460>)
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fa55 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0cb      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4955      	ldr	r1, [pc, #340]	@ (8001d24 <HAL_I2C_Mem_Read+0x460>)
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 fa27 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e09d      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c54:	e04e      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fb8c 	bl	8002378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e058      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d124      	bne.n	8001cf4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f aeb6 	bne.w	8001a6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3728      	adds	r7, #40	@ 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	00010004 	.word	0x00010004

08001d28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	813b      	strh	r3, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f960 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00d      	beq.n	8001d86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d78:	d103      	bne.n	8001d82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e05f      	b.n	8001e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d86:	897b      	ldrh	r3, [r7, #10]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	492d      	ldr	r1, [pc, #180]	@ (8001e50 <I2C_RequestMemoryWrite+0x128>)
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f9bb 	bl	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e04c      	b.n	8001e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fa46 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d107      	bne.n	8001dea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e02b      	b.n	8001e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001df4:	893b      	ldrh	r3, [r7, #8]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	e021      	b.n	8001e44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e00:	893b      	ldrh	r3, [r7, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fa20 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00d      	beq.n	8001e3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d107      	bne.n	8001e36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e005      	b.n	8001e46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e3a:	893b      	ldrh	r3, [r7, #8]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	00010002 	.word	0x00010002

08001e54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	4611      	mov	r1, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	4603      	mov	r3, r0
 8001e64:	817b      	strh	r3, [r7, #10]
 8001e66:	460b      	mov	r3, r1
 8001e68:	813b      	strh	r3, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f8c2 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00d      	beq.n	8001ec2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eb4:	d103      	bne.n	8001ebe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0aa      	b.n	8002018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ec2:	897b      	ldrh	r3, [r7, #10]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ed0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	4952      	ldr	r1, [pc, #328]	@ (8002020 <I2C_RequestMemoryRead+0x1cc>)
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f91d 	bl	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e097      	b.n	8002018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f9a8 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d107      	bne.n	8001f26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e076      	b.n	8002018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f30:	893b      	ldrh	r3, [r7, #8]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	e021      	b.n	8001f80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f3c:	893b      	ldrh	r3, [r7, #8]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f982 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00d      	beq.n	8001f76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d107      	bne.n	8001f72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e050      	b.n	8002018 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f76:	893b      	ldrh	r3, [r7, #8]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f82:	6a39      	ldr	r1, [r7, #32]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f967 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d107      	bne.n	8001fa8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fa6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e035      	b.n	8002018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f82b 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fe2:	d103      	bne.n	8001fec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e013      	b.n	8002018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	6a3a      	ldr	r2, [r7, #32]
 8002004:	4906      	ldr	r1, [pc, #24]	@ (8002020 <I2C_RequestMemoryRead+0x1cc>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f886 	bl	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	00010002 	.word	0x00010002

08002024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002034:	e048      	b.n	80020c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d044      	beq.n	80020c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203e:	f7fe ff09 	bl	8000e54 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d302      	bcc.n	8002054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d139      	bne.n	80020c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10d      	bne.n	800207a <I2C_WaitOnFlagUntilTimeout+0x56>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	43da      	mvns	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	4013      	ands	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	e00c      	b.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x70>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	43da      	mvns	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4013      	ands	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	429a      	cmp	r2, r3
 8002098:	d116      	bne.n	80020c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e023      	b.n	8002110 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10d      	bne.n	80020ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	43da      	mvns	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4013      	ands	r3, r2
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	e00c      	b.n	8002108 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	429a      	cmp	r2, r3
 800210c:	d093      	beq.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002126:	e071      	b.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002136:	d123      	bne.n	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002146:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e067      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d041      	beq.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002188:	f7fe fe64 	bl	8000e54 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d302      	bcc.n	800219e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d136      	bne.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10c      	bne.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4013      	ands	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	e00b      	b.n	80021da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	43da      	mvns	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4013      	ands	r3, r2
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d016      	beq.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e021      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10c      	bne.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	43da      	mvns	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e00b      	b.n	8002248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	f47f af6d 	bne.w	8002128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002264:	e034      	b.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8e3 	bl	8002432 <I2C_IsAcknowledgeFailed>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e034      	b.n	80022e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d028      	beq.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7fe fde9 	bl	8000e54 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11d      	bne.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800229e:	2b80      	cmp	r3, #128	@ 0x80
 80022a0:	d016      	beq.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022da:	2b80      	cmp	r3, #128	@ 0x80
 80022dc:	d1c3      	bne.n	8002266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022f4:	e034      	b.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f89b 	bl	8002432 <I2C_IsAcknowledgeFailed>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e034      	b.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d028      	beq.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230e:	f7fe fda1 	bl	8000e54 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	d302      	bcc.n	8002324 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11d      	bne.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d016      	beq.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d1c3      	bne.n	80022f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002384:	e049      	b.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	d119      	bne.n	80023c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0210 	mvn.w	r2, #16
 800239c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e030      	b.n	800242a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c8:	f7fe fd44 	bl	8000e54 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d302      	bcc.n	80023de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11d      	bne.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	2b40      	cmp	r3, #64	@ 0x40
 80023ea:	d016      	beq.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e007      	b.n	800242a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002424:	2b40      	cmp	r3, #64	@ 0x40
 8002426:	d1ae      	bne.n	8002386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002448:	d11b      	bne.n	8002482 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002452:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f043 0204 	orr.w	r2, r3, #4
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
 8002496:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e101      	b.n	80026a6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f005 fc27 	bl	8007d10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024d0:	d102      	bne.n	80024d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 f80e 	bl	80044fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7c1a      	ldrb	r2, [r3, #16]
 80024ea:	f88d 2000 	strb.w	r2, [sp]
 80024ee:	3304      	adds	r3, #4
 80024f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f2:	f001 feec 	bl	80042ce <USB_CoreInit>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0ce      	b.n	80026a6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f002 f806 	bl	8004520 <USB_SetCurrentMode>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0bf      	b.n	80026a6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e04a      	b.n	80025c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	3315      	adds	r3, #21
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3314      	adds	r3, #20
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	b298      	uxth	r0, r3
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	332e      	adds	r3, #46	@ 0x2e
 8002568:	4602      	mov	r2, r0
 800256a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3318      	adds	r3, #24
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	331c      	adds	r3, #28
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3320      	adds	r3, #32
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3324      	adds	r3, #36	@ 0x24
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	3301      	adds	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	791b      	ldrb	r3, [r3, #4]
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d3af      	bcc.n	800252c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e044      	b.n	800265c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	3301      	adds	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	791b      	ldrb	r3, [r3, #4]
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	429a      	cmp	r2, r3
 8002664:	d3b5      	bcc.n	80025d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7c1a      	ldrb	r2, [r3, #16]
 800266e:	f88d 2000 	strb.w	r2, [sp]
 8002672:	3304      	adds	r3, #4
 8002674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002676:	f001 ff9f 	bl	80045b8 <USB_DevInit>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e00c      	b.n	80026a6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 ffe9 	bl	8005676 <USB_DevDisconnect>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_PCD_Start+0x1c>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e022      	b.n	8002710 <HAL_PCD_Start+0x62>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d105      	bne.n	80026f2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 fef0 	bl	80044dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f002 ff97 	bl	8005634 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b08d      	sub	sp, #52	@ 0x34
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 f855 	bl	80057de <USB_GetMode>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 848c 	bne.w	8003054 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f002 ffb9 	bl	80056b8 <USB_ReadInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8482 	beq.w	8003052 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f002 ffa6 	bl	80056b8 <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d107      	bne.n	8002786 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f002 0202 	and.w	r2, r2, #2
 8002784:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f002 ff94 	bl	80056b8 <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b10      	cmp	r3, #16
 8002798:	d161      	bne.n	800285e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0210 	bic.w	r2, r2, #16
 80027a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f003 020f 	and.w	r2, r3, #15
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	3304      	adds	r3, #4
 80027c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	0c5b      	lsrs	r3, r3, #17
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d124      	bne.n	8002820 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d035      	beq.n	800284e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	6a38      	ldr	r0, [r7, #32]
 80027f6:	f002 fdcb 	bl	8005390 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002806:	441a      	add	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002818:	441a      	add	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	615a      	str	r2, [r3, #20]
 800281e:	e016      	b.n	800284e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	0c5b      	lsrs	r3, r3, #17
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	2b06      	cmp	r3, #6
 800282a:	d110      	bne.n	800284e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002832:	2208      	movs	r2, #8
 8002834:	4619      	mov	r1, r3
 8002836:	6a38      	ldr	r0, [r7, #32]
 8002838:	f002 fdaa 	bl	8005390 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002848:	441a      	add	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0210 	orr.w	r2, r2, #16
 800285c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f002 ff28 	bl	80056b8 <USB_ReadInterrupts>
 8002868:	4603      	mov	r3, r0
 800286a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002872:	f040 80a7 	bne.w	80029c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f002 ff2d 	bl	80056de <USB_ReadDevAllOutEpInterrupt>
 8002884:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002886:	e099      	b.n	80029bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 808e 	beq.w	80029b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 ff51 	bl	8005746 <USB_ReadDevOutEPInterrupt>
 80028a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028bc:	461a      	mov	r2, r3
 80028be:	2301      	movs	r3, #1
 80028c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fea3 	bl	8003610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00c      	beq.n	80028ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e0:	461a      	mov	r2, r3
 80028e2:	2308      	movs	r3, #8
 80028e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 ff79 	bl	80037e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d030      	beq.n	8002976 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	2b80      	cmp	r3, #128	@ 0x80
 800291e:	d109      	bne.n	8002934 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800292e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002932:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	3304      	adds	r3, #4
 8002948:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	78db      	ldrb	r3, [r3, #3]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2200      	movs	r2, #0
 8002956:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f005 fad2 	bl	8007f08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	2302      	movs	r3, #2
 8002974:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	2320      	movs	r3, #32
 8002990:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a8:	461a      	mov	r2, r3
 80029aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	3301      	adds	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f47f af62 	bne.w	8002888 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f002 fe75 	bl	80056b8 <USB_ReadInterrupts>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029d8:	f040 80db 	bne.w	8002b92 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 fe96 	bl	8005712 <USB_ReadDevAllInEpInterrupt>
 80029e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029ec:	e0cd      	b.n	8002b8a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80c2 	beq.w	8002b7e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 febc 	bl	8005782 <USB_ReadDevInEPInterrupt>
 8002a0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d057      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69f9      	ldr	r1, [r7, #28]
 8002a32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a36:	4013      	ands	r3, r2
 8002a38:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a46:	461a      	mov	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	799b      	ldrb	r3, [r3, #6]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d132      	bne.n	8002aba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	3320      	adds	r3, #32
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4403      	add	r3, r0
 8002a74:	331c      	adds	r3, #28
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4419      	add	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4403      	add	r3, r0
 8002a88:	3320      	adds	r3, #32
 8002a8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d113      	bne.n	8002aba <HAL_PCD_IRQHandler+0x3a2>
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3324      	adds	r3, #36	@ 0x24
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d108      	bne.n	8002aba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	f002 fec3 	bl	8005840 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f005 f9a6 	bl	8007e12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002adc:	461a      	mov	r2, r3
 8002ade:	2308      	movs	r3, #8
 8002ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af8:	461a      	mov	r2, r3
 8002afa:	2310      	movs	r3, #16
 8002afc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b14:	461a      	mov	r2, r3
 8002b16:	2340      	movs	r3, #64	@ 0x40
 8002b18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d023      	beq.n	8002b6c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b26:	6a38      	ldr	r0, [r7, #32]
 8002b28:	f001 feaa 	bl	8004880 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3310      	adds	r3, #16
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	78db      	ldrb	r3, [r3, #3]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d108      	bne.n	8002b5a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f005 f9e9 	bl	8007f2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b66:	461a      	mov	r2, r3
 8002b68:	2302      	movs	r3, #2
 8002b6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fcbd 	bl	80034f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	3301      	adds	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f af2e 	bne.w	80029ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fd8e 	bl	80056b8 <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ba6:	d122      	bne.n	8002bee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bce:	2100      	movs	r1, #0
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fea3 	bl	800391c <HAL_PCDEx_LPM_Callback>
 8002bd6:	e002      	b.n	8002bde <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f005 f987 	bl	8007eec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fd60 	bl	80056b8 <USB_ReadInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c02:	d112      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d102      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f005 f943 	bl	8007ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c28:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 fd42 	bl	80056b8 <USB_ReadInterrupts>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3e:	f040 80b7 	bne.w	8002db0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2110      	movs	r1, #16
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fe0f 	bl	8004880 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c66:	e046      	b.n	8002cf6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c74:	461a      	mov	r2, r3
 8002c76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c7a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8c:	0151      	lsls	r1, r2, #5
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	440a      	add	r2, r1
 8002c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc0:	0151      	lsls	r1, r2, #5
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce0:	0151      	lsls	r1, r2, #5
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	440a      	add	r2, r1
 8002ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	791b      	ldrb	r3, [r3, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d3b2      	bcc.n	8002c68 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d10:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7bdb      	ldrb	r3, [r3, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d2e:	f043 030b 	orr.w	r3, r3, #11
 8002d32:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d44:	f043 030b 	orr.w	r3, r3, #11
 8002d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4a:	e015      	b.n	8002d78 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d5e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d72:	f043 030b 	orr.w	r3, r3, #11
 8002d76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f002 fd50 	bl	8005840 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 fc7f 	bl	80056b8 <USB_ReadInterrupts>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dc4:	d123      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 fd15 	bl	80057fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 fdcc 	bl	8004972 <USB_GetDevSpeed>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	f001 f9c9 	bl	800417c <HAL_RCC_GetHCLKFreq>
 8002dea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002df0:	461a      	mov	r2, r3
 8002df2:	4620      	mov	r0, r4
 8002df4:	f001 fad0 	bl	8004398 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f005 f832 	bl	8007e62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f002 fc50 	bl	80056b8 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d10a      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f005 f80f 	bl	8007e46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f002 0208 	and.w	r2, r2, #8
 8002e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 fc3b 	bl	80056b8 <USB_ReadInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e48:	2b80      	cmp	r3, #128	@ 0x80
 8002e4a:	d123      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e58:	2301      	movs	r3, #1
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5c:	e014      	b.n	8002e88 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fb0a 	bl	8003496 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	3301      	adds	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	791b      	ldrb	r3, [r3, #4]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d3e4      	bcc.n	8002e5e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f002 fc0d 	bl	80056b8 <USB_ReadInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ea8:	d13c      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eaa:	2301      	movs	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eae:	e02b      	b.n	8002f08 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3318      	adds	r3, #24
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d115      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ed6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da12      	bge.n	8002f02 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	3317      	adds	r3, #23
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 faca 	bl	8003496 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	791b      	ldrb	r3, [r3, #4]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d3cd      	bcc.n	8002eb0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fbc5 	bl	80056b8 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f38:	d156      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3e:	e045      	b.n	8002fcc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d12e      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da2b      	bge.n	8002fc6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d121      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc2:	6053      	str	r3, [r2, #4]
            break;
 8002fc4:	e008      	b.n	8002fd8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	3301      	adds	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	791b      	ldrb	r3, [r3, #4]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d3b3      	bcc.n	8002f40 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 fb63 	bl	80056b8 <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffc:	d10a      	bne.n	8003014 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f004 ffa6 	bl	8007f50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f002 fb4d 	bl	80056b8 <USB_ReadInterrupts>
 800301e:	4603      	mov	r3, r0
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d115      	bne.n	8003054 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f004 ff96 	bl	8007f6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	e000      	b.n	8003054 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003052:	bf00      	nop
    }
  }
}
 8003054:	3734      	adds	r7, #52	@ 0x34
 8003056:	46bd      	mov	sp, r7
 8003058:	bd90      	pop	{r4, r7, pc}

0800305a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_PCD_SetAddress+0x1a>
 8003070:	2302      	movs	r3, #2
 8003072:	e012      	b.n	800309a <HAL_PCD_SetAddress+0x40>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f002 faac 	bl	80055e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	4608      	mov	r0, r1
 80030ac:	4611      	mov	r1, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	4603      	mov	r3, r0
 80030b2:	70fb      	strb	r3, [r7, #3]
 80030b4:	460b      	mov	r3, r1
 80030b6:	803b      	strh	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da0f      	bge.n	80030e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 020f 	and.w	r2, r3, #15
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3310      	adds	r3, #16
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	705a      	strb	r2, [r3, #1]
 80030e6:	e00f      	b.n	8003108 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 020f 	and.w	r2, r3, #15
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	3304      	adds	r3, #4
 8003100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	b2da      	uxtb	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003114:	883b      	ldrh	r3, [r7, #0]
 8003116:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	78ba      	ldrb	r2, [r7, #2]
 8003122:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003136:	78bb      	ldrb	r3, [r7, #2]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d102      	bne.n	8003142 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_PCD_EP_Open+0xae>
 800314c:	2302      	movs	r3, #2
 800314e:	e00e      	b.n	800316e <HAL_PCD_EP_Open+0xcc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68f9      	ldr	r1, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	f001 fc2c 	bl	80049bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800316c:	7afb      	ldrb	r3, [r7, #11]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003186:	2b00      	cmp	r3, #0
 8003188:	da0f      	bge.n	80031aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 020f 	and.w	r2, r3, #15
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	3310      	adds	r3, #16
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	3304      	adds	r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	705a      	strb	r2, [r3, #1]
 80031a8:	e00f      	b.n	80031ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 020f 	and.w	r2, r3, #15
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	3304      	adds	r3, #4
 80031c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_PCD_EP_Close+0x6e>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e00e      	b.n	8003202 <HAL_PCD_EP_Close+0x8c>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68f9      	ldr	r1, [r7, #12]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 fc6a 	bl	8004acc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	460b      	mov	r3, r1
 8003218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	f003 020f 	and.w	r2, r3, #15
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	3304      	adds	r3, #4
 8003232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2200      	movs	r2, #0
 8003244:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324c:	7afb      	ldrb	r3, [r7, #11]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	b2da      	uxtb	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	799b      	ldrb	r3, [r3, #6]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	799b      	ldrb	r3, [r3, #6]
 800326e:	461a      	mov	r2, r3
 8003270:	6979      	ldr	r1, [r7, #20]
 8003272:	f001 fd07 	bl	8004c84 <USB_EPStartXfer>

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	7afb      	ldrb	r3, [r7, #11]
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3310      	adds	r3, #16
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	3304      	adds	r3, #4
 80032d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2200      	movs	r2, #0
 80032e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2201      	movs	r2, #1
 80032ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f0:	7afb      	ldrb	r3, [r7, #11]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	799b      	ldrb	r3, [r3, #6]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	799b      	ldrb	r3, [r3, #6]
 8003312:	461a      	mov	r2, r3
 8003314:	6979      	ldr	r1, [r7, #20]
 8003316:	f001 fcb5 	bl	8004c84 <USB_EPStartXfer>

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	7912      	ldrb	r2, [r2, #4]
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e04f      	b.n	80033e2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003346:	2b00      	cmp	r3, #0
 8003348:	da0f      	bge.n	800336a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	3310      	adds	r3, #16
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	705a      	strb	r2, [r3, #1]
 8003368:	e00d      	b.n	8003386 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_PCD_EP_SetStall+0x82>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e01d      	b.n	80033e2 <HAL_PCD_EP_SetStall+0xbe>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 f843 	bl	8005440 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	7999      	ldrb	r1, [r3, #6]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033d2:	461a      	mov	r2, r3
 80033d4:	f002 fa34 	bl	8005840 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	7912      	ldrb	r2, [r2, #4]
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e042      	b.n	800348e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340c:	2b00      	cmp	r3, #0
 800340e:	da0f      	bge.n	8003430 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 020f 	and.w	r2, r3, #15
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	3310      	adds	r3, #16
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	3304      	adds	r3, #4
 8003426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	705a      	strb	r2, [r3, #1]
 800342e:	e00f      	b.n	8003450 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_PCD_EP_ClrStall+0x86>
 800346c:	2302      	movs	r3, #2
 800346e:	e00e      	b.n	800348e <HAL_PCD_EP_ClrStall+0xa4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	4618      	mov	r0, r3
 8003480:	f002 f84c 	bl	800551c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da0c      	bge.n	80034c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	3310      	adds	r3, #16
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e00c      	b.n	80034de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fe6b 	bl	80051c0 <USB_EPStopXfer>
 80034ea:	4603      	mov	r3, r0
 80034ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034ee:	7afb      	ldrb	r3, [r7, #11]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	@ 0x28
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	3310      	adds	r3, #16
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	429a      	cmp	r2, r3
 800352a:	d901      	bls.n	8003530 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e06b      	b.n	8003608 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	429a      	cmp	r2, r3
 8003544:	d902      	bls.n	800354c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3303      	adds	r3, #3
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003554:	e02a      	b.n	80035ac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	429a      	cmp	r2, r3
 800356a:	d902      	bls.n	8003572 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3303      	adds	r3, #3
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	68d9      	ldr	r1, [r3, #12]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	4603      	mov	r3, r0
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f001 fec0 	bl	8005314 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	441a      	add	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	441a      	add	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d809      	bhi.n	80035d6 <PCD_WriteEmptyTxFifo+0xde>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d203      	bcs.n	80035d6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1bf      	bne.n	8003556 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d811      	bhi.n	8003606 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	2201      	movs	r2, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	6939      	ldr	r1, [r7, #16]
 80035fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003602:	4013      	ands	r3, r2
 8003604:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	333c      	adds	r3, #60	@ 0x3c
 8003628:	3304      	adds	r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	799b      	ldrb	r3, [r3, #6]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d17b      	bne.n	800373e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4a61      	ldr	r2, [pc, #388]	@ (80037d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	f240 80b9 	bls.w	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b3 	beq.w	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003672:	461a      	mov	r2, r3
 8003674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003678:	6093      	str	r3, [r2, #8]
 800367a:	e0a7      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003692:	461a      	mov	r2, r3
 8003694:	2320      	movs	r3, #32
 8003696:	6093      	str	r3, [r2, #8]
 8003698:	e098      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 8093 	bne.w	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	4a4b      	ldr	r2, [pc, #300]	@ (80037d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d90f      	bls.n	80036ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c4:	461a      	mov	r2, r3
 80036c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	e07e      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	4413      	add	r3, r2
 80036e0:	3304      	adds	r3, #4
 80036e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	0159      	lsls	r1, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	440b      	add	r3, r1
 80036f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	1ad2      	subs	r2, r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d114      	bne.n	8003730 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003718:	461a      	mov	r2, r3
 800371a:	2101      	movs	r1, #1
 800371c:	f002 f890 	bl	8005840 <USB_EP0_OutStart>
 8003720:	e006      	b.n	8003730 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f004 fb50 	bl	8007ddc <HAL_PCD_DataOutStageCallback>
 800373c:	e046      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a26      	ldr	r2, [pc, #152]	@ (80037dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d124      	bne.n	8003790 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375c:	461a      	mov	r2, r3
 800375e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003762:	6093      	str	r3, [r2, #8]
 8003764:	e032      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	2320      	movs	r3, #32
 8003780:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f004 fb27 	bl	8007ddc <HAL_PCD_DataOutStageCallback>
 800378e:	e01d      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d114      	bne.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037b8:	461a      	mov	r2, r3
 80037ba:	2100      	movs	r1, #0
 80037bc:	f002 f840 	bl	8005840 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f004 fb08 	bl	8007ddc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	4f54300a 	.word	0x4f54300a
 80037dc:	4f54310a 	.word	0x4f54310a

080037e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	333c      	adds	r3, #60	@ 0x3c
 80037f8:	3304      	adds	r3, #4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a15      	ldr	r2, [pc, #84]	@ (8003868 <PCD_EP_OutSetupPacket_int+0x88>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d90e      	bls.n	8003834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382c:	461a      	mov	r2, r3
 800382e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f004 fabf 	bl	8007db8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <PCD_EP_OutSetupPacket_int+0x88>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d90c      	bls.n	800385c <PCD_EP_OutSetupPacket_int+0x7c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	799b      	ldrb	r3, [r3, #6]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d108      	bne.n	800385c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003854:	461a      	mov	r2, r3
 8003856:	2101      	movs	r1, #1
 8003858:	f001 fff2 	bl	8005840 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	4f54300a 	.word	0x4f54300a

0800386c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	70fb      	strb	r3, [r7, #3]
 8003878:	4613      	mov	r3, r2
 800387a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800388a:	883b      	ldrh	r3, [r7, #0]
 800388c:	0419      	lsls	r1, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	430a      	orrs	r2, r1
 8003896:	629a      	str	r2, [r3, #40]	@ 0x28
 8003898:	e028      	b.n	80038ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4413      	add	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e00d      	b.n	80038ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	3340      	adds	r3, #64	@ 0x40
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3ec      	bcc.n	80038ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038d4:	883b      	ldrh	r3, [r7, #0]
 80038d6:	0418      	lsls	r0, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	3b01      	subs	r3, #1
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4302      	orrs	r2, r0
 80038e4:	3340      	adds	r3, #64	@ 0x40
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e267      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d075      	beq.n	8003a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003952:	4b88      	ldr	r3, [pc, #544]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b04      	cmp	r3, #4
 800395c:	d00c      	beq.n	8003978 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395e:	4b85      	ldr	r3, [pc, #532]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003966:	2b08      	cmp	r3, #8
 8003968:	d112      	bne.n	8003990 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396a:	4b82      	ldr	r3, [pc, #520]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003976:	d10b      	bne.n	8003990 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	4b7e      	ldr	r3, [pc, #504]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d05b      	beq.n	8003a3c <HAL_RCC_OscConfig+0x108>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d157      	bne.n	8003a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e242      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003998:	d106      	bne.n	80039a8 <HAL_RCC_OscConfig+0x74>
 800399a:	4b76      	ldr	r3, [pc, #472]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a75      	ldr	r2, [pc, #468]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e01d      	b.n	80039e4 <HAL_RCC_OscConfig+0xb0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b0:	d10c      	bne.n	80039cc <HAL_RCC_OscConfig+0x98>
 80039b2:	4b70      	ldr	r3, [pc, #448]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4b6d      	ldr	r3, [pc, #436]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e00b      	b.n	80039e4 <HAL_RCC_OscConfig+0xb0>
 80039cc:	4b69      	ldr	r3, [pc, #420]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a68      	ldr	r2, [pc, #416]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b66      	ldr	r3, [pc, #408]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a65      	ldr	r2, [pc, #404]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fd fa32 	bl	8000e54 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fd fa2e 	bl	8000e54 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e207      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	4b5b      	ldr	r3, [pc, #364]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0xc0>
 8003a12:	e014      	b.n	8003a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fa1e 	bl	8000e54 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fd fa1a 	bl	8000e54 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1f3      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	4b51      	ldr	r3, [pc, #324]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0xe8>
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d063      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a56:	4b47      	ldr	r3, [pc, #284]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d11c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a62:	4b44      	ldr	r3, [pc, #272]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d116      	bne.n	8003a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	4b41      	ldr	r3, [pc, #260]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_RCC_OscConfig+0x152>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d001      	beq.n	8003a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e1c7      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4937      	ldr	r1, [pc, #220]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	e03a      	b.n	8003b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa4:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <HAL_RCC_OscConfig+0x244>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd f9d3 	bl	8000e54 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fd f9cf 	bl	8000e54 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e1a8      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad0:	4b28      	ldr	r3, [pc, #160]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4925      	ldr	r1, [pc, #148]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	600b      	str	r3, [r1, #0]
 8003ae4:	e015      	b.n	8003b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <HAL_RCC_OscConfig+0x244>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd f9b2 	bl	8000e54 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7fd f9ae 	bl	8000e54 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e187      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	4b1b      	ldr	r3, [pc, #108]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d036      	beq.n	8003b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b26:	4b15      	ldr	r3, [pc, #84]	@ (8003b7c <HAL_RCC_OscConfig+0x248>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd f992 	bl	8000e54 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b34:	f7fd f98e 	bl	8000e54 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e167      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x200>
 8003b52:	e01b      	b.n	8003b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b54:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <HAL_RCC_OscConfig+0x248>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5a:	f7fd f97b 	bl	8000e54 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	e00e      	b.n	8003b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b62:	f7fd f977 	bl	8000e54 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d907      	bls.n	8003b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e150      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	42470000 	.word	0x42470000
 8003b7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	4b88      	ldr	r3, [pc, #544]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ea      	bne.n	8003b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8097 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9e:	4b81      	ldr	r3, [pc, #516]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	4b7d      	ldr	r3, [pc, #500]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	4a7c      	ldr	r2, [pc, #496]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bba:	4b7a      	ldr	r3, [pc, #488]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	4b77      	ldr	r3, [pc, #476]	@ (8003da8 <HAL_RCC_OscConfig+0x474>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d118      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd6:	4b74      	ldr	r3, [pc, #464]	@ (8003da8 <HAL_RCC_OscConfig+0x474>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a73      	ldr	r2, [pc, #460]	@ (8003da8 <HAL_RCC_OscConfig+0x474>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be2:	f7fd f937 	bl	8000e54 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fd f933 	bl	8000e54 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e10c      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003da8 <HAL_RCC_OscConfig+0x474>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d106      	bne.n	8003c1e <HAL_RCC_OscConfig+0x2ea>
 8003c10:	4b64      	ldr	r3, [pc, #400]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c14:	4a63      	ldr	r2, [pc, #396]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1c:	e01c      	b.n	8003c58 <HAL_RCC_OscConfig+0x324>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x30c>
 8003c26:	4b5f      	ldr	r3, [pc, #380]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c32:	4b5c      	ldr	r3, [pc, #368]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c36:	4a5b      	ldr	r2, [pc, #364]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0x324>
 8003c40:	4b58      	ldr	r3, [pc, #352]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	4a57      	ldr	r2, [pc, #348]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4c:	4b55      	ldr	r3, [pc, #340]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c50:	4a54      	ldr	r2, [pc, #336]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c52:	f023 0304 	bic.w	r3, r3, #4
 8003c56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d015      	beq.n	8003c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd f8f8 	bl	8000e54 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fd f8f4 	bl	8000e54 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0cb      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ee      	beq.n	8003c68 <HAL_RCC_OscConfig+0x334>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8c:	f7fd f8e2 	bl	8000e54 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd f8de 	bl	8000e54 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0b5      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003caa:	4b3e      	ldr	r3, [pc, #248]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ee      	bne.n	8003c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbc:	4b39      	ldr	r3, [pc, #228]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	4a38      	ldr	r2, [pc, #224]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a1 	beq.w	8003e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cd2:	4b34      	ldr	r3, [pc, #208]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d05c      	beq.n	8003d98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d141      	bne.n	8003d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce6:	4b31      	ldr	r3, [pc, #196]	@ (8003dac <HAL_RCC_OscConfig+0x478>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fd f8b2 	bl	8000e54 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fd f8ae 	bl	8000e54 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e087      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	4b27      	ldr	r3, [pc, #156]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	019b      	lsls	r3, r3, #6
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	491b      	ldr	r1, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x478>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fd f887 	bl	8000e54 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fd f883 	bl	8000e54 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e05c      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5c:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x416>
 8003d68:	e054      	b.n	8003e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <HAL_RCC_OscConfig+0x478>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd f870 	bl	8000e54 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd f86c 	bl	8000e54 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e045      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x444>
 8003d96:	e03d      	b.n	8003e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e038      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40007000 	.word	0x40007000
 8003dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e20 <HAL_RCC_OscConfig+0x4ec>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d121      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d11a      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003de0:	4013      	ands	r3, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d111      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800

08003e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0cc      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e38:	4b68      	ldr	r3, [pc, #416]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d90c      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b65      	ldr	r3, [pc, #404]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b63      	ldr	r3, [pc, #396]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0b8      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e78:	4b59      	ldr	r3, [pc, #356]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a58      	ldr	r2, [pc, #352]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e90:	4b53      	ldr	r3, [pc, #332]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4a52      	ldr	r2, [pc, #328]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9c:	4b50      	ldr	r3, [pc, #320]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	494d      	ldr	r1, [pc, #308]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d044      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	4b47      	ldr	r3, [pc, #284]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d119      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e07f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e067      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f02:	4b37      	ldr	r3, [pc, #220]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4934      	ldr	r1, [pc, #208]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f14:	f7fc ff9e 	bl	8000e54 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fc ff9a 	bl	8000e54 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e04f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 020c 	and.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1eb      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d20c      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b22      	ldr	r3, [pc, #136]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b20      	ldr	r3, [pc, #128]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e032      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4916      	ldr	r1, [pc, #88]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f96:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	490e      	ldr	r1, [pc, #56]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003faa:	f000 f821 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	490a      	ldr	r1, [pc, #40]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbc:	5ccb      	ldrb	r3, [r1, r3]
 8003fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc2:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fc6:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <HAL_RCC_ClockConfig+0x1c8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc fefe 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023c00 	.word	0x40023c00
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	08008524 	.word	0x08008524
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	20000004 	.word	0x20000004

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff4:	b090      	sub	sp, #64	@ 0x40
 8003ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004008:	4b59      	ldr	r3, [pc, #356]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x180>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d00d      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x40>
 8004014:	2b08      	cmp	r3, #8
 8004016:	f200 80a1 	bhi.w	800415c <HAL_RCC_GetSysClockFreq+0x16c>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x34>
 800401e:	2b04      	cmp	r3, #4
 8004020:	d003      	beq.n	800402a <HAL_RCC_GetSysClockFreq+0x3a>
 8004022:	e09b      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b53      	ldr	r3, [pc, #332]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x184>)
 8004026:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004028:	e09b      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800402a:	4b53      	ldr	r3, [pc, #332]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x188>)
 800402c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800402e:	e098      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004030:	4b4f      	ldr	r3, [pc, #316]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x180>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800403a:	4b4d      	ldr	r3, [pc, #308]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x180>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d028      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004046:	4b4a      	ldr	r3, [pc, #296]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x180>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	099b      	lsrs	r3, r3, #6
 800404c:	2200      	movs	r2, #0
 800404e:	623b      	str	r3, [r7, #32]
 8004050:	627a      	str	r2, [r7, #36]	@ 0x24
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004058:	2100      	movs	r1, #0
 800405a:	4b47      	ldr	r3, [pc, #284]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x188>)
 800405c:	fb03 f201 	mul.w	r2, r3, r1
 8004060:	2300      	movs	r3, #0
 8004062:	fb00 f303 	mul.w	r3, r0, r3
 8004066:	4413      	add	r3, r2
 8004068:	4a43      	ldr	r2, [pc, #268]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x188>)
 800406a:	fba0 1202 	umull	r1, r2, r0, r2
 800406e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004070:	460a      	mov	r2, r1
 8004072:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004076:	4413      	add	r3, r2
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800407a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407c:	2200      	movs	r2, #0
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	61fa      	str	r2, [r7, #28]
 8004082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004086:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800408a:	f7fc f8a3 	bl	80001d4 <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4613      	mov	r3, r2
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004096:	e053      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004098:	4b35      	ldr	r3, [pc, #212]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x180>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	2200      	movs	r2, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	617a      	str	r2, [r7, #20]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040aa:	f04f 0b00 	mov.w	fp, #0
 80040ae:	4652      	mov	r2, sl
 80040b0:	465b      	mov	r3, fp
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	0159      	lsls	r1, r3, #5
 80040bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c0:	0150      	lsls	r0, r2, #5
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	ebb2 080a 	subs.w	r8, r2, sl
 80040ca:	eb63 090b 	sbc.w	r9, r3, fp
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040e2:	ebb2 0408 	subs.w	r4, r2, r8
 80040e6:	eb63 0509 	sbc.w	r5, r3, r9
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	00eb      	lsls	r3, r5, #3
 80040f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f8:	00e2      	lsls	r2, r4, #3
 80040fa:	4614      	mov	r4, r2
 80040fc:	461d      	mov	r5, r3
 80040fe:	eb14 030a 	adds.w	r3, r4, sl
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	eb45 030b 	adc.w	r3, r5, fp
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004116:	4629      	mov	r1, r5
 8004118:	028b      	lsls	r3, r1, #10
 800411a:	4621      	mov	r1, r4
 800411c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004120:	4621      	mov	r1, r4
 8004122:	028a      	lsls	r2, r1, #10
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412a:	2200      	movs	r2, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	60fa      	str	r2, [r7, #12]
 8004130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004134:	f7fc f84e 	bl	80001d4 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4613      	mov	r3, r2
 800413e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x180>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	3301      	adds	r3, #1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004150:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800415a:	e002      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x184>)
 800415e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004164:	4618      	mov	r0, r3
 8004166:	3740      	adds	r7, #64	@ 0x40
 8004168:	46bd      	mov	sp, r7
 800416a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	00f42400 	.word	0x00f42400
 8004178:	017d7840 	.word	0x017d7840

0800417c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <HAL_RCC_GetHCLKFreq+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000000 	.word	0x20000000

08004194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004198:	f7ff fff0 	bl	800417c <HAL_RCC_GetHCLKFreq>
 800419c:	4602      	mov	r2, r0
 800419e:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	0a9b      	lsrs	r3, r3, #10
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	4903      	ldr	r1, [pc, #12]	@ (80041b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041aa:	5ccb      	ldrb	r3, [r1, r3]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40023800 	.word	0x40023800
 80041b8:	08008534 	.word	0x08008534

080041bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07b      	b.n	80042c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041de:	d009      	beq.n	80041f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	61da      	str	r2, [r3, #28]
 80041e6:	e005      	b.n	80041f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc fca0 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800422a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	ea42 0103 	orr.w	r1, r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0104 	and.w	r1, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	f003 0210 	and.w	r2, r3, #16
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ce:	b084      	sub	sp, #16
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	f107 001c 	add.w	r0, r7, #28
 80042dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042e0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d123      	bne.n	8004330 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80042fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004310:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004314:	2b01      	cmp	r3, #1
 8004316:	d105      	bne.n	8004324 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f001 fae9 	bl	80058fc <USB_CoreReset>
 800432a:	4603      	mov	r3, r0
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e01b      	b.n	8004368 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 fadd 	bl	80058fc <USB_CoreReset>
 8004342:	4603      	mov	r3, r0
 8004344:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004346:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004352:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	639a      	str	r2, [r3, #56]	@ 0x38
 800435a:	e005      	b.n	8004368 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004360:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004368:	7fbb      	ldrb	r3, [r7, #30]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d10b      	bne.n	8004386 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f043 0206 	orr.w	r2, r3, #6
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004392:	b004      	add	sp, #16
 8004394:	4770      	bx	lr
	...

08004398 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d165      	bne.n	8004478 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a41      	ldr	r2, [pc, #260]	@ (80044b4 <USB_SetTurnaroundTime+0x11c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d906      	bls.n	80043c2 <USB_SetTurnaroundTime+0x2a>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a40      	ldr	r2, [pc, #256]	@ (80044b8 <USB_SetTurnaroundTime+0x120>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d202      	bcs.n	80043c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043bc:	230f      	movs	r3, #15
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e062      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4a3c      	ldr	r2, [pc, #240]	@ (80044b8 <USB_SetTurnaroundTime+0x120>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d306      	bcc.n	80043d8 <USB_SetTurnaroundTime+0x40>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a3b      	ldr	r2, [pc, #236]	@ (80044bc <USB_SetTurnaroundTime+0x124>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d202      	bcs.n	80043d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043d2:	230e      	movs	r3, #14
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e057      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4a38      	ldr	r2, [pc, #224]	@ (80044bc <USB_SetTurnaroundTime+0x124>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d306      	bcc.n	80043ee <USB_SetTurnaroundTime+0x56>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a37      	ldr	r2, [pc, #220]	@ (80044c0 <USB_SetTurnaroundTime+0x128>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d202      	bcs.n	80043ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043e8:	230d      	movs	r3, #13
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e04c      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4a33      	ldr	r2, [pc, #204]	@ (80044c0 <USB_SetTurnaroundTime+0x128>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d306      	bcc.n	8004404 <USB_SetTurnaroundTime+0x6c>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4a32      	ldr	r2, [pc, #200]	@ (80044c4 <USB_SetTurnaroundTime+0x12c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d802      	bhi.n	8004404 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043fe:	230c      	movs	r3, #12
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e041      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4a2f      	ldr	r2, [pc, #188]	@ (80044c4 <USB_SetTurnaroundTime+0x12c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d906      	bls.n	800441a <USB_SetTurnaroundTime+0x82>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a2e      	ldr	r2, [pc, #184]	@ (80044c8 <USB_SetTurnaroundTime+0x130>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d802      	bhi.n	800441a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004414:	230b      	movs	r3, #11
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e036      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4a2a      	ldr	r2, [pc, #168]	@ (80044c8 <USB_SetTurnaroundTime+0x130>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d906      	bls.n	8004430 <USB_SetTurnaroundTime+0x98>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a29      	ldr	r2, [pc, #164]	@ (80044cc <USB_SetTurnaroundTime+0x134>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d802      	bhi.n	8004430 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800442a:	230a      	movs	r3, #10
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e02b      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <USB_SetTurnaroundTime+0x134>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d906      	bls.n	8004446 <USB_SetTurnaroundTime+0xae>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4a25      	ldr	r2, [pc, #148]	@ (80044d0 <USB_SetTurnaroundTime+0x138>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d202      	bcs.n	8004446 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004440:	2309      	movs	r3, #9
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e020      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4a21      	ldr	r2, [pc, #132]	@ (80044d0 <USB_SetTurnaroundTime+0x138>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d306      	bcc.n	800445c <USB_SetTurnaroundTime+0xc4>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4a20      	ldr	r2, [pc, #128]	@ (80044d4 <USB_SetTurnaroundTime+0x13c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d802      	bhi.n	800445c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004456:	2308      	movs	r3, #8
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e015      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a1d      	ldr	r2, [pc, #116]	@ (80044d4 <USB_SetTurnaroundTime+0x13c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d906      	bls.n	8004472 <USB_SetTurnaroundTime+0xda>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4a1c      	ldr	r2, [pc, #112]	@ (80044d8 <USB_SetTurnaroundTime+0x140>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d202      	bcs.n	8004472 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800446c:	2307      	movs	r3, #7
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e00a      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004472:	2306      	movs	r3, #6
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e007      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800447e:	2309      	movs	r3, #9
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e001      	b.n	8004488 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004484:	2309      	movs	r3, #9
 8004486:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	029b      	lsls	r3, r3, #10
 800449c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	00d8acbf 	.word	0x00d8acbf
 80044b8:	00e4e1c0 	.word	0x00e4e1c0
 80044bc:	00f42400 	.word	0x00f42400
 80044c0:	01067380 	.word	0x01067380
 80044c4:	011a499f 	.word	0x011a499f
 80044c8:	01312cff 	.word	0x01312cff
 80044cc:	014ca43f 	.word	0x014ca43f
 80044d0:	016e3600 	.word	0x016e3600
 80044d4:	01a6ab1f 	.word	0x01a6ab1f
 80044d8:	01e84800 	.word	0x01e84800

080044dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f043 0201 	orr.w	r2, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d115      	bne.n	800456e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800454e:	200a      	movs	r0, #10
 8004550:	f7fc fc8c 	bl	8000e6c <HAL_Delay>
      ms += 10U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	330a      	adds	r3, #10
 8004558:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f001 f93f 	bl	80057de <USB_GetMode>
 8004560:	4603      	mov	r3, r0
 8004562:	2b01      	cmp	r3, #1
 8004564:	d01e      	beq.n	80045a4 <USB_SetCurrentMode+0x84>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2bc7      	cmp	r3, #199	@ 0xc7
 800456a:	d9f0      	bls.n	800454e <USB_SetCurrentMode+0x2e>
 800456c:	e01a      	b.n	80045a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d115      	bne.n	80045a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004580:	200a      	movs	r0, #10
 8004582:	f7fc fc73 	bl	8000e6c <HAL_Delay>
      ms += 10U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	330a      	adds	r3, #10
 800458a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f001 f926 	bl	80057de <USB_GetMode>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <USB_SetCurrentMode+0x84>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2bc7      	cmp	r3, #199	@ 0xc7
 800459c:	d9f0      	bls.n	8004580 <USB_SetCurrentMode+0x60>
 800459e:	e001      	b.n	80045a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e005      	b.n	80045b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80045a8:	d101      	bne.n	80045ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b8:	b084      	sub	sp, #16
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b086      	sub	sp, #24
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80045c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	e009      	b.n	80045ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	3340      	adds	r3, #64	@ 0x40
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	2200      	movs	r2, #0
 80045e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	3301      	adds	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b0e      	cmp	r3, #14
 80045f0:	d9f2      	bls.n	80045d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11c      	bne.n	8004634 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004612:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	@ 0x38
 8004632:	e00b      	b.n	800464c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004638:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004658:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10d      	bne.n	800467c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004668:	2100      	movs	r1, #0
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f968 	bl	8004940 <USB_SetDevSpeed>
 8004670:	e008      	b.n	8004684 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004672:	2101      	movs	r1, #1
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f963 	bl	8004940 <USB_SetDevSpeed>
 800467a:	e003      	b.n	8004684 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800467c:	2103      	movs	r1, #3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f95e 	bl	8004940 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004684:	2110      	movs	r1, #16
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f8fa 	bl	8004880 <USB_FlushTxFifo>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f924 	bl	80048e4 <USB_FlushRxFifo>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ac:	461a      	mov	r2, r3
 80046ae:	2300      	movs	r3, #0
 80046b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b8:	461a      	mov	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c4:	461a      	mov	r2, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e043      	b.n	8004758 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046e6:	d118      	bne.n	800471a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fa:	461a      	mov	r2, r3
 80046fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e013      	b.n	800472c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004710:	461a      	mov	r2, r3
 8004712:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e008      	b.n	800472c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004726:	461a      	mov	r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004738:	461a      	mov	r2, r3
 800473a:	2300      	movs	r3, #0
 800473c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800474a:	461a      	mov	r2, r3
 800474c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3301      	adds	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800475c:	461a      	mov	r2, r3
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4293      	cmp	r3, r2
 8004762:	d3b5      	bcc.n	80046d0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	e043      	b.n	80047f2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800477c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004780:	d118      	bne.n	80047b4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004794:	461a      	mov	r2, r3
 8004796:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e013      	b.n	80047c6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047aa:	461a      	mov	r2, r3
 80047ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e008      	b.n	80047c6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c0:	461a      	mov	r2, r3
 80047c2:	2300      	movs	r3, #0
 80047c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d2:	461a      	mov	r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e4:	461a      	mov	r2, r3
 80047e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	3301      	adds	r3, #1
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047f6:	461a      	mov	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d3b5      	bcc.n	800476a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800480c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004810:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800481e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004820:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f043 0210 	orr.w	r2, r3, #16
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	4b10      	ldr	r3, [pc, #64]	@ (800487c <USB_DevInit+0x2c4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004840:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f043 0208 	orr.w	r2, r3, #8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004864:	f043 0304 	orr.w	r3, r3, #4
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800486c:	7dfb      	ldrb	r3, [r7, #23]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004878:	b004      	add	sp, #16
 800487a:	4770      	bx	lr
 800487c:	803c3800 	.word	0x803c3800

08004880 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3301      	adds	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800489a:	d901      	bls.n	80048a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e01b      	b.n	80048d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	daf2      	bge.n	800488e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	019b      	lsls	r3, r3, #6
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048c4:	d901      	bls.n	80048ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e006      	b.n	80048d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d0f0      	beq.n	80048b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048fc:	d901      	bls.n	8004902 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e018      	b.n	8004934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	daf2      	bge.n	80048f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2210      	movs	r2, #16
 8004912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3301      	adds	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004920:	d901      	bls.n	8004926 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e006      	b.n	8004934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b10      	cmp	r3, #16
 8004930:	d0f0      	beq.n	8004914 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004972:	b480      	push	{r7}
 8004974:	b087      	sub	sp, #28
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0306 	and.w	r3, r3, #6
 800498a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
 8004996:	e00a      	b.n	80049ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d002      	beq.n	80049a4 <USB_GetDevSpeed+0x32>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b06      	cmp	r3, #6
 80049a2:	d102      	bne.n	80049aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049a4:	2302      	movs	r3, #2
 80049a6:	75fb      	strb	r3, [r7, #23]
 80049a8:	e001      	b.n	80049ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049aa:	230f      	movs	r3, #15
 80049ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d13a      	bne.n	8004a4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	68f9      	ldr	r1, [r7, #12]
 80049f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d155      	bne.n	8004abc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	791b      	ldrb	r3, [r3, #4]
 8004a2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	059b      	lsls	r3, r3, #22
 8004a32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a34:	4313      	orrs	r3, r2
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e036      	b.n	8004abc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	2101      	movs	r1, #1
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11a      	bne.n	8004abc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	791b      	ldrb	r3, [r3, #4]
 8004aa0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d161      	bne.n	8004bac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004afa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004afe:	d11f      	bne.n	8004b40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	0151      	lsls	r1, r2, #5
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	440a      	add	r2, r1
 8004b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b60:	4013      	ands	r3, r2
 8004b62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	2101      	movs	r1, #1
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b84:	4013      	ands	r3, r2
 8004b86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	0159      	lsls	r1, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	440b      	add	r3, r1
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4b35      	ldr	r3, [pc, #212]	@ (8004c7c <USB_DeactivateEndpoint+0x1b0>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
 8004baa:	e060      	b.n	8004c6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc2:	d11f      	bne.n	8004c04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004be2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c24:	4013      	ands	r3, r2
 8004c26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	43db      	mvns	r3, r3
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	0159      	lsls	r1, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	440b      	add	r3, r1
 8004c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c66:	4619      	mov	r1, r3
 8004c68:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <USB_DeactivateEndpoint+0x1b4>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	ec337800 	.word	0xec337800
 8004c80:	eff37800 	.word	0xeff37800

08004c84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	@ 0x28
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f040 817f 	bne.w	8004fa4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d132      	bne.n	8004d14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ccc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d0c:	0cdb      	lsrs	r3, r3, #19
 8004d0e:	04db      	lsls	r3, r3, #19
 8004d10:	6113      	str	r3, [r2, #16]
 8004d12:	e097      	b.n	8004e44 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2e:	0cdb      	lsrs	r3, r3, #19
 8004d30:	04db      	lsls	r3, r3, #19
 8004d32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d56:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d11a      	bne.n	8004d94 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d903      	bls.n	8004d72 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d90:	6113      	str	r3, [r2, #16]
 8004d92:	e044      	b.n	8004e1e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	1e5a      	subs	r2, r3, #1
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	8afb      	ldrh	r3, [r7, #22]
 8004dba:	04d9      	lsls	r1, r3, #19
 8004dbc:	4ba4      	ldr	r3, [pc, #656]	@ (8005050 <USB_EPStartXfer+0x3cc>)
 8004dbe:	400b      	ands	r3, r1
 8004dc0:	69b9      	ldr	r1, [r7, #24]
 8004dc2:	0148      	lsls	r0, r1, #5
 8004dc4:	69f9      	ldr	r1, [r7, #28]
 8004dc6:	4401      	add	r1, r0
 8004dc8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	791b      	ldrb	r3, [r3, #4]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d122      	bne.n	8004e1e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004df2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004df6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	8afb      	ldrh	r3, [r7, #22]
 8004e08:	075b      	lsls	r3, r3, #29
 8004e0a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004e0e:	69b9      	ldr	r1, [r7, #24]
 8004e10:	0148      	lsls	r0, r1, #5
 8004e12:	69f9      	ldr	r1, [r7, #28]
 8004e14:	4401      	add	r1, r0
 8004e16:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	0148      	lsls	r0, r1, #5
 8004e38:	69f9      	ldr	r1, [r7, #28]
 8004e3a:	4401      	add	r1, r0
 8004e3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e40:	4313      	orrs	r3, r2
 8004e42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d14b      	bne.n	8004ee2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	791b      	ldrb	r3, [r3, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d128      	bne.n	8004ec0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d110      	bne.n	8004ea0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e00f      	b.n	8004ec0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eda:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	e166      	b.n	80051b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004efc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f00:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	791b      	ldrb	r3, [r3, #4]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d015      	beq.n	8004f36 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 814e 	beq.w	80051b0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	2101      	movs	r1, #1
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	69f9      	ldr	r1, [r7, #28]
 8004f2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f30:	4313      	orrs	r3, r2
 8004f32:	634b      	str	r3, [r1, #52]	@ 0x34
 8004f34:	e13c      	b.n	80051b0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d110      	bne.n	8004f68 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e00f      	b.n	8004f88 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	68d9      	ldr	r1, [r3, #12]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	b298      	uxth	r0, r3
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f9b9 	bl	8005314 <USB_WritePacket>
 8004fa2:	e105      	b.n	80051b0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fbe:	0cdb      	lsrs	r3, r3, #19
 8004fc0:	04db      	lsls	r3, r3, #19
 8004fc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fde:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fe2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fe6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d132      	bne.n	8005054 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501c:	69b9      	ldr	r1, [r7, #24]
 800501e:	0148      	lsls	r0, r1, #5
 8005020:	69f9      	ldr	r1, [r7, #28]
 8005022:	4401      	add	r1, r0
 8005024:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005028:	4313      	orrs	r3, r2
 800502a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005046:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800504a:	6113      	str	r3, [r2, #16]
 800504c:	e062      	b.n	8005114 <USB_EPStartXfer+0x490>
 800504e:	bf00      	nop
 8005050:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d123      	bne.n	80050a4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005072:	69b9      	ldr	r1, [r7, #24]
 8005074:	0148      	lsls	r0, r1, #5
 8005076:	69f9      	ldr	r1, [r7, #28]
 8005078:	4401      	add	r1, r0
 800507a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800507e:	4313      	orrs	r3, r2
 8005080:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800509c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050a0:	6113      	str	r3, [r2, #16]
 80050a2:	e037      	b.n	8005114 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4413      	add	r3, r2
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	8afa      	ldrh	r2, [r7, #22]
 80050c0:	fb03 f202 	mul.w	r2, r3, r2
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	8afb      	ldrh	r3, [r7, #22]
 80050d8:	04d9      	lsls	r1, r3, #19
 80050da:	4b38      	ldr	r3, [pc, #224]	@ (80051bc <USB_EPStartXfer+0x538>)
 80050dc:	400b      	ands	r3, r1
 80050de:	69b9      	ldr	r1, [r7, #24]
 80050e0:	0148      	lsls	r0, r1, #5
 80050e2:	69f9      	ldr	r1, [r7, #28]
 80050e4:	4401      	add	r1, r0
 80050e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050ea:	4313      	orrs	r3, r2
 80050ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005104:	69b9      	ldr	r1, [r7, #24]
 8005106:	0148      	lsls	r0, r1, #5
 8005108:	69f9      	ldr	r1, [r7, #28]
 800510a:	4401      	add	r1, r0
 800510c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005110:	4313      	orrs	r3, r2
 8005112:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d10d      	bne.n	8005136 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	68d9      	ldr	r1, [r3, #12]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005132:	460a      	mov	r2, r1
 8005134:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d128      	bne.n	8005190 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d110      	bne.n	8005170 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005168:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e00f      	b.n	8005190 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800518a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800518e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	0151      	lsls	r1, r2, #5
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	440a      	add	r2, r1
 80051a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	1ff80000 	.word	0x1ff80000

080051c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d14a      	bne.n	8005274 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f6:	f040 8086 	bne.w	8005306 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005218:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800521c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	7812      	ldrb	r2, [r2, #0]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	440a      	add	r2, r1
 8005238:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800523c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005240:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800524e:	4293      	cmp	r3, r2
 8005250:	d902      	bls.n	8005258 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
          break;
 8005256:	e056      	b.n	8005306 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800526c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005270:	d0e7      	beq.n	8005242 <USB_EPStopXfer+0x82>
 8005272:	e048      	b.n	8005306 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800528c:	d13b      	bne.n	8005306 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	7812      	ldrb	r2, [r2, #0]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d902      	bls.n	80052ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
          break;
 80052ea:	e00c      	b.n	8005306 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005304:	d0e7      	beq.n	80052d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005306:	7dfb      	ldrb	r3, [r7, #23]
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005314:	b480      	push	{r7}
 8005316:	b089      	sub	sp, #36	@ 0x24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4611      	mov	r1, r2
 8005320:	461a      	mov	r2, r3
 8005322:	460b      	mov	r3, r1
 8005324:	71fb      	strb	r3, [r7, #7]
 8005326:	4613      	mov	r3, r2
 8005328:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005332:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	d123      	bne.n	8005382 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800533a:	88bb      	ldrh	r3, [r7, #4]
 800533c:	3303      	adds	r3, #3
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005342:	2300      	movs	r3, #0
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	e018      	b.n	800537a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	031a      	lsls	r2, r3, #12
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4413      	add	r3, r2
 8005350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005354:	461a      	mov	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	3301      	adds	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3301      	adds	r3, #1
 8005366:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	3301      	adds	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3301      	adds	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	3301      	adds	r3, #1
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	429a      	cmp	r2, r3
 8005380:	d3e2      	bcc.n	8005348 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3724      	adds	r7, #36	@ 0x24
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005390:	b480      	push	{r7}
 8005392:	b08b      	sub	sp, #44	@ 0x2c
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	089b      	lsrs	r3, r3, #2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	623b      	str	r3, [r7, #32]
 80053ba:	e014      	b.n	80053e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	3301      	adds	r3, #1
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	3301      	adds	r3, #1
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	3301      	adds	r3, #1
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	3301      	adds	r3, #1
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	3301      	adds	r3, #1
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d3e6      	bcc.n	80053bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053ee:	8bfb      	ldrh	r3, [r7, #30]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01e      	beq.n	8005432 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053fe:	461a      	mov	r2, r3
 8005400:	f107 0310 	add.w	r3, r7, #16
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
 8005414:	b2da      	uxtb	r2, r3
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	701a      	strb	r2, [r3, #0]
      i++;
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	3301      	adds	r3, #1
 800541e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	3301      	adds	r3, #1
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005426:	8bfb      	ldrh	r3, [r7, #30]
 8005428:	3b01      	subs	r3, #1
 800542a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800542c:	8bfb      	ldrh	r3, [r7, #30]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1ea      	bne.n	8005408 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005434:	4618      	mov	r0, r3
 8005436:	372c      	adds	r7, #44	@ 0x2c
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d12c      	bne.n	80054b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	db12      	blt.n	8005494 <USB_EPSetStall+0x54>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800548e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005492:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	e02b      	b.n	800550e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	db12      	blt.n	80054ee <USB_EPSetStall+0xae>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00f      	beq.n	80054ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005508:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800550c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d128      	bne.n	800558a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005552:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005556:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	791b      	ldrb	r3, [r3, #4]
 800555c:	2b03      	cmp	r3, #3
 800555e:	d003      	beq.n	8005568 <USB_EPClearStall+0x4c>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	791b      	ldrb	r3, [r3, #4]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d138      	bne.n	80055da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e027      	b.n	80055da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	791b      	ldrb	r3, [r3, #4]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d003      	beq.n	80055ba <USB_EPClearStall+0x9e>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	791b      	ldrb	r3, [r3, #4]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d10f      	bne.n	80055da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005606:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800560a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800561c:	68f9      	ldr	r1, [r7, #12]
 800561e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005622:	4313      	orrs	r3, r2
 8005624:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005662:	f023 0302 	bic.w	r3, r3, #2
 8005666:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005690:	f023 0303 	bic.w	r3, r3, #3
 8005694:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4013      	ands	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056d0:	68fb      	ldr	r3, [r7, #12]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	0c1b      	lsrs	r3, r3, #16
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	b29b      	uxth	r3, r3
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005774:	68bb      	ldr	r3, [r7, #8]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	fa22 f303 	lsr.w	r3, r2, r3
 80057b2:	01db      	lsls	r3, r3, #7
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4013      	ands	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057d0:	68bb      	ldr	r3, [r7, #8]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f003 0301 	and.w	r3, r3, #1
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005814:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005818:	f023 0307 	bic.w	r3, r3, #7
 800581c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800582c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005830:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	460b      	mov	r3, r1
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	333c      	adds	r3, #60	@ 0x3c
 8005856:	3304      	adds	r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4a26      	ldr	r2, [pc, #152]	@ (80058f8 <USB_EP0_OutStart+0xb8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d90a      	bls.n	800587a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005874:	d101      	bne.n	800587a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e037      	b.n	80058ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005880:	461a      	mov	r2, r3
 8005882:	2300      	movs	r3, #0
 8005884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005894:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058a8:	f043 0318 	orr.w	r3, r3, #24
 80058ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80058c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d10f      	bne.n	80058e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ce:	461a      	mov	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80058e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	4f54300a 	.word	0x4f54300a

080058fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005914:	d901      	bls.n	800591a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e01b      	b.n	8005952 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	daf2      	bge.n	8005908 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f043 0201 	orr.w	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800593e:	d901      	bls.n	8005944 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e006      	b.n	8005952 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d0f0      	beq.n	8005932 <USB_CoreReset+0x36>

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800596c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005970:	f002 fc94 	bl	800829c <USBD_static_malloc>
 8005974:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	32b0      	adds	r2, #176	@ 0xb0
 8005986:	2100      	movs	r1, #0
 8005988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800598c:	2302      	movs	r3, #2
 800598e:	e0d4      	b.n	8005b3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005990:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005994:	2100      	movs	r1, #0
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f002 fd20 	bl	80083dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	32b0      	adds	r2, #176	@ 0xb0
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	32b0      	adds	r2, #176	@ 0xb0
 80059b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	7c1b      	ldrb	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d138      	bne.n	8005a3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059c8:	4b5e      	ldr	r3, [pc, #376]	@ (8005b44 <USBD_CDC_Init+0x1e4>)
 80059ca:	7819      	ldrb	r1, [r3, #0]
 80059cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059d0:	2202      	movs	r2, #2
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f002 fb3f 	bl	8008056 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005b44 <USBD_CDC_Init+0x1e4>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	3324      	adds	r3, #36	@ 0x24
 80059ee:	2201      	movs	r2, #1
 80059f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059f2:	4b55      	ldr	r3, [pc, #340]	@ (8005b48 <USBD_CDC_Init+0x1e8>)
 80059f4:	7819      	ldrb	r1, [r3, #0]
 80059f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059fa:	2202      	movs	r2, #2
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f002 fb2a 	bl	8008056 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a02:	4b51      	ldr	r3, [pc, #324]	@ (8005b48 <USBD_CDC_Init+0x1e8>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	f003 020f 	and.w	r2, r3, #15
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b4c <USBD_CDC_Init+0x1ec>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	3326      	adds	r3, #38	@ 0x26
 8005a34:	2210      	movs	r2, #16
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	e035      	b.n	8005aa6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a3a:	4b42      	ldr	r3, [pc, #264]	@ (8005b44 <USBD_CDC_Init+0x1e4>)
 8005a3c:	7819      	ldrb	r1, [r3, #0]
 8005a3e:	2340      	movs	r3, #64	@ 0x40
 8005a40:	2202      	movs	r2, #2
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f002 fb07 	bl	8008056 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a48:	4b3e      	ldr	r3, [pc, #248]	@ (8005b44 <USBD_CDC_Init+0x1e4>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 020f 	and.w	r2, r3, #15
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	3324      	adds	r3, #36	@ 0x24
 8005a5e:	2201      	movs	r2, #1
 8005a60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a62:	4b39      	ldr	r3, [pc, #228]	@ (8005b48 <USBD_CDC_Init+0x1e8>)
 8005a64:	7819      	ldrb	r1, [r3, #0]
 8005a66:	2340      	movs	r3, #64	@ 0x40
 8005a68:	2202      	movs	r2, #2
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f002 faf3 	bl	8008056 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a70:	4b35      	ldr	r3, [pc, #212]	@ (8005b48 <USBD_CDC_Init+0x1e8>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f003 020f 	and.w	r2, r3, #15
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a88:	2201      	movs	r2, #1
 8005a8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b4c <USBD_CDC_Init+0x1ec>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 020f 	and.w	r2, r3, #15
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3326      	adds	r3, #38	@ 0x26
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005aa6:	4b29      	ldr	r3, [pc, #164]	@ (8005b4c <USBD_CDC_Init+0x1ec>)
 8005aa8:	7819      	ldrb	r1, [r3, #0]
 8005aaa:	2308      	movs	r3, #8
 8005aac:	2203      	movs	r2, #3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f002 fad1 	bl	8008056 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ab4:	4b25      	ldr	r3, [pc, #148]	@ (8005b4c <USBD_CDC_Init+0x1ec>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	f003 020f 	and.w	r2, r3, #15
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3324      	adds	r3, #36	@ 0x24
 8005aca:	2201      	movs	r2, #1
 8005acc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	33b0      	adds	r3, #176	@ 0xb0
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005b04:	2302      	movs	r3, #2
 8005b06:	e018      	b.n	8005b3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7c1b      	ldrb	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b10:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <USBD_CDC_Init+0x1e8>)
 8005b12:	7819      	ldrb	r1, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f002 fb88 	bl	8008234 <USBD_LL_PrepareReceive>
 8005b24:	e008      	b.n	8005b38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b26:	4b08      	ldr	r3, [pc, #32]	@ (8005b48 <USBD_CDC_Init+0x1e8>)
 8005b28:	7819      	ldrb	r1, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b30:	2340      	movs	r3, #64	@ 0x40
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f002 fb7e 	bl	8008234 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000093 	.word	0x20000093
 8005b48:	20000094 	.word	0x20000094
 8005b4c:	20000095 	.word	0x20000095

08005b50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c48 <USBD_CDC_DeInit+0xf8>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f002 fa9d 	bl	80080a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b68:	4b37      	ldr	r3, [pc, #220]	@ (8005c48 <USBD_CDC_DeInit+0xf8>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 020f 	and.w	r2, r3, #15
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3324      	adds	r3, #36	@ 0x24
 8005b7e:	2200      	movs	r2, #0
 8005b80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b82:	4b32      	ldr	r3, [pc, #200]	@ (8005c4c <USBD_CDC_DeInit+0xfc>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f002 fa8a 	bl	80080a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c4c <USBD_CDC_DeInit+0xfc>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005baa:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <USBD_CDC_DeInit+0x100>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f002 fa76 	bl	80080a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005bb6:	4b26      	ldr	r3, [pc, #152]	@ (8005c50 <USBD_CDC_DeInit+0x100>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f003 020f 	and.w	r2, r3, #15
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	3324      	adds	r3, #36	@ 0x24
 8005bcc:	2200      	movs	r2, #0
 8005bce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c50 <USBD_CDC_DeInit+0x100>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f003 020f 	and.w	r2, r3, #15
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	3326      	adds	r3, #38	@ 0x26
 8005be6:	2200      	movs	r2, #0
 8005be8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	32b0      	adds	r2, #176	@ 0xb0
 8005bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01f      	beq.n	8005c3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	33b0      	adds	r3, #176	@ 0xb0
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	32b0      	adds	r2, #176	@ 0xb0
 8005c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f002 fb4a 	bl	80082b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	32b0      	adds	r2, #176	@ 0xb0
 8005c2e:	2100      	movs	r1, #0
 8005c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000093 	.word	0x20000093
 8005c4c:	20000094 	.word	0x20000094
 8005c50:	20000095 	.word	0x20000095

08005c54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	32b0      	adds	r2, #176	@ 0xb0
 8005c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e0bf      	b.n	8005e04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d050      	beq.n	8005d32 <USBD_CDC_Setup+0xde>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	f040 80af 	bne.w	8005df4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	88db      	ldrh	r3, [r3, #6]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d03a      	beq.n	8005d14 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	b25b      	sxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da1b      	bge.n	8005ce0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	33b0      	adds	r3, #176	@ 0xb0
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005cbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	88d2      	ldrh	r2, [r2, #6]
 8005cc4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	88db      	ldrh	r3, [r3, #6]
 8005cca:	2b07      	cmp	r3, #7
 8005ccc:	bf28      	it	cs
 8005cce:	2307      	movcs	r3, #7
 8005cd0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	89fa      	ldrh	r2, [r7, #14]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 fd93 	bl	8007804 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005cde:	e090      	b.n	8005e02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	785a      	ldrb	r2, [r3, #1]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	88db      	ldrh	r3, [r3, #6]
 8005cee:	2b3f      	cmp	r3, #63	@ 0x3f
 8005cf0:	d803      	bhi.n	8005cfa <USBD_CDC_Setup+0xa6>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	88db      	ldrh	r3, [r3, #6]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	e000      	b.n	8005cfc <USBD_CDC_Setup+0xa8>
 8005cfa:	2240      	movs	r2, #64	@ 0x40
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005d02:	6939      	ldr	r1, [r7, #16]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fda5 	bl	800785c <USBD_CtlPrepareRx>
      break;
 8005d12:	e076      	b.n	8005e02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	33b0      	adds	r3, #176	@ 0xb0
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	7850      	ldrb	r0, [r2, #1]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	4798      	blx	r3
      break;
 8005d30:	e067      	b.n	8005e02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b0b      	cmp	r3, #11
 8005d38:	d851      	bhi.n	8005dde <USBD_CDC_Setup+0x18a>
 8005d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <USBD_CDC_Setup+0xec>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d71 	.word	0x08005d71
 8005d44:	08005ded 	.word	0x08005ded
 8005d48:	08005ddf 	.word	0x08005ddf
 8005d4c:	08005ddf 	.word	0x08005ddf
 8005d50:	08005ddf 	.word	0x08005ddf
 8005d54:	08005ddf 	.word	0x08005ddf
 8005d58:	08005ddf 	.word	0x08005ddf
 8005d5c:	08005ddf 	.word	0x08005ddf
 8005d60:	08005ddf 	.word	0x08005ddf
 8005d64:	08005ddf 	.word	0x08005ddf
 8005d68:	08005d9b 	.word	0x08005d9b
 8005d6c:	08005dc5 	.word	0x08005dc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d107      	bne.n	8005d8c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d7c:	f107 030a 	add.w	r3, r7, #10
 8005d80:	2202      	movs	r2, #2
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fd3d 	bl	8007804 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d8a:	e032      	b.n	8005df2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 fcbb 	bl	800770a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d94:	2303      	movs	r3, #3
 8005d96:	75fb      	strb	r3, [r7, #23]
          break;
 8005d98:	e02b      	b.n	8005df2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d107      	bne.n	8005db6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005da6:	f107 030d 	add.w	r3, r7, #13
 8005daa:	2201      	movs	r2, #1
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fd28 	bl	8007804 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005db4:	e01d      	b.n	8005df2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fca6 	bl	800770a <USBD_CtlError>
            ret = USBD_FAIL;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8005dc2:	e016      	b.n	8005df2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d00f      	beq.n	8005df0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 fc99 	bl	800770a <USBD_CtlError>
            ret = USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ddc:	e008      	b.n	8005df0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 fc92 	bl	800770a <USBD_CtlError>
          ret = USBD_FAIL;
 8005de6:	2303      	movs	r3, #3
 8005de8:	75fb      	strb	r3, [r7, #23]
          break;
 8005dea:	e002      	b.n	8005df2 <USBD_CDC_Setup+0x19e>
          break;
 8005dec:	bf00      	nop
 8005dee:	e008      	b.n	8005e02 <USBD_CDC_Setup+0x1ae>
          break;
 8005df0:	bf00      	nop
      }
      break;
 8005df2:	e006      	b.n	8005e02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f001 fc87 	bl	800770a <USBD_CtlError>
      ret = USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005e00:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005e1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	32b0      	adds	r2, #176	@ 0xb0
 8005e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e065      	b.n	8005f02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	32b0      	adds	r2, #176	@ 0xb0
 8005e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	3318      	adds	r3, #24
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02f      	beq.n	8005ec0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	f003 020f 	and.w	r2, r3, #15
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	3318      	adds	r3, #24
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	f003 010f 	and.w	r1, r3, #15
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4403      	add	r3, r0
 8005e88:	331c      	adds	r3, #28
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d112      	bne.n	8005ec0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	f003 020f 	and.w	r2, r3, #15
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	3318      	adds	r3, #24
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005eb2:	78f9      	ldrb	r1, [r7, #3]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f002 f99a 	bl	80081f2 <USBD_LL_Transmit>
 8005ebe:	e01f      	b.n	8005f00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	33b0      	adds	r3, #176	@ 0xb0
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d010      	beq.n	8005f00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	33b0      	adds	r3, #176	@ 0xb0
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	32b0      	adds	r2, #176	@ 0xb0
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	32b0      	adds	r2, #176	@ 0xb0
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e01a      	b.n	8005f72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f002 f998 	bl	8008276 <USBD_LL_GetRxDataSize>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	33b0      	adds	r3, #176	@ 0xb0
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	32b0      	adds	r2, #176	@ 0xb0
 8005f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e024      	b.n	8005fe6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	33b0      	adds	r3, #176	@ 0xb0
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d019      	beq.n	8005fe4 <USBD_CDC_EP0_RxReady+0x6a>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005fb6:	2bff      	cmp	r3, #255	@ 0xff
 8005fb8:	d014      	beq.n	8005fe4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	33b0      	adds	r3, #176	@ 0xb0
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005fd2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005fda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	22ff      	movs	r2, #255	@ 0xff
 8005fe0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ff8:	2182      	movs	r1, #130	@ 0x82
 8005ffa:	4818      	ldr	r0, [pc, #96]	@ (800605c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ffc:	f000 fd4f 	bl	8006a9e <USBD_GetEpDesc>
 8006000:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006002:	2101      	movs	r1, #1
 8006004:	4815      	ldr	r0, [pc, #84]	@ (800605c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006006:	f000 fd4a 	bl	8006a9e <USBD_GetEpDesc>
 800600a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800600c:	2181      	movs	r1, #129	@ 0x81
 800600e:	4813      	ldr	r0, [pc, #76]	@ (800605c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006010:	f000 fd45 	bl	8006a9e <USBD_GetEpDesc>
 8006014:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2210      	movs	r2, #16
 8006020:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d006      	beq.n	8006036 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2200      	movs	r2, #0
 800602c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006030:	711a      	strb	r2, [r3, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006044:	711a      	strb	r2, [r3, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2243      	movs	r2, #67	@ 0x43
 800604e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006050:	4b02      	ldr	r3, [pc, #8]	@ (800605c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000050 	.word	0x20000050

08006060 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006068:	2182      	movs	r1, #130	@ 0x82
 800606a:	4818      	ldr	r0, [pc, #96]	@ (80060cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800606c:	f000 fd17 	bl	8006a9e <USBD_GetEpDesc>
 8006070:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006072:	2101      	movs	r1, #1
 8006074:	4815      	ldr	r0, [pc, #84]	@ (80060cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006076:	f000 fd12 	bl	8006a9e <USBD_GetEpDesc>
 800607a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800607c:	2181      	movs	r1, #129	@ 0x81
 800607e:	4813      	ldr	r0, [pc, #76]	@ (80060cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006080:	f000 fd0d 	bl	8006a9e <USBD_GetEpDesc>
 8006084:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2210      	movs	r2, #16
 8006090:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d006      	beq.n	80060a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2200      	movs	r2, #0
 800609c:	711a      	strb	r2, [r3, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f042 0202 	orr.w	r2, r2, #2
 80060a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d006      	beq.n	80060ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	711a      	strb	r2, [r3, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f042 0202 	orr.w	r2, r2, #2
 80060b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2243      	movs	r2, #67	@ 0x43
 80060be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060c0:	4b02      	ldr	r3, [pc, #8]	@ (80060cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000050 	.word	0x20000050

080060d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060d8:	2182      	movs	r1, #130	@ 0x82
 80060da:	4818      	ldr	r0, [pc, #96]	@ (800613c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060dc:	f000 fcdf 	bl	8006a9e <USBD_GetEpDesc>
 80060e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060e2:	2101      	movs	r1, #1
 80060e4:	4815      	ldr	r0, [pc, #84]	@ (800613c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060e6:	f000 fcda 	bl	8006a9e <USBD_GetEpDesc>
 80060ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060ec:	2181      	movs	r1, #129	@ 0x81
 80060ee:	4813      	ldr	r0, [pc, #76]	@ (800613c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060f0:	f000 fcd5 	bl	8006a9e <USBD_GetEpDesc>
 80060f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2210      	movs	r2, #16
 8006100:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2200      	movs	r2, #0
 800610c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006110:	711a      	strb	r2, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d006      	beq.n	800612a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006124:	711a      	strb	r2, [r3, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2243      	movs	r2, #67	@ 0x43
 800612e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006130:	4b02      	ldr	r3, [pc, #8]	@ (800613c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000050 	.word	0x20000050

08006140 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	220a      	movs	r2, #10
 800614c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800614e:	4b03      	ldr	r3, [pc, #12]	@ (800615c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	2000000c 	.word	0x2000000c

08006160 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006170:	2303      	movs	r3, #3
 8006172:	e009      	b.n	8006188 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	33b0      	adds	r3, #176	@ 0xb0
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	32b0      	adds	r2, #176	@ 0xb0
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e008      	b.n	80061cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	32b0      	adds	r2, #176	@ 0xb0
 80061ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e004      	b.n	8006206 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	32b0      	adds	r2, #176	@ 0xb0
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006236:	2303      	movs	r3, #3
 8006238:	e025      	b.n	8006286 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11f      	bne.n	8006284 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2201      	movs	r2, #1
 8006248:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800624c:	4b10      	ldr	r3, [pc, #64]	@ (8006290 <USBD_CDC_TransmitPacket+0x7c>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	f003 020f 	and.w	r2, r3, #15
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4403      	add	r3, r0
 8006266:	3318      	adds	r3, #24
 8006268:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800626a:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <USBD_CDC_TransmitPacket+0x7c>)
 800626c:	7819      	ldrb	r1, [r3, #0]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f001 ffb9 	bl	80081f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000093 	.word	0x20000093

08006294 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	32b0      	adds	r2, #176	@ 0xb0
 80062a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	32b0      	adds	r2, #176	@ 0xb0
 80062b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80062be:	2303      	movs	r3, #3
 80062c0:	e018      	b.n	80062f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	7c1b      	ldrb	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062ca:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <USBD_CDC_ReceivePacket+0x68>)
 80062cc:	7819      	ldrb	r1, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 ffab 	bl	8008234 <USBD_LL_PrepareReceive>
 80062de:	e008      	b.n	80062f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062e0:	4b06      	ldr	r3, [pc, #24]	@ (80062fc <USBD_CDC_ReceivePacket+0x68>)
 80062e2:	7819      	ldrb	r1, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062ea:	2340      	movs	r3, #64	@ 0x40
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 ffa1 	bl	8008234 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000094 	.word	0x20000094

08006300 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006314:	2303      	movs	r3, #3
 8006316:	e01f      	b.n	8006358 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	79fa      	ldrb	r2, [r7, #7]
 800634a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f001 fe1b 	bl	8007f88 <USBD_LL_Init>
 8006352:	4603      	mov	r3, r0
 8006354:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006374:	2303      	movs	r3, #3
 8006376:	e025      	b.n	80063c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	32ae      	adds	r2, #174	@ 0xae
 800638a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00f      	beq.n	80063b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	32ae      	adds	r2, #174	@ 0xae
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	f107 020e 	add.w	r2, r7, #14
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
 80063ac:	4602      	mov	r2, r0
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fe23 	bl	8008020 <USBD_LL_Start>
 80063da:	4603      	mov	r3, r0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	78fa      	ldrb	r2, [r7, #3]
 800641e:	4611      	mov	r1, r2
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	460b      	mov	r3, r1
 800643c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	4611      	mov	r1, r2
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f001 f90c 	bl	8007696 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800648c:	461a      	mov	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d01a      	beq.n	80064d8 <USBD_LL_SetupStage+0x72>
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d822      	bhi.n	80064ec <USBD_LL_SetupStage+0x86>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <USBD_LL_SetupStage+0x4a>
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d00a      	beq.n	80064c4 <USBD_LL_SetupStage+0x5e>
 80064ae:	e01d      	b.n	80064ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fb63 	bl	8006b84 <USBD_StdDevReq>
 80064be:	4603      	mov	r3, r0
 80064c0:	73fb      	strb	r3, [r7, #15]
      break;
 80064c2:	e020      	b.n	8006506 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fbcb 	bl	8006c68 <USBD_StdItfReq>
 80064d2:	4603      	mov	r3, r0
 80064d4:	73fb      	strb	r3, [r7, #15]
      break;
 80064d6:	e016      	b.n	8006506 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fc2d 	bl	8006d40 <USBD_StdEPReq>
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ea:	e00c      	b.n	8006506 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fdf0 	bl	80080e0 <USBD_LL_StallEP>
 8006500:	4603      	mov	r3, r0
 8006502:	73fb      	strb	r3, [r7, #15]
      break;
 8006504:	bf00      	nop
  }

  return ret;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	460b      	mov	r3, r1
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d16e      	bne.n	8006606 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800652e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006536:	2b03      	cmp	r3, #3
 8006538:	f040 8098 	bne.w	800666c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	429a      	cmp	r2, r3
 8006546:	d913      	bls.n	8006570 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	1ad2      	subs	r2, r2, r3
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	4293      	cmp	r3, r2
 8006560:	bf28      	it	cs
 8006562:	4613      	movcs	r3, r2
 8006564:	461a      	mov	r2, r3
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f001 f994 	bl	8007896 <USBD_CtlContinueRx>
 800656e:	e07d      	b.n	800666c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2b02      	cmp	r3, #2
 800657c:	d014      	beq.n	80065a8 <USBD_LL_DataOutStage+0x98>
 800657e:	2b02      	cmp	r3, #2
 8006580:	d81d      	bhi.n	80065be <USBD_LL_DataOutStage+0xae>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <USBD_LL_DataOutStage+0x7c>
 8006586:	2b01      	cmp	r3, #1
 8006588:	d003      	beq.n	8006592 <USBD_LL_DataOutStage+0x82>
 800658a:	e018      	b.n	80065be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	75bb      	strb	r3, [r7, #22]
            break;
 8006590:	e018      	b.n	80065c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fa64 	bl	8006a6a <USBD_CoreFindIF>
 80065a2:	4603      	mov	r3, r0
 80065a4:	75bb      	strb	r3, [r7, #22]
            break;
 80065a6:	e00d      	b.n	80065c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	4619      	mov	r1, r3
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fa66 	bl	8006a84 <USBD_CoreFindEP>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75bb      	strb	r3, [r7, #22]
            break;
 80065bc:	e002      	b.n	80065c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	75bb      	strb	r3, [r7, #22]
            break;
 80065c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80065c4:	7dbb      	ldrb	r3, [r7, #22]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d119      	bne.n	80065fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d113      	bne.n	80065fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80065d6:	7dba      	ldrb	r2, [r7, #22]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	32ae      	adds	r2, #174	@ 0xae
 80065dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80065e6:	7dba      	ldrb	r2, [r7, #22]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80065ee:	7dba      	ldrb	r2, [r7, #22]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	32ae      	adds	r2, #174	@ 0xae
 80065f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f001 f95a 	bl	80078b8 <USBD_CtlSendStatus>
 8006604:	e032      	b.n	800666c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800660c:	b2db      	uxtb	r3, r3
 800660e:	4619      	mov	r1, r3
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fa37 	bl	8006a84 <USBD_CoreFindEP>
 8006616:	4603      	mov	r3, r0
 8006618:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800661a:	7dbb      	ldrb	r3, [r7, #22]
 800661c:	2bff      	cmp	r3, #255	@ 0xff
 800661e:	d025      	beq.n	800666c <USBD_LL_DataOutStage+0x15c>
 8006620:	7dbb      	ldrb	r3, [r7, #22]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d122      	bne.n	800666c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d117      	bne.n	8006662 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006632:	7dba      	ldrb	r2, [r7, #22]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	32ae      	adds	r2, #174	@ 0xae
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00f      	beq.n	8006662 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006642:	7dba      	ldrb	r2, [r7, #22]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800664a:	7dba      	ldrb	r2, [r7, #22]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	32ae      	adds	r2, #174	@ 0xae
 8006650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	7afa      	ldrb	r2, [r7, #11]
 8006658:	4611      	mov	r1, r2
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	4798      	blx	r3
 800665e:	4603      	mov	r3, r0
 8006660:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006662:	7dfb      	ldrb	r3, [r7, #23]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	e000      	b.n	800666e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	460b      	mov	r3, r1
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d16f      	bne.n	800676a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3314      	adds	r3, #20
 800668e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006696:	2b02      	cmp	r3, #2
 8006698:	d15a      	bne.n	8006750 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d914      	bls.n	80066d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f001 f8bc 	bl	800783a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066c2:	2300      	movs	r3, #0
 80066c4:	2200      	movs	r2, #0
 80066c6:	2100      	movs	r1, #0
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f001 fdb3 	bl	8008234 <USBD_LL_PrepareReceive>
 80066ce:	e03f      	b.n	8006750 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d11c      	bne.n	8006716 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d316      	bcc.n	8006716 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d20f      	bcs.n	8006716 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066f6:	2200      	movs	r2, #0
 80066f8:	2100      	movs	r1, #0
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f001 f89d 	bl	800783a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006708:	2300      	movs	r3, #0
 800670a:	2200      	movs	r2, #0
 800670c:	2100      	movs	r1, #0
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f001 fd90 	bl	8008234 <USBD_LL_PrepareReceive>
 8006714:	e01c      	b.n	8006750 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b03      	cmp	r3, #3
 8006720:	d10f      	bne.n	8006742 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006742:	2180      	movs	r1, #128	@ 0x80
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f001 fccb 	bl	80080e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f001 f8c7 	bl	80078de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d03a      	beq.n	80067d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff fe42 	bl	80063e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006768:	e032      	b.n	80067d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006770:	b2db      	uxtb	r3, r3
 8006772:	4619      	mov	r1, r3
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f985 	bl	8006a84 <USBD_CoreFindEP>
 800677a:	4603      	mov	r3, r0
 800677c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	2bff      	cmp	r3, #255	@ 0xff
 8006782:	d025      	beq.n	80067d0 <USBD_LL_DataInStage+0x15a>
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d122      	bne.n	80067d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b03      	cmp	r3, #3
 8006794:	d11c      	bne.n	80067d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006796:	7dfa      	ldrb	r2, [r7, #23]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	32ae      	adds	r2, #174	@ 0xae
 800679c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d014      	beq.n	80067d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80067a6:	7dfa      	ldrb	r2, [r7, #23]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80067ae:	7dfa      	ldrb	r2, [r7, #23]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	32ae      	adds	r2, #174	@ 0xae
 80067b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	7afa      	ldrb	r2, [r7, #11]
 80067bc:	4611      	mov	r1, r2
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	4798      	blx	r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80067c6:	7dbb      	ldrb	r3, [r7, #22]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80067cc:	7dbb      	ldrb	r3, [r7, #22]
 80067ce:	e000      	b.n	80067d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d014      	beq.n	8006840 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00e      	beq.n	8006840 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6852      	ldr	r2, [r2, #4]
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	4611      	mov	r1, r2
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800683c:	2303      	movs	r3, #3
 800683e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006840:	2340      	movs	r3, #64	@ 0x40
 8006842:	2200      	movs	r2, #0
 8006844:	2100      	movs	r1, #0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 fc05 	bl	8008056 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2240      	movs	r2, #64	@ 0x40
 8006858:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800685c:	2340      	movs	r3, #64	@ 0x40
 800685e:	2200      	movs	r2, #0
 8006860:	2180      	movs	r1, #128	@ 0x80
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fbf7 	bl	8008056 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2240      	movs	r2, #64	@ 0x40
 8006872:	621a      	str	r2, [r3, #32]

  return ret;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d006      	beq.n	80068c0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2204      	movs	r2, #4
 80068c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d106      	bne.n	80068f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b03      	cmp	r3, #3
 8006918:	d110      	bne.n	800693c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	32ae      	adds	r2, #174	@ 0xae
 800695c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006964:	2303      	movs	r3, #3
 8006966:	e01c      	b.n	80069a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b03      	cmp	r3, #3
 8006972:	d115      	bne.n	80069a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	32ae      	adds	r2, #174	@ 0xae
 800697e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	32ae      	adds	r2, #174	@ 0xae
 8006992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	78fa      	ldrb	r2, [r7, #3]
 800699a:	4611      	mov	r1, r2
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	32ae      	adds	r2, #174	@ 0xae
 80069c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e01c      	b.n	8006a06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d115      	bne.n	8006a04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	32ae      	adds	r2, #174	@ 0xae
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	32ae      	adds	r2, #174	@ 0xae
 80069f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	4611      	mov	r1, r2
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00e      	beq.n	8006a60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6852      	ldr	r2, [r2, #4]
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	4611      	mov	r1, r2
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	885b      	ldrh	r3, [r3, #2]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	7812      	ldrb	r2, [r2, #0]
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d91f      	bls.n	8006b04 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006aca:	e013      	b.n	8006af4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006acc:	f107 030a 	add.w	r3, r7, #10
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6978      	ldr	r0, [r7, #20]
 8006ad4:	f000 f81b 	bl	8006b0e <USBD_GetNextDesc>
 8006ad8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b05      	cmp	r3, #5
 8006ae0:	d108      	bne.n	8006af4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	789b      	ldrb	r3, [r3, #2]
 8006aea:	78fa      	ldrb	r2, [r7, #3]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d008      	beq.n	8006b02 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	885b      	ldrh	r3, [r3, #2]
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	897b      	ldrh	r3, [r7, #10]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d8e5      	bhi.n	8006acc <USBD_GetEpDesc+0x2e>
 8006b00:	e000      	b.n	8006b04 <USBD_GetEpDesc+0x66>
          break;
 8006b02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b04:	693b      	ldr	r3, [r7, #16]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b085      	sub	sp, #20
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	7812      	ldrb	r2, [r2, #0]
 8006b24:	4413      	add	r3, r2
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b38:	68fb      	ldr	r3, [r7, #12]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b64:	8a3b      	ldrh	r3, [r7, #16]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	b21a      	sxth	r2, r3
 8006b6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b74:	89fb      	ldrh	r3, [r7, #14]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b9a:	2b40      	cmp	r3, #64	@ 0x40
 8006b9c:	d005      	beq.n	8006baa <USBD_StdDevReq+0x26>
 8006b9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ba0:	d857      	bhi.n	8006c52 <USBD_StdDevReq+0xce>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00f      	beq.n	8006bc6 <USBD_StdDevReq+0x42>
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d153      	bne.n	8006c52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	32ae      	adds	r2, #174	@ 0xae
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e04a      	b.n	8006c5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	785b      	ldrb	r3, [r3, #1]
 8006bca:	2b09      	cmp	r3, #9
 8006bcc:	d83b      	bhi.n	8006c46 <USBD_StdDevReq+0xc2>
 8006bce:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd4 <USBD_StdDevReq+0x50>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006c3d 	.word	0x08006c3d
 8006bdc:	08006c47 	.word	0x08006c47
 8006be0:	08006c33 	.word	0x08006c33
 8006be4:	08006c47 	.word	0x08006c47
 8006be8:	08006c07 	.word	0x08006c07
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c47 	.word	0x08006c47
 8006bf4:	08006c1f 	.word	0x08006c1f
 8006bf8:	08006c11 	.word	0x08006c11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fa3c 	bl	800707c <USBD_GetDescriptor>
          break;
 8006c04:	e024      	b.n	8006c50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fba1 	bl	8007350 <USBD_SetAddress>
          break;
 8006c0e:	e01f      	b.n	8006c50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fbe0 	bl	80073d8 <USBD_SetConfig>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
          break;
 8006c1c:	e018      	b.n	8006c50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc83 	bl	800752c <USBD_GetConfig>
          break;
 8006c26:	e013      	b.n	8006c50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fcb4 	bl	8007598 <USBD_GetStatus>
          break;
 8006c30:	e00e      	b.n	8006c50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fce3 	bl	8007600 <USBD_SetFeature>
          break;
 8006c3a:	e009      	b.n	8006c50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fd07 	bl	8007652 <USBD_ClrFeature>
          break;
 8006c44:	e004      	b.n	8006c50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fd5e 	bl	800770a <USBD_CtlError>
          break;
 8006c4e:	bf00      	nop
      }
      break;
 8006c50:	e004      	b.n	8006c5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fd58 	bl	800770a <USBD_CtlError>
      break;
 8006c5a:	bf00      	nop
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop

08006c68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c7e:	2b40      	cmp	r3, #64	@ 0x40
 8006c80:	d005      	beq.n	8006c8e <USBD_StdItfReq+0x26>
 8006c82:	2b40      	cmp	r3, #64	@ 0x40
 8006c84:	d852      	bhi.n	8006d2c <USBD_StdItfReq+0xc4>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <USBD_StdItfReq+0x26>
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d14e      	bne.n	8006d2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d840      	bhi.n	8006d1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	889b      	ldrh	r3, [r3, #4]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d836      	bhi.n	8006d14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	889b      	ldrh	r3, [r3, #4]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff fedb 	bl	8006a6a <USBD_CoreFindIF>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	2bff      	cmp	r3, #255	@ 0xff
 8006cbc:	d01d      	beq.n	8006cfa <USBD_StdItfReq+0x92>
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11a      	bne.n	8006cfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006cc4:	7bba      	ldrb	r2, [r7, #14]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	32ae      	adds	r2, #174	@ 0xae
 8006cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00f      	beq.n	8006cf4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006cd4:	7bba      	ldrb	r2, [r7, #14]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006cdc:	7bba      	ldrb	r2, [r7, #14]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	32ae      	adds	r2, #174	@ 0xae
 8006ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cf2:	e004      	b.n	8006cfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cf8:	e001      	b.n	8006cfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d110      	bne.n	8006d28 <USBD_StdItfReq+0xc0>
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10d      	bne.n	8006d28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fdd3 	bl	80078b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d12:	e009      	b.n	8006d28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fcf7 	bl	800770a <USBD_CtlError>
          break;
 8006d1c:	e004      	b.n	8006d28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fcf2 	bl	800770a <USBD_CtlError>
          break;
 8006d26:	e000      	b.n	8006d2a <USBD_StdItfReq+0xc2>
          break;
 8006d28:	bf00      	nop
      }
      break;
 8006d2a:	e004      	b.n	8006d36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fceb 	bl	800770a <USBD_CtlError>
      break;
 8006d34:	bf00      	nop
  }

  return ret;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	889b      	ldrh	r3, [r3, #4]
 8006d52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d5c:	2b40      	cmp	r3, #64	@ 0x40
 8006d5e:	d007      	beq.n	8006d70 <USBD_StdEPReq+0x30>
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	f200 817f 	bhi.w	8007064 <USBD_StdEPReq+0x324>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d02a      	beq.n	8006dc0 <USBD_StdEPReq+0x80>
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	f040 817a 	bne.w	8007064 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fe85 	bl	8006a84 <USBD_CoreFindEP>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d7e:	7b7b      	ldrb	r3, [r7, #13]
 8006d80:	2bff      	cmp	r3, #255	@ 0xff
 8006d82:	f000 8174 	beq.w	800706e <USBD_StdEPReq+0x32e>
 8006d86:	7b7b      	ldrb	r3, [r7, #13]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f040 8170 	bne.w	800706e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d8e:	7b7a      	ldrb	r2, [r7, #13]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d96:	7b7a      	ldrb	r2, [r7, #13]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	32ae      	adds	r2, #174	@ 0xae
 8006d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8163 	beq.w	800706e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006da8:	7b7a      	ldrb	r2, [r7, #13]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	32ae      	adds	r2, #174	@ 0xae
 8006dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dbe:	e156      	b.n	800706e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d008      	beq.n	8006dda <USBD_StdEPReq+0x9a>
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	f300 8145 	bgt.w	8007058 <USBD_StdEPReq+0x318>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 809b 	beq.w	8006f0a <USBD_StdEPReq+0x1ca>
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d03c      	beq.n	8006e52 <USBD_StdEPReq+0x112>
 8006dd8:	e13e      	b.n	8007058 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d002      	beq.n	8006dec <USBD_StdEPReq+0xac>
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d016      	beq.n	8006e18 <USBD_StdEPReq+0xd8>
 8006dea:	e02c      	b.n	8006e46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00d      	beq.n	8006e0e <USBD_StdEPReq+0xce>
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b80      	cmp	r3, #128	@ 0x80
 8006df6:	d00a      	beq.n	8006e0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f96f 	bl	80080e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e02:	2180      	movs	r1, #128	@ 0x80
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 f96b 	bl	80080e0 <USBD_LL_StallEP>
 8006e0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e0c:	e020      	b.n	8006e50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fc7a 	bl	800770a <USBD_CtlError>
              break;
 8006e16:	e01b      	b.n	8006e50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10e      	bne.n	8006e3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <USBD_StdEPReq+0xfe>
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b80      	cmp	r3, #128	@ 0x80
 8006e2a:	d008      	beq.n	8006e3e <USBD_StdEPReq+0xfe>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	88db      	ldrh	r3, [r3, #6]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f951 	bl	80080e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fd3a 	bl	80078b8 <USBD_CtlSendStatus>

              break;
 8006e44:	e004      	b.n	8006e50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fc5e 	bl	800770a <USBD_CtlError>
              break;
 8006e4e:	bf00      	nop
          }
          break;
 8006e50:	e107      	b.n	8007062 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d002      	beq.n	8006e64 <USBD_StdEPReq+0x124>
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d016      	beq.n	8006e90 <USBD_StdEPReq+0x150>
 8006e62:	e04b      	b.n	8006efc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <USBD_StdEPReq+0x146>
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b80      	cmp	r3, #128	@ 0x80
 8006e6e:	d00a      	beq.n	8006e86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f933 	bl	80080e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e7a:	2180      	movs	r1, #128	@ 0x80
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f92f 	bl	80080e0 <USBD_LL_StallEP>
 8006e82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e84:	e040      	b.n	8006f08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc3e 	bl	800770a <USBD_CtlError>
              break;
 8006e8e:	e03b      	b.n	8006f08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	885b      	ldrh	r3, [r3, #2]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d136      	bne.n	8006f06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f939 	bl	800811e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fd03 	bl	80078b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff fde4 	bl	8006a84 <USBD_CoreFindEP>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ec0:	7b7b      	ldrb	r3, [r7, #13]
 8006ec2:	2bff      	cmp	r3, #255	@ 0xff
 8006ec4:	d01f      	beq.n	8006f06 <USBD_StdEPReq+0x1c6>
 8006ec6:	7b7b      	ldrb	r3, [r7, #13]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d11c      	bne.n	8006f06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ecc:	7b7a      	ldrb	r2, [r7, #13]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ed4:	7b7a      	ldrb	r2, [r7, #13]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	32ae      	adds	r2, #174	@ 0xae
 8006eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d010      	beq.n	8006f06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ee4:	7b7a      	ldrb	r2, [r7, #13]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32ae      	adds	r2, #174	@ 0xae
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	4798      	blx	r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006efa:	e004      	b.n	8006f06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fc03 	bl	800770a <USBD_CtlError>
              break;
 8006f04:	e000      	b.n	8006f08 <USBD_StdEPReq+0x1c8>
              break;
 8006f06:	bf00      	nop
          }
          break;
 8006f08:	e0ab      	b.n	8007062 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d002      	beq.n	8006f1c <USBD_StdEPReq+0x1dc>
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d032      	beq.n	8006f80 <USBD_StdEPReq+0x240>
 8006f1a:	e097      	b.n	800704c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <USBD_StdEPReq+0x1f2>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b80      	cmp	r3, #128	@ 0x80
 8006f26:	d004      	beq.n	8006f32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fbed 	bl	800770a <USBD_CtlError>
                break;
 8006f30:	e091      	b.n	8007056 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da0b      	bge.n	8006f52 <USBD_StdEPReq+0x212>
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	3310      	adds	r3, #16
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3304      	adds	r3, #4
 8006f50:	e00b      	b.n	8006f6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	3304      	adds	r3, #4
 8006f6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2202      	movs	r2, #2
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fc43 	bl	8007804 <USBD_CtlSendData>
              break;
 8006f7e:	e06a      	b.n	8007056 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	da11      	bge.n	8006fac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	f003 020f 	and.w	r2, r3, #15
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	3324      	adds	r3, #36	@ 0x24
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d117      	bne.n	8006fd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fbb0 	bl	800770a <USBD_CtlError>
                  break;
 8006faa:	e054      	b.n	8007056 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	f003 020f 	and.w	r2, r3, #15
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fb9d 	bl	800770a <USBD_CtlError>
                  break;
 8006fd0:	e041      	b.n	8007056 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	da0b      	bge.n	8006ff2 <USBD_StdEPReq+0x2b2>
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	3310      	adds	r3, #16
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4413      	add	r3, r2
 8006fee:	3304      	adds	r3, #4
 8006ff0:	e00b      	b.n	800700a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	4413      	add	r3, r2
 8007008:	3304      	adds	r3, #4
 800700a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <USBD_StdEPReq+0x2d8>
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	2b80      	cmp	r3, #128	@ 0x80
 8007016:	d103      	bne.n	8007020 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e00e      	b.n	800703e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 f899 	bl	800815c <USBD_LL_IsStallEP>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2201      	movs	r2, #1
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e002      	b.n	800703e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2202      	movs	r2, #2
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fbdd 	bl	8007804 <USBD_CtlSendData>
              break;
 800704a:	e004      	b.n	8007056 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fb5b 	bl	800770a <USBD_CtlError>
              break;
 8007054:	bf00      	nop
          }
          break;
 8007056:	e004      	b.n	8007062 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb55 	bl	800770a <USBD_CtlError>
          break;
 8007060:	bf00      	nop
      }
      break;
 8007062:	e005      	b.n	8007070 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fb4f 	bl	800770a <USBD_CtlError>
      break;
 800706c:	e000      	b.n	8007070 <USBD_StdEPReq+0x330>
      break;
 800706e:	bf00      	nop
  }

  return ret;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	885b      	ldrh	r3, [r3, #2]
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	2b06      	cmp	r3, #6
 800709e:	f200 8128 	bhi.w	80072f2 <USBD_GetDescriptor+0x276>
 80070a2:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <USBD_GetDescriptor+0x2c>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	080070dd 	.word	0x080070dd
 80070b0:	0800711d 	.word	0x0800711d
 80070b4:	080072f3 	.word	0x080072f3
 80070b8:	080072f3 	.word	0x080072f3
 80070bc:	08007293 	.word	0x08007293
 80070c0:	080072bf 	.word	0x080072bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	7c12      	ldrb	r2, [r2, #16]
 80070d0:	f107 0108 	add.w	r1, r7, #8
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	60f8      	str	r0, [r7, #12]
      break;
 80070da:	e112      	b.n	8007302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7c1b      	ldrb	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10d      	bne.n	8007100 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ec:	f107 0208 	add.w	r2, r7, #8
 80070f0:	4610      	mov	r0, r2
 80070f2:	4798      	blx	r3
 80070f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	2202      	movs	r2, #2
 80070fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070fe:	e100      	b.n	8007302 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007108:	f107 0208 	add.w	r2, r7, #8
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	2202      	movs	r2, #2
 8007118:	701a      	strb	r2, [r3, #0]
      break;
 800711a:	e0f2      	b.n	8007302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	885b      	ldrh	r3, [r3, #2]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b05      	cmp	r3, #5
 8007124:	f200 80ac 	bhi.w	8007280 <USBD_GetDescriptor+0x204>
 8007128:	a201      	add	r2, pc, #4	@ (adr r2, 8007130 <USBD_GetDescriptor+0xb4>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007149 	.word	0x08007149
 8007134:	0800717d 	.word	0x0800717d
 8007138:	080071b1 	.word	0x080071b1
 800713c:	080071e5 	.word	0x080071e5
 8007140:	08007219 	.word	0x08007219
 8007144:	0800724d 	.word	0x0800724d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	7c12      	ldrb	r2, [r2, #16]
 8007160:	f107 0108 	add.w	r1, r7, #8
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716a:	e091      	b.n	8007290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 facb 	bl	800770a <USBD_CtlError>
            err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
          break;
 800717a:	e089      	b.n	8007290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	7c12      	ldrb	r2, [r2, #16]
 8007194:	f107 0108 	add.w	r1, r7, #8
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800719e:	e077      	b.n	8007290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fab1 	bl	800770a <USBD_CtlError>
            err++;
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	3301      	adds	r3, #1
 80071ac:	72fb      	strb	r3, [r7, #11]
          break;
 80071ae:	e06f      	b.n	8007290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7c12      	ldrb	r2, [r2, #16]
 80071c8:	f107 0108 	add.w	r1, r7, #8
 80071cc:	4610      	mov	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d2:	e05d      	b.n	8007290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa97 	bl	800770a <USBD_CtlError>
            err++;
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	3301      	adds	r3, #1
 80071e0:	72fb      	strb	r3, [r7, #11]
          break;
 80071e2:	e055      	b.n	8007290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	7c12      	ldrb	r2, [r2, #16]
 80071fc:	f107 0108 	add.w	r1, r7, #8
 8007200:	4610      	mov	r0, r2
 8007202:	4798      	blx	r3
 8007204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007206:	e043      	b.n	8007290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa7d 	bl	800770a <USBD_CtlError>
            err++;
 8007210:	7afb      	ldrb	r3, [r7, #11]
 8007212:	3301      	adds	r3, #1
 8007214:	72fb      	strb	r3, [r7, #11]
          break;
 8007216:	e03b      	b.n	8007290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	7c12      	ldrb	r2, [r2, #16]
 8007230:	f107 0108 	add.w	r1, r7, #8
 8007234:	4610      	mov	r0, r2
 8007236:	4798      	blx	r3
 8007238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723a:	e029      	b.n	8007290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa63 	bl	800770a <USBD_CtlError>
            err++;
 8007244:	7afb      	ldrb	r3, [r7, #11]
 8007246:	3301      	adds	r3, #1
 8007248:	72fb      	strb	r3, [r7, #11]
          break;
 800724a:	e021      	b.n	8007290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	7c12      	ldrb	r2, [r2, #16]
 8007264:	f107 0108 	add.w	r1, r7, #8
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
 800726c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800726e:	e00f      	b.n	8007290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa49 	bl	800770a <USBD_CtlError>
            err++;
 8007278:	7afb      	ldrb	r3, [r7, #11]
 800727a:	3301      	adds	r3, #1
 800727c:	72fb      	strb	r3, [r7, #11]
          break;
 800727e:	e007      	b.n	8007290 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa41 	bl	800770a <USBD_CtlError>
          err++;
 8007288:	7afb      	ldrb	r3, [r7, #11]
 800728a:	3301      	adds	r3, #1
 800728c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800728e:	bf00      	nop
      }
      break;
 8007290:	e037      	b.n	8007302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7c1b      	ldrb	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a2:	f107 0208 	add.w	r2, r7, #8
 80072a6:	4610      	mov	r0, r2
 80072a8:	4798      	blx	r3
 80072aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072ac:	e029      	b.n	8007302 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa2a 	bl	800770a <USBD_CtlError>
        err++;
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	3301      	adds	r3, #1
 80072ba:	72fb      	strb	r3, [r7, #11]
      break;
 80072bc:	e021      	b.n	8007302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	7c1b      	ldrb	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10d      	bne.n	80072e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ce:	f107 0208 	add.w	r2, r7, #8
 80072d2:	4610      	mov	r0, r2
 80072d4:	4798      	blx	r3
 80072d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	2207      	movs	r2, #7
 80072de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072e0:	e00f      	b.n	8007302 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fa10 	bl	800770a <USBD_CtlError>
        err++;
 80072ea:	7afb      	ldrb	r3, [r7, #11]
 80072ec:	3301      	adds	r3, #1
 80072ee:	72fb      	strb	r3, [r7, #11]
      break;
 80072f0:	e007      	b.n	8007302 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fa08 	bl	800770a <USBD_CtlError>
      err++;
 80072fa:	7afb      	ldrb	r3, [r7, #11]
 80072fc:	3301      	adds	r3, #1
 80072fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007300:	bf00      	nop
  }

  if (err != 0U)
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d11e      	bne.n	8007346 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d016      	beq.n	800733e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007310:	893b      	ldrh	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00e      	beq.n	8007334 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	88da      	ldrh	r2, [r3, #6]
 800731a:	893b      	ldrh	r3, [r7, #8]
 800731c:	4293      	cmp	r3, r2
 800731e:	bf28      	it	cs
 8007320:	4613      	movcs	r3, r2
 8007322:	b29b      	uxth	r3, r3
 8007324:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007326:	893b      	ldrh	r3, [r7, #8]
 8007328:	461a      	mov	r2, r3
 800732a:	68f9      	ldr	r1, [r7, #12]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa69 	bl	8007804 <USBD_CtlSendData>
 8007332:	e009      	b.n	8007348 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9e7 	bl	800770a <USBD_CtlError>
 800733c:	e004      	b.n	8007348 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 faba 	bl	80078b8 <USBD_CtlSendStatus>
 8007344:	e000      	b.n	8007348 <USBD_GetDescriptor+0x2cc>
    return;
 8007346:	bf00      	nop
  }
}
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop

08007350 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	889b      	ldrh	r3, [r3, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d131      	bne.n	80073c6 <USBD_SetAddress+0x76>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	88db      	ldrh	r3, [r3, #6]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d12d      	bne.n	80073c6 <USBD_SetAddress+0x76>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	885b      	ldrh	r3, [r3, #2]
 800736e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007370:	d829      	bhi.n	80073c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	885b      	ldrh	r3, [r3, #2]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800737c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b03      	cmp	r3, #3
 8007388:	d104      	bne.n	8007394 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f9bc 	bl	800770a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007392:	e01d      	b.n	80073d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	7bfa      	ldrb	r2, [r7, #15]
 8007398:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 ff07 	bl	80081b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa86 	bl	80078b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	e009      	b.n	80073d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c4:	e004      	b.n	80073d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f99e 	bl	800770a <USBD_CtlError>
  }
}
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	885b      	ldrh	r3, [r3, #2]
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	4b4e      	ldr	r3, [pc, #312]	@ (8007528 <USBD_SetConfig+0x150>)
 80073ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007528 <USBD_SetConfig+0x150>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d905      	bls.n	8007404 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f985 	bl	800770a <USBD_CtlError>
    return USBD_FAIL;
 8007400:	2303      	movs	r3, #3
 8007402:	e08c      	b.n	800751e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d002      	beq.n	8007416 <USBD_SetConfig+0x3e>
 8007410:	2b03      	cmp	r3, #3
 8007412:	d029      	beq.n	8007468 <USBD_SetConfig+0x90>
 8007414:	e075      	b.n	8007502 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007416:	4b44      	ldr	r3, [pc, #272]	@ (8007528 <USBD_SetConfig+0x150>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d020      	beq.n	8007460 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800741e:	4b42      	ldr	r3, [pc, #264]	@ (8007528 <USBD_SetConfig+0x150>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007428:	4b3f      	ldr	r3, [pc, #252]	@ (8007528 <USBD_SetConfig+0x150>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fe ffe3 	bl	80063fa <USBD_SetClassConfig>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f962 	bl	800770a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800744e:	e065      	b.n	800751c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fa31 	bl	80078b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2203      	movs	r2, #3
 800745a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800745e:	e05d      	b.n	800751c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fa29 	bl	80078b8 <USBD_CtlSendStatus>
      break;
 8007466:	e059      	b.n	800751c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007468:	4b2f      	ldr	r3, [pc, #188]	@ (8007528 <USBD_SetConfig+0x150>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d112      	bne.n	8007496 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007478:	4b2b      	ldr	r3, [pc, #172]	@ (8007528 <USBD_SetConfig+0x150>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007482:	4b29      	ldr	r3, [pc, #164]	@ (8007528 <USBD_SetConfig+0x150>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7fe ffd2 	bl	8006432 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa12 	bl	80078b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007494:	e042      	b.n	800751c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007496:	4b24      	ldr	r3, [pc, #144]	@ (8007528 <USBD_SetConfig+0x150>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d02a      	beq.n	80074fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7fe ffc0 	bl	8006432 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <USBD_SetConfig+0x150>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007528 <USBD_SetConfig+0x150>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fe ff99 	bl	80063fa <USBD_SetClassConfig>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00f      	beq.n	80074f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f918 	bl	800770a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fe ffa5 	bl	8006432 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074f0:	e014      	b.n	800751c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9e0 	bl	80078b8 <USBD_CtlSendStatus>
      break;
 80074f8:	e010      	b.n	800751c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9dc 	bl	80078b8 <USBD_CtlSendStatus>
      break;
 8007500:	e00c      	b.n	800751c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f900 	bl	800770a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800750a:	4b07      	ldr	r3, [pc, #28]	@ (8007528 <USBD_SetConfig+0x150>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fe ff8e 	bl	8006432 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007516:	2303      	movs	r3, #3
 8007518:	73fb      	strb	r3, [r7, #15]
      break;
 800751a:	bf00      	nop
  }

  return ret;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000220 	.word	0x20000220

0800752c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	88db      	ldrh	r3, [r3, #6]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d004      	beq.n	8007548 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8e2 	bl	800770a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007546:	e023      	b.n	8007590 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	dc02      	bgt.n	800755a <USBD_GetConfig+0x2e>
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc03      	bgt.n	8007560 <USBD_GetConfig+0x34>
 8007558:	e015      	b.n	8007586 <USBD_GetConfig+0x5a>
 800755a:	2b03      	cmp	r3, #3
 800755c:	d00b      	beq.n	8007576 <USBD_GetConfig+0x4a>
 800755e:	e012      	b.n	8007586 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3308      	adds	r3, #8
 800756a:	2201      	movs	r2, #1
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f948 	bl	8007804 <USBD_CtlSendData>
        break;
 8007574:	e00c      	b.n	8007590 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3304      	adds	r3, #4
 800757a:	2201      	movs	r2, #1
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f940 	bl	8007804 <USBD_CtlSendData>
        break;
 8007584:	e004      	b.n	8007590 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f8be 	bl	800770a <USBD_CtlError>
        break;
 800758e:	bf00      	nop
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d81e      	bhi.n	80075ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	88db      	ldrh	r3, [r3, #6]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d004      	beq.n	80075c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f8a5 	bl	800770a <USBD_CtlError>
        break;
 80075c0:	e01a      	b.n	80075f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f043 0202 	orr.w	r2, r3, #2
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	330c      	adds	r3, #12
 80075e2:	2202      	movs	r2, #2
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f90c 	bl	8007804 <USBD_CtlSendData>
      break;
 80075ec:	e004      	b.n	80075f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f88a 	bl	800770a <USBD_CtlError>
      break;
 80075f6:	bf00      	nop
  }
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	885b      	ldrh	r3, [r3, #2]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d107      	bne.n	8007622 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f94c 	bl	80078b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007620:	e013      	b.n	800764a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	885b      	ldrh	r3, [r3, #2]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d10b      	bne.n	8007642 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	889b      	ldrh	r3, [r3, #4]
 800762e:	0a1b      	lsrs	r3, r3, #8
 8007630:	b29b      	uxth	r3, r3
 8007632:	b2da      	uxtb	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f93c 	bl	80078b8 <USBD_CtlSendStatus>
}
 8007640:	e003      	b.n	800764a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f860 	bl	800770a <USBD_CtlError>
}
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007662:	b2db      	uxtb	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	2b02      	cmp	r3, #2
 8007668:	d80b      	bhi.n	8007682 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d10c      	bne.n	800768c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f91c 	bl	80078b8 <USBD_CtlSendStatus>
      }
      break;
 8007680:	e004      	b.n	800768c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f840 	bl	800770a <USBD_CtlError>
      break;
 800768a:	e000      	b.n	800768e <USBD_ClrFeature+0x3c>
      break;
 800768c:	bf00      	nop
  }
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3301      	adds	r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff fa40 	bl	8006b46 <SWAPBYTE>
 80076c6:	4603      	mov	r3, r0
 80076c8:	461a      	mov	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fa33 	bl	8006b46 <SWAPBYTE>
 80076e0:	4603      	mov	r3, r0
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3301      	adds	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f7ff fa26 	bl	8006b46 <SWAPBYTE>
 80076fa:	4603      	mov	r3, r0
 80076fc:	461a      	mov	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	80da      	strh	r2, [r3, #6]
}
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007714:	2180      	movs	r1, #128	@ 0x80
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fce2 	bl	80080e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800771c:	2100      	movs	r1, #0
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fcde 	bl	80080e0 <USBD_LL_StallEP>
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d042      	beq.n	80077c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007746:	6938      	ldr	r0, [r7, #16]
 8007748:	f000 f842 	bl	80077d0 <USBD_GetLen>
 800774c:	4603      	mov	r3, r0
 800774e:	3301      	adds	r3, #1
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007756:	d808      	bhi.n	800776a <USBD_GetString+0x3e>
 8007758:	6938      	ldr	r0, [r7, #16]
 800775a:	f000 f839 	bl	80077d0 <USBD_GetLen>
 800775e:	4603      	mov	r3, r0
 8007760:	3301      	adds	r3, #1
 8007762:	b29b      	uxth	r3, r3
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	e001      	b.n	800776e <USBD_GetString+0x42>
 800776a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	4413      	add	r3, r2
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
  idx++;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	3301      	adds	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	4413      	add	r3, r2
 800778a:	2203      	movs	r2, #3
 800778c:	701a      	strb	r2, [r3, #0]
  idx++;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	3301      	adds	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007794:	e013      	b.n	80077be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	4413      	add	r3, r2
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	3301      	adds	r3, #1
 80077a6:	613b      	str	r3, [r7, #16]
    idx++;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	3301      	adds	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	4413      	add	r3, r2
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	3301      	adds	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e7      	bne.n	8007796 <USBD_GetString+0x6a>
 80077c6:	e000      	b.n	80077ca <USBD_GetString+0x9e>
    return;
 80077c8:	bf00      	nop
  }
}
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077e0:	e005      	b.n	80077ee <USBD_GetLen+0x1e>
  {
    len++;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	3301      	adds	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	3301      	adds	r3, #1
 80077ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f5      	bne.n	80077e2 <USBD_GetLen+0x12>
  }

  return len;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2202      	movs	r2, #2
 8007814:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	2100      	movs	r1, #0
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fce1 	bl	80081f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	2100      	movs	r1, #0
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fcd0 	bl	80081f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2203      	movs	r2, #3
 800786c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	2100      	movs	r1, #0
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 fcd4 	bl	8008234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	2100      	movs	r1, #0
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 fcc3 	bl	8008234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2204      	movs	r2, #4
 80078c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078c8:	2300      	movs	r3, #0
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fc8f 	bl	80081f2 <USBD_LL_Transmit>

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2205      	movs	r2, #5
 80078ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ee:	2300      	movs	r3, #0
 80078f0:	2200      	movs	r2, #0
 80078f2:	2100      	movs	r1, #0
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fc9d 	bl	8008234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007908:	2200      	movs	r2, #0
 800790a:	4912      	ldr	r1, [pc, #72]	@ (8007954 <MX_USB_DEVICE_Init+0x50>)
 800790c:	4812      	ldr	r0, [pc, #72]	@ (8007958 <MX_USB_DEVICE_Init+0x54>)
 800790e:	f7fe fcf7 	bl	8006300 <USBD_Init>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007918:	f7f9 f8aa 	bl	8000a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800791c:	490f      	ldr	r1, [pc, #60]	@ (800795c <MX_USB_DEVICE_Init+0x58>)
 800791e:	480e      	ldr	r0, [pc, #56]	@ (8007958 <MX_USB_DEVICE_Init+0x54>)
 8007920:	f7fe fd1e 	bl	8006360 <USBD_RegisterClass>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800792a:	f7f9 f8a1 	bl	8000a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800792e:	490c      	ldr	r1, [pc, #48]	@ (8007960 <MX_USB_DEVICE_Init+0x5c>)
 8007930:	4809      	ldr	r0, [pc, #36]	@ (8007958 <MX_USB_DEVICE_Init+0x54>)
 8007932:	f7fe fc15 	bl	8006160 <USBD_CDC_RegisterInterface>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800793c:	f7f9 f898 	bl	8000a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007940:	4805      	ldr	r0, [pc, #20]	@ (8007958 <MX_USB_DEVICE_Init+0x54>)
 8007942:	f7fe fd43 	bl	80063cc <USBD_Start>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800794c:	f7f9 f890 	bl	8000a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007950:	bf00      	nop
 8007952:	bd80      	pop	{r7, pc}
 8007954:	200000ac 	.word	0x200000ac
 8007958:	20000224 	.word	0x20000224
 800795c:	20000018 	.word	0x20000018
 8007960:	20000098 	.word	0x20000098

08007964 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007968:	2200      	movs	r2, #0
 800796a:	4905      	ldr	r1, [pc, #20]	@ (8007980 <CDC_Init_FS+0x1c>)
 800796c:	4805      	ldr	r0, [pc, #20]	@ (8007984 <CDC_Init_FS+0x20>)
 800796e:	f7fe fc11 	bl	8006194 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007972:	4905      	ldr	r1, [pc, #20]	@ (8007988 <CDC_Init_FS+0x24>)
 8007974:	4803      	ldr	r0, [pc, #12]	@ (8007984 <CDC_Init_FS+0x20>)
 8007976:	f7fe fc2f 	bl	80061d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800797a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20000900 	.word	0x20000900
 8007984:	20000224 	.word	0x20000224
 8007988:	20000500 	.word	0x20000500

0800798c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007990:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007992:	4618      	mov	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
 80079a8:	4613      	mov	r3, r2
 80079aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	2b23      	cmp	r3, #35	@ 0x23
 80079b0:	d84a      	bhi.n	8007a48 <CDC_Control_FS+0xac>
 80079b2:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <CDC_Control_FS+0x1c>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	08007a49 	.word	0x08007a49
 80079bc:	08007a49 	.word	0x08007a49
 80079c0:	08007a49 	.word	0x08007a49
 80079c4:	08007a49 	.word	0x08007a49
 80079c8:	08007a49 	.word	0x08007a49
 80079cc:	08007a49 	.word	0x08007a49
 80079d0:	08007a49 	.word	0x08007a49
 80079d4:	08007a49 	.word	0x08007a49
 80079d8:	08007a49 	.word	0x08007a49
 80079dc:	08007a49 	.word	0x08007a49
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	08007a49 	.word	0x08007a49
 80079e8:	08007a49 	.word	0x08007a49
 80079ec:	08007a49 	.word	0x08007a49
 80079f0:	08007a49 	.word	0x08007a49
 80079f4:	08007a49 	.word	0x08007a49
 80079f8:	08007a49 	.word	0x08007a49
 80079fc:	08007a49 	.word	0x08007a49
 8007a00:	08007a49 	.word	0x08007a49
 8007a04:	08007a49 	.word	0x08007a49
 8007a08:	08007a49 	.word	0x08007a49
 8007a0c:	08007a49 	.word	0x08007a49
 8007a10:	08007a49 	.word	0x08007a49
 8007a14:	08007a49 	.word	0x08007a49
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a49 	.word	0x08007a49
 8007a28:	08007a49 	.word	0x08007a49
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	08007a49 	.word	0x08007a49
 8007a34:	08007a49 	.word	0x08007a49
 8007a38:	08007a49 	.word	0x08007a49
 8007a3c:	08007a49 	.word	0x08007a49
 8007a40:	08007a49 	.word	0x08007a49
 8007a44:	08007a49 	.word	0x08007a49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a48:	bf00      	nop
  }

  return (USBD_OK);
 8007a4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4805      	ldr	r0, [pc, #20]	@ (8007a7c <CDC_Receive_FS+0x24>)
 8007a66:	f7fe fbb7 	bl	80061d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a6a:	4804      	ldr	r0, [pc, #16]	@ (8007a7c <CDC_Receive_FS+0x24>)
 8007a6c:	f7fe fc12 	bl	8006294 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000224 	.word	0x20000224

08007a80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a90:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <CDC_Transmit_FS+0x48>)
 8007a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e00b      	b.n	8007abe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007aa6:	887b      	ldrh	r3, [r7, #2]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4806      	ldr	r0, [pc, #24]	@ (8007ac8 <CDC_Transmit_FS+0x48>)
 8007aae:	f7fe fb71 	bl	8006194 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ab2:	4805      	ldr	r0, [pc, #20]	@ (8007ac8 <CDC_Transmit_FS+0x48>)
 8007ab4:	f7fe fbae 	bl	8006214 <USBD_CDC_TransmitPacket>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000224 	.word	0x20000224

08007acc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
	...

08007af0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2212      	movs	r2, #18
 8007b00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b02:	4b03      	ldr	r3, [pc, #12]	@ (8007b10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	200000c8 	.word	0x200000c8

08007b14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2204      	movs	r2, #4
 8007b24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b26:	4b03      	ldr	r3, [pc, #12]	@ (8007b34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	200000dc 	.word	0x200000dc

08007b38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d105      	bne.n	8007b56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4907      	ldr	r1, [pc, #28]	@ (8007b6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b4e:	4808      	ldr	r0, [pc, #32]	@ (8007b70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b50:	f7ff fdec 	bl	800772c <USBD_GetString>
 8007b54:	e004      	b.n	8007b60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	4904      	ldr	r1, [pc, #16]	@ (8007b6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b5a:	4805      	ldr	r0, [pc, #20]	@ (8007b70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b5c:	f7ff fde6 	bl	800772c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b60:	4b02      	ldr	r3, [pc, #8]	@ (8007b6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000d00 	.word	0x20000d00
 8007b70:	080084dc 	.word	0x080084dc

08007b74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	4904      	ldr	r1, [pc, #16]	@ (8007b94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b84:	4804      	ldr	r0, [pc, #16]	@ (8007b98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b86:	f7ff fdd1 	bl	800772c <USBD_GetString>
  return USBD_StrDesc;
 8007b8a:	4b02      	ldr	r3, [pc, #8]	@ (8007b94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000d00 	.word	0x20000d00
 8007b98:	080084f4 	.word	0x080084f4

08007b9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	221a      	movs	r2, #26
 8007bac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007bae:	f000 f843 	bl	8007c38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007bb2:	4b02      	ldr	r3, [pc, #8]	@ (8007bbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	200000e0 	.word	0x200000e0

08007bc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d105      	bne.n	8007bde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	4907      	ldr	r1, [pc, #28]	@ (8007bf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bd6:	4808      	ldr	r0, [pc, #32]	@ (8007bf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd8:	f7ff fda8 	bl	800772c <USBD_GetString>
 8007bdc:	e004      	b.n	8007be8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	4904      	ldr	r1, [pc, #16]	@ (8007bf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007be2:	4805      	ldr	r0, [pc, #20]	@ (8007bf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007be4:	f7ff fda2 	bl	800772c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be8:	4b02      	ldr	r3, [pc, #8]	@ (8007bf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000d00 	.word	0x20000d00
 8007bf8:	08008508 	.word	0x08008508

08007bfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d105      	bne.n	8007c1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4907      	ldr	r1, [pc, #28]	@ (8007c30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c12:	4808      	ldr	r0, [pc, #32]	@ (8007c34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c14:	f7ff fd8a 	bl	800772c <USBD_GetString>
 8007c18:	e004      	b.n	8007c24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	4904      	ldr	r1, [pc, #16]	@ (8007c30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c1e:	4805      	ldr	r0, [pc, #20]	@ (8007c34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c20:	f7ff fd84 	bl	800772c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c24:	4b02      	ldr	r3, [pc, #8]	@ (8007c30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000d00 	.word	0x20000d00
 8007c34:	08008514 	.word	0x08008514

08007c38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c7c <Get_SerialNum+0x44>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c44:	4b0e      	ldr	r3, [pc, #56]	@ (8007c80 <Get_SerialNum+0x48>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c84 <Get_SerialNum+0x4c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c5e:	2208      	movs	r2, #8
 8007c60:	4909      	ldr	r1, [pc, #36]	@ (8007c88 <Get_SerialNum+0x50>)
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 f814 	bl	8007c90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c68:	2204      	movs	r2, #4
 8007c6a:	4908      	ldr	r1, [pc, #32]	@ (8007c8c <Get_SerialNum+0x54>)
 8007c6c:	68b8      	ldr	r0, [r7, #8]
 8007c6e:	f000 f80f 	bl	8007c90 <IntToUnicode>
  }
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	1fff7a10 	.word	0x1fff7a10
 8007c80:	1fff7a14 	.word	0x1fff7a14
 8007c84:	1fff7a18 	.word	0x1fff7a18
 8007c88:	200000e2 	.word	0x200000e2
 8007c8c:	200000f2 	.word	0x200000f2

08007c90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]
 8007ca6:	e027      	b.n	8007cf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	0f1b      	lsrs	r3, r3, #28
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d80b      	bhi.n	8007cc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	0f1b      	lsrs	r3, r3, #28
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3230      	adds	r2, #48	@ 0x30
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e00a      	b.n	8007cde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	0f1b      	lsrs	r3, r3, #28
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	440b      	add	r3, r1
 8007cd8:	3237      	adds	r2, #55	@ 0x37
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	3301      	adds	r3, #1
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
 8007cf8:	7dfa      	ldrb	r2, [r7, #23]
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d3d3      	bcc.n	8007ca8 <IntToUnicode+0x18>
  }
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08a      	sub	sp, #40	@ 0x28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d18:	f107 0314 	add.w	r3, r7, #20
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	605a      	str	r2, [r3, #4]
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d30:	d13a      	bne.n	8007da8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d32:	2300      	movs	r3, #0
 8007d34:	613b      	str	r3, [r7, #16]
 8007d36:	4b1e      	ldr	r3, [pc, #120]	@ (8007db0 <HAL_PCD_MspInit+0xa0>)
 8007d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007db0 <HAL_PCD_MspInit+0xa0>)
 8007d3c:	f043 0301 	orr.w	r3, r3, #1
 8007d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d42:	4b1b      	ldr	r3, [pc, #108]	@ (8007db0 <HAL_PCD_MspInit+0xa0>)
 8007d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	613b      	str	r3, [r7, #16]
 8007d4c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d4e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d54:	2302      	movs	r3, #2
 8007d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d60:	230a      	movs	r3, #10
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d64:	f107 0314 	add.w	r3, r7, #20
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4812      	ldr	r0, [pc, #72]	@ (8007db4 <HAL_PCD_MspInit+0xa4>)
 8007d6c:	f7f9 f9b4 	bl	80010d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d70:	4b0f      	ldr	r3, [pc, #60]	@ (8007db0 <HAL_PCD_MspInit+0xa0>)
 8007d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d74:	4a0e      	ldr	r2, [pc, #56]	@ (8007db0 <HAL_PCD_MspInit+0xa0>)
 8007d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d7a:	6353      	str	r3, [r2, #52]	@ 0x34
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	4b0b      	ldr	r3, [pc, #44]	@ (8007db0 <HAL_PCD_MspInit+0xa0>)
 8007d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d84:	4a0a      	ldr	r2, [pc, #40]	@ (8007db0 <HAL_PCD_MspInit+0xa0>)
 8007d86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d8c:	4b08      	ldr	r3, [pc, #32]	@ (8007db0 <HAL_PCD_MspInit+0xa0>)
 8007d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	2043      	movs	r0, #67	@ 0x43
 8007d9e:	f7f9 f964 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007da2:	2043      	movs	r0, #67	@ 0x43
 8007da4:	f7f9 f97d 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007da8:	bf00      	nop
 8007daa:	3728      	adds	r7, #40	@ 0x28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	40023800 	.word	0x40023800
 8007db4:	40020000 	.word	0x40020000

08007db8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7fe fb49 	bl	8006466 <USBD_LL_SetupStage>
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007dee:	78fa      	ldrb	r2, [r7, #3]
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	4619      	mov	r1, r3
 8007e06:	f7fe fb83 	bl	8006510 <USBD_LL_DataOutStage>
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	440b      	add	r3, r1
 8007e32:	3320      	adds	r3, #32
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f7fe fc1c 	bl	8006676 <USBD_LL_DataInStage>
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fd56 	bl	8006906 <USBD_LL_SOF>
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	79db      	ldrb	r3, [r3, #7]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d001      	beq.n	8007e7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e76:	f7f8 fdfb 	bl	8000a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e80:	7bfa      	ldrb	r2, [r7, #15]
 8007e82:	4611      	mov	r1, r2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fe fcfa 	bl	800687e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe fca2 	bl	80067da <USBD_LL_Reset>
}
 8007e96:	bf00      	nop
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fcf5 	bl	800689e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	7adb      	ldrb	r3, [r3, #11]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <HAL_PCD_SuspendCallback+0x48>)
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	4a03      	ldr	r2, [pc, #12]	@ (8007ee8 <HAL_PCD_SuspendCallback+0x48>)
 8007eda:	f043 0306 	orr.w	r3, r3, #6
 8007ede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000ed00 	.word	0xe000ed00

08007eec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fceb 	bl	80068d6 <USBD_LL_Resume>
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f1a:	78fa      	ldrb	r2, [r7, #3]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fd43 	bl	80069aa <USBD_LL_IsoOUTIncomplete>
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fcff 	bl	8006946 <USBD_LL_IsoINIncomplete>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fd55 	bl	8006a0e <USBD_LL_DevConnected>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fd52 	bl	8006a24 <USBD_LL_DevDisconnected>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d13c      	bne.n	8008012 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f98:	4a20      	ldr	r2, [pc, #128]	@ (800801c <USBD_LL_Init+0x94>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800801c <USBD_LL_Init+0x94>)
 8007fa4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800801c <USBD_LL_Init+0x94>)
 8007faa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007fae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800801c <USBD_LL_Init+0x94>)
 8007fb2:	2204      	movs	r2, #4
 8007fb4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fb6:	4b19      	ldr	r3, [pc, #100]	@ (800801c <USBD_LL_Init+0x94>)
 8007fb8:	2202      	movs	r2, #2
 8007fba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fbc:	4b17      	ldr	r3, [pc, #92]	@ (800801c <USBD_LL_Init+0x94>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fc2:	4b16      	ldr	r3, [pc, #88]	@ (800801c <USBD_LL_Init+0x94>)
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fc8:	4b14      	ldr	r3, [pc, #80]	@ (800801c <USBD_LL_Init+0x94>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fce:	4b13      	ldr	r3, [pc, #76]	@ (800801c <USBD_LL_Init+0x94>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fd4:	4b11      	ldr	r3, [pc, #68]	@ (800801c <USBD_LL_Init+0x94>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fda:	4b10      	ldr	r3, [pc, #64]	@ (800801c <USBD_LL_Init+0x94>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800801c <USBD_LL_Init+0x94>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fe6:	480d      	ldr	r0, [pc, #52]	@ (800801c <USBD_LL_Init+0x94>)
 8007fe8:	f7fa fa52 	bl	8002490 <HAL_PCD_Init>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ff2:	f7f8 fd3d 	bl	8000a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ff6:	2180      	movs	r1, #128	@ 0x80
 8007ff8:	4808      	ldr	r0, [pc, #32]	@ (800801c <USBD_LL_Init+0x94>)
 8007ffa:	f7fb fc7e 	bl	80038fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ffe:	2240      	movs	r2, #64	@ 0x40
 8008000:	2100      	movs	r1, #0
 8008002:	4806      	ldr	r0, [pc, #24]	@ (800801c <USBD_LL_Init+0x94>)
 8008004:	f7fb fc32 	bl	800386c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008008:	2280      	movs	r2, #128	@ 0x80
 800800a:	2101      	movs	r1, #1
 800800c:	4803      	ldr	r0, [pc, #12]	@ (800801c <USBD_LL_Init+0x94>)
 800800e:	f7fb fc2d 	bl	800386c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000f00 	.word	0x20000f00

08008020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008036:	4618      	mov	r0, r3
 8008038:	f7fa fb39 	bl	80026ae <HAL_PCD_Start>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f942 	bl	80082cc <USBD_Get_USB_Status>
 8008048:	4603      	mov	r3, r0
 800804a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800804c:	7bbb      	ldrb	r3, [r7, #14]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	4608      	mov	r0, r1
 8008060:	4611      	mov	r1, r2
 8008062:	461a      	mov	r2, r3
 8008064:	4603      	mov	r3, r0
 8008066:	70fb      	strb	r3, [r7, #3]
 8008068:	460b      	mov	r3, r1
 800806a:	70bb      	strb	r3, [r7, #2]
 800806c:	4613      	mov	r3, r2
 800806e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800807e:	78bb      	ldrb	r3, [r7, #2]
 8008080:	883a      	ldrh	r2, [r7, #0]
 8008082:	78f9      	ldrb	r1, [r7, #3]
 8008084:	f7fb f80d 	bl	80030a2 <HAL_PCD_EP_Open>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f91c 	bl	80082cc <USBD_Get_USB_Status>
 8008094:	4603      	mov	r3, r0
 8008096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008098:	7bbb      	ldrb	r3, [r7, #14]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fb f858 	bl	8003176 <HAL_PCD_EP_Close>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f8fd 	bl	80082cc <USBD_Get_USB_Status>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fb f910 	bl	8003324 <HAL_PCD_EP_SetStall>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f8de 	bl	80082cc <USBD_Get_USB_Status>
 8008110:	4603      	mov	r3, r0
 8008112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008114:	7bbb      	ldrb	r3, [r7, #14]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7fb f954 	bl	80033ea <HAL_PCD_EP_ClrStall>
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f8bf 	bl	80082cc <USBD_Get_USB_Status>
 800814e:	4603      	mov	r3, r0
 8008150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008152:	7bbb      	ldrb	r3, [r7, #14]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800816e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008174:	2b00      	cmp	r3, #0
 8008176:	da0b      	bge.n	8008190 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	4613      	mov	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	3316      	adds	r3, #22
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	e00b      	b.n	80081a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008196:	68f9      	ldr	r1, [r7, #12]
 8008198:	4613      	mov	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80081a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fa ff41 	bl	800305a <HAL_PCD_SetAddress>
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 f874 	bl	80082cc <USBD_Get_USB_Status>
 80081e4:	4603      	mov	r3, r0
 80081e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b086      	sub	sp, #24
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
 80081fe:	460b      	mov	r3, r1
 8008200:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008210:	7af9      	ldrb	r1, [r7, #11]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	f7fb f84b 	bl	80032b0 <HAL_PCD_EP_Transmit>
 800821a:	4603      	mov	r3, r0
 800821c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 f853 	bl	80082cc <USBD_Get_USB_Status>
 8008226:	4603      	mov	r3, r0
 8008228:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800822a:	7dbb      	ldrb	r3, [r7, #22]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	607a      	str	r2, [r7, #4]
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	460b      	mov	r3, r1
 8008242:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008252:	7af9      	ldrb	r1, [r7, #11]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	f7fa ffd7 	bl	800320a <HAL_PCD_EP_Receive>
 800825c:	4603      	mov	r3, r0
 800825e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f832 	bl	80082cc <USBD_Get_USB_Status>
 8008268:	4603      	mov	r3, r0
 800826a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800826c:	7dbb      	ldrb	r3, [r7, #22]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	4611      	mov	r1, r2
 800828c:	4618      	mov	r0, r3
 800828e:	f7fa fff7 	bl	8003280 <HAL_PCD_EP_GetRxCount>
 8008292:	4603      	mov	r3, r0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082a4:	4b03      	ldr	r3, [pc, #12]	@ (80082b4 <USBD_static_malloc+0x18>)
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	200013e4 	.word	0x200013e4

080082b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d817      	bhi.n	8008310 <USBD_Get_USB_Status+0x44>
 80082e0:	a201      	add	r2, pc, #4	@ (adr r2, 80082e8 <USBD_Get_USB_Status+0x1c>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	080082f9 	.word	0x080082f9
 80082ec:	080082ff 	.word	0x080082ff
 80082f0:	08008305 	.word	0x08008305
 80082f4:	0800830b 	.word	0x0800830b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
    break;
 80082fc:	e00b      	b.n	8008316 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082fe:	2303      	movs	r3, #3
 8008300:	73fb      	strb	r3, [r7, #15]
    break;
 8008302:	e008      	b.n	8008316 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
    break;
 8008308:	e005      	b.n	8008316 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	73fb      	strb	r3, [r7, #15]
    break;
 800830e:	e002      	b.n	8008316 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	73fb      	strb	r3, [r7, #15]
    break;
 8008314:	bf00      	nop
  }
  return usb_status;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <__itoa>:
 8008324:	1e93      	subs	r3, r2, #2
 8008326:	2b22      	cmp	r3, #34	@ 0x22
 8008328:	b510      	push	{r4, lr}
 800832a:	460c      	mov	r4, r1
 800832c:	d904      	bls.n	8008338 <__itoa+0x14>
 800832e:	2300      	movs	r3, #0
 8008330:	700b      	strb	r3, [r1, #0]
 8008332:	461c      	mov	r4, r3
 8008334:	4620      	mov	r0, r4
 8008336:	bd10      	pop	{r4, pc}
 8008338:	2a0a      	cmp	r2, #10
 800833a:	d109      	bne.n	8008350 <__itoa+0x2c>
 800833c:	2800      	cmp	r0, #0
 800833e:	da07      	bge.n	8008350 <__itoa+0x2c>
 8008340:	232d      	movs	r3, #45	@ 0x2d
 8008342:	700b      	strb	r3, [r1, #0]
 8008344:	4240      	negs	r0, r0
 8008346:	2101      	movs	r1, #1
 8008348:	4421      	add	r1, r4
 800834a:	f000 f805 	bl	8008358 <__utoa>
 800834e:	e7f1      	b.n	8008334 <__itoa+0x10>
 8008350:	2100      	movs	r1, #0
 8008352:	e7f9      	b.n	8008348 <__itoa+0x24>

08008354 <itoa>:
 8008354:	f7ff bfe6 	b.w	8008324 <__itoa>

08008358 <__utoa>:
 8008358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800835a:	4c1f      	ldr	r4, [pc, #124]	@ (80083d8 <__utoa+0x80>)
 800835c:	b08b      	sub	sp, #44	@ 0x2c
 800835e:	4605      	mov	r5, r0
 8008360:	460b      	mov	r3, r1
 8008362:	466e      	mov	r6, sp
 8008364:	f104 0c20 	add.w	ip, r4, #32
 8008368:	6820      	ldr	r0, [r4, #0]
 800836a:	6861      	ldr	r1, [r4, #4]
 800836c:	4637      	mov	r7, r6
 800836e:	c703      	stmia	r7!, {r0, r1}
 8008370:	3408      	adds	r4, #8
 8008372:	4564      	cmp	r4, ip
 8008374:	463e      	mov	r6, r7
 8008376:	d1f7      	bne.n	8008368 <__utoa+0x10>
 8008378:	7921      	ldrb	r1, [r4, #4]
 800837a:	7139      	strb	r1, [r7, #4]
 800837c:	1e91      	subs	r1, r2, #2
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	6038      	str	r0, [r7, #0]
 8008382:	2922      	cmp	r1, #34	@ 0x22
 8008384:	f04f 0100 	mov.w	r1, #0
 8008388:	d904      	bls.n	8008394 <__utoa+0x3c>
 800838a:	7019      	strb	r1, [r3, #0]
 800838c:	460b      	mov	r3, r1
 800838e:	4618      	mov	r0, r3
 8008390:	b00b      	add	sp, #44	@ 0x2c
 8008392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008394:	1e58      	subs	r0, r3, #1
 8008396:	4684      	mov	ip, r0
 8008398:	fbb5 f7f2 	udiv	r7, r5, r2
 800839c:	fb02 5617 	mls	r6, r2, r7, r5
 80083a0:	3628      	adds	r6, #40	@ 0x28
 80083a2:	446e      	add	r6, sp
 80083a4:	460c      	mov	r4, r1
 80083a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80083aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80083ae:	462e      	mov	r6, r5
 80083b0:	42b2      	cmp	r2, r6
 80083b2:	f101 0101 	add.w	r1, r1, #1
 80083b6:	463d      	mov	r5, r7
 80083b8:	d9ee      	bls.n	8008398 <__utoa+0x40>
 80083ba:	2200      	movs	r2, #0
 80083bc:	545a      	strb	r2, [r3, r1]
 80083be:	1919      	adds	r1, r3, r4
 80083c0:	1aa5      	subs	r5, r4, r2
 80083c2:	42aa      	cmp	r2, r5
 80083c4:	dae3      	bge.n	800838e <__utoa+0x36>
 80083c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80083ca:	780e      	ldrb	r6, [r1, #0]
 80083cc:	7006      	strb	r6, [r0, #0]
 80083ce:	3201      	adds	r2, #1
 80083d0:	f801 5901 	strb.w	r5, [r1], #-1
 80083d4:	e7f4      	b.n	80083c0 <__utoa+0x68>
 80083d6:	bf00      	nop
 80083d8:	0800853c 	.word	0x0800853c

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <__libc_init_array>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008424 <__libc_init_array+0x38>)
 80083f0:	4c0d      	ldr	r4, [pc, #52]	@ (8008428 <__libc_init_array+0x3c>)
 80083f2:	1b64      	subs	r4, r4, r5
 80083f4:	10a4      	asrs	r4, r4, #2
 80083f6:	2600      	movs	r6, #0
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	d109      	bne.n	8008410 <__libc_init_array+0x24>
 80083fc:	4d0b      	ldr	r5, [pc, #44]	@ (800842c <__libc_init_array+0x40>)
 80083fe:	4c0c      	ldr	r4, [pc, #48]	@ (8008430 <__libc_init_array+0x44>)
 8008400:	f000 f818 	bl	8008434 <_init>
 8008404:	1b64      	subs	r4, r4, r5
 8008406:	10a4      	asrs	r4, r4, #2
 8008408:	2600      	movs	r6, #0
 800840a:	42a6      	cmp	r6, r4
 800840c:	d105      	bne.n	800841a <__libc_init_array+0x2e>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	f855 3b04 	ldr.w	r3, [r5], #4
 8008414:	4798      	blx	r3
 8008416:	3601      	adds	r6, #1
 8008418:	e7ee      	b.n	80083f8 <__libc_init_array+0xc>
 800841a:	f855 3b04 	ldr.w	r3, [r5], #4
 800841e:	4798      	blx	r3
 8008420:	3601      	adds	r6, #1
 8008422:	e7f2      	b.n	800840a <__libc_init_array+0x1e>
 8008424:	0800856c 	.word	0x0800856c
 8008428:	0800856c 	.word	0x0800856c
 800842c:	0800856c 	.word	0x0800856c
 8008430:	08008570 	.word	0x08008570

08008434 <_init>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	bf00      	nop
 8008438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843a:	bc08      	pop	{r3}
 800843c:	469e      	mov	lr, r3
 800843e:	4770      	bx	lr

08008440 <_fini>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	bf00      	nop
 8008444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008446:	bc08      	pop	{r3}
 8008448:	469e      	mov	lr, r3
 800844a:	4770      	bx	lr
